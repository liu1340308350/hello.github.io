<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASM开发入门</title>
    <url>/2020/12/30/ASM%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>认识ASM：是什么，有什么，能干什么</p>
<p>ASM编程模型和核心API</p>
<p>ASM开发实战：实现统计方法的运行时间</p>
<a id="more"></a>

<h1 id="ASM概述"><a href="#ASM概述" class="headerlink" title="ASM概述"></a>ASM概述</h1><blockquote>
<p>ASM是一个Java字节码操作框架，它能被用来动态生成类或者增强既有类的功能</p>
<p>ASM可以直接产生二进制Class文件，也可以在类被加载入虚拟机之前动态改变类行为，ASM从类文件中读取信息后，能够改变类行为，分析类信息，甚至能根据要求生成新类</p>
<p>目前许多框架如cglib，Hibernate，Spring都直接或间接地使用ASM操作字节码</p>
</blockquote>
<h1 id="ASM编程模型："><a href="#ASM编程模型：" class="headerlink" title="ASM编程模型："></a>ASM编程模型：</h1><blockquote>
<p><strong>Core API</strong>：提供了基于事件形式的编程模型。该模型不需要一次性将整个类的结构读取到内存中，因此这种方式更快，需要更少的内存，但这种编码方式难度较大。</p>
<p><strong>Tree API</strong>：提供了基于树形的编程模型。该模型需要一次性将一个类的完整结构全部读取到内存当中，所以这种方法需要更多的内存，这种编码格式较简单。</p>
</blockquote>
<h1 id="ASM的Core-API"><a href="#ASM的Core-API" class="headerlink" title="ASM的Core API"></a>ASM的Core API</h1><blockquote>
<p>ASM Core API中操纵字节码的功能基于ClassVisitor接口。这个接口中的每个方法对应了class文件中的每一项。</p>
<p>ASM提供了三个基于ClassVisitor接口的类来实现class文件的生成的转换</p>
</blockquote>
<p>1.ClassReader：ClassReader解析一个类的class字节码</p>
<p>2.ClassAdapter：ClassAdapter是ClassVisitor的实现类，实现要变化的功能</p>
<p>3.ClassWriter：ClassWriter也是ClassVisitor的实现类，可以用来输出变化后的字节码</p>
<p>ASM给我们提供了ASMifiter工具来帮助开发，可使用<strong>ASMifier</strong>工具生成ASM结构来对比</p>
<h1 id="ClassVisitor开发"><a href="#ClassVisitor开发" class="headerlink" title="ClassVisitor开发"></a>ClassVisitor开发</h1><h1 id="MethodVisitor开发"><a href="#MethodVisitor开发" class="headerlink" title="MethodVisitor开发"></a>MethodVisitor开发</h1><h1 id="实现模拟AOP功能"><a href="#实现模拟AOP功能" class="headerlink" title="实现模拟AOP功能"></a>实现模拟AOP功能</h1>]]></content>
  </entry>
  <entry>
    <title>Debug调试学习</title>
    <url>/2021/01/28/Debug%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-Debug概述"><a href="#1-Debug概述" class="headerlink" title="1 Debug概述"></a>1 Debug概述</h1><ul>
<li><p>Debug能帮助我们做什么？</p>
<ol>
<li>追踪代码的运行流程。</li>
<li>程序运行异常定位。</li>
<li>线上问题追踪。</li>
</ol>
</li>
</ul>
<ul>
<li><p>Debug对于程序学习者的意义</p>
<ol>
<li>通过调试能够更好的查看程序的执行流程。</li>
<li>复杂的程序逻辑，通过老师的口述讲解，很难理解清楚，这个时候借助调试能够很好的帮助同学们理解程序。</li>
<li>定位问题，提高自我解决问题的能力。</li>
</ol>
</li>
</ul>
<h1 id="2-IDEA中的Debug步骤"><a href="#2-IDEA中的Debug步骤" class="headerlink" title="2 IDEA中的Debug步骤"></a>2 IDEA中的Debug步骤</h1><ul>
<li><p>设置断点（F9）</p>
</li>
<li><p>调试程序（8个按钮）</p>
<p><img src="/images/2021012801.png" alt=""></p>
<table>
<thead>
<tr>
<th>按钮</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/2021012802.png" alt=""></td>
<td>(Alt + F10)：如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行</td>
</tr>
<tr>
<td><img src="/images/2021012803.png" alt=""></td>
<td>(F8)：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</td>
</tr>
<tr>
<td><img src="/images/2021012804.png" alt="2019-09-28_162345"></td>
<td>(F7)：步入。如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。</td>
</tr>
<tr>
<td><img src="/images/2021012805.png" alt="2019-09-28_164200"></td>
<td>(Alt + Shift + F7)：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</td>
</tr>
<tr>
<td><img src="/images/2021012806.png" alt="2019-09-28_164215"></td>
<td>(Shift + F8)：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</td>
</tr>
<tr>
<td><img src="/images/2021012807.png" alt="2019-09-28_164428"></td>
<td>回退断点。</td>
</tr>
<tr>
<td><img src="/images/2021012815.png" alt=""></td>
<td>(Alt + F9)：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</td>
</tr>
<tr>
<td><img src="/images/2021012808.png" alt="2019-09-28_164437"></td>
<td>(Alt + F8)：计算表达式。</td>
</tr>
</tbody></table>
</li>
<li><p>观察变量</p>
<ul>
<li>查看变量有三种方式：<ul>
<li>程序区查看变量</li>
<li>Debugger的Variables中查看变量</li>
<li>鼠标悬停到变量名上会弹出当前变量的值</li>
</ul>
</li>
</ul>
</li>
<li><p>查看输出</p>
</li>
</ul>
<h1 id="3-跳转到当前代码执行的行"><a href="#3-跳转到当前代码执行的行" class="headerlink" title="3 跳转到当前代码执行的行"></a>3 跳转到当前代码执行的行</h1><ul>
<li><p>跳转到当前代码执行的行（Alt + F10）<img src="/images/2021012802.png" alt="2019-09-28_164437"></p>
</li>
<li><p>作用</p>
<ul>
<li>使程序窗口切换到当前正在运行的程序处。</li>
</ul>
</li>
</ul>
<h1 id="4-步过调试的使用"><a href="#4-步过调试的使用" class="headerlink" title="4 步过调试的使用"></a>4 步过调试的使用</h1><ul>
<li>步过调试<ul>
<li>步过调试按钮（F8）<img src="/images/2021012810.png" alt=""></li>
</ul>
</li>
<li>作用<ul>
<li>步过，一行一行地往下走，如果遇到方法不会进入方法</li>
<li>常用于调试过程中不想进入调用的方法体的情况。</li>
</ul>
</li>
</ul>
<h1 id="5-步入调试的使用"><a href="#5-步入调试的使用" class="headerlink" title="5 步入调试的使用"></a>5 步入调试的使用</h1><ul>
<li><p>步入调试</p>
<ul>
<li>步过调试按钮（F7）<img src="/images/2021012811.png" alt=""></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>步入，一行一行地往下走，如果这一行上有方法，则进入方法内部。</p>
</li>
<li><p>一般用于进入自定义方法内，不会进入官方类库的方法。</p>
</li>
</ul>
</li>
</ul>
<h1 id="6-强制步入调试的使用"><a href="#6-强制步入调试的使用" class="headerlink" title="6 强制步入调试的使用"></a>6 强制步入调试的使用</h1><ul>
<li><p>强制步入调试</p>
<ul>
<li>强制步入调试按钮（Alt + Shift + F7）<img src="/images/2021012812.png" alt="2019-09-28_164200"></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>进入官方类库方法</p>
</li>
<li><p>帮助我们学习和查看JDK源码</p>
</li>
</ul>
</li>
</ul>
<h1 id="7-步出调试的使用"><a href="#7-步出调试的使用" class="headerlink" title="7 步出调试的使用"></a>7 步出调试的使用</h1><ul>
<li><p>步出调试</p>
<ul>
<li>步出调试按钮（Shift + F8）<img src="/images/2021012813.png" alt=""></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>从方法内退出到方法调用处。</li>
<li>调试的时候，有时候会跳入到自己不想查看的方法体，这个时候使用步出。</li>
</ul>
</li>
</ul>
<h1 id="8-回退断点调试的使用"><a href="#8-回退断点调试的使用" class="headerlink" title="8 回退断点调试的使用"></a>8 回退断点调试的使用</h1><ul>
<li><p>回退断点</p>
<ul>
<li>回退断点按钮 <img src="/images/2021012814.png" alt=""></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>回退到当前方法的调用处。</p>
</li>
<li><p>当想重新查看该方法体的执行过程时，不用重新启动Debug，可以使用回退断点方式。</p>
</li>
</ul>
</li>
</ul>
<h1 id="9-运行到光标处"><a href="#9-运行到光标处" class="headerlink" title="9 运行到光标处"></a>9 运行到光标处</h1><ul>
<li>运行到光标处<ul>
<li>运行光标处按钮 （F9）<img src="/images/2021012815.png" alt=""></li>
<li>作用<ul>
<li>使程序运行到光标处，而无需设置断点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="10-计算表达式"><a href="#10-计算表达式" class="headerlink" title="10 计算表达式"></a>10 计算表达式</h1><ul>
<li><p>计算表达式</p>
<ul>
<li><p>计算表达式按钮（Alt + F8）<img src="/images/2021012808.png" alt=""></p>
<p><img src="/images/2021012816.png" alt="image-20210128172159840"></p>
</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>设置变量，在计算表达式的框里，可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了。 </li>
</ul>
</li>
</ul>
<h1 id="11-条件断点"><a href="#11-条件断点" class="headerlink" title="11 条件断点"></a>11 条件断点</h1><ul>
<li><p>条件断点</p>
<ul>
<li><p><strong>右键单击断点处</strong>，可以设置进入断点的条件</p>
<p><img src="/images/2021012817.png" alt="image-20210128172101075"></p>
</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>通过设置断点条件，在满足条件时，才停在断点处，否则直接运行。</li>
</ul>
</li>
</ul>
<h1 id="12-多线程调试"><a href="#12-多线程调试" class="headerlink" title="12 多线程调试"></a>12 多线程调试</h1><ul>
<li><p>步骤</p>
<ul>
<li><p>多线程调试，需要调整断点挂起级别为Thread</p>
<p><img src="/images/2021012818.png" alt="image-20210128172128757"></p>
</li>
<li><p>Frame中选择线程进行调试</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Arthas使用与进阶</title>
    <url>/2021/01/17/Arthas%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<p><em>Arthas</em>（阿尔萨斯）是阿里巴巴开源的Java诊断工具</p>
<blockquote>
<p>开源地址：<a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a><br>官方文档：<a href="https://alibaba.github.io/arthas" target="_blank" rel="noopener">https://alibaba.github.io/arthas</a></p>
</blockquote>
<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><blockquote>
<p><a href="https://arthas.aliyun.com/doc/install-detail.html" target="_blank" rel="noopener">https://arthas.aliyun.com/doc/install-detail.html</a></p>
<p><a href="https://blog.csdn.net/monokai/article/details/107457772" target="_blank" rel="noopener">https://blog.csdn.net/monokai/article/details/107457772</a></p>
</blockquote>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><blockquote>
<p><a href="https://arthas.aliyun.com/doc/quick-start.html" target="_blank" rel="noopener">https://arthas.aliyun.com/doc/quick-start.html</a></p>
</blockquote>
<h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><blockquote>
<p><a href="https://arthas.aliyun.com/doc/advanced-use.html" target="_blank" rel="noopener">https://arthas.aliyun.com/doc/advanced-use.html</a></p>
</blockquote>
<h1 id="Arthas-脑图—常用命令汇总"><a href="#Arthas-脑图—常用命令汇总" class="headerlink" title="Arthas 脑图—常用命令汇总:"></a>Arthas 脑图—常用命令汇总:</h1><blockquote>
<p><a href="https://github.com/alibaba/arthas/issues/1003" target="_blank" rel="noopener">https://github.com/alibaba/arthas/issues/1003</a></p>
</blockquote>
]]></content>
      <categories>
        <category>运维知识</category>
        <category>Java诊断工具</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令整理</title>
    <url>/2019/10/01/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class="line">docker images                                    #查看本地所有镜像</span><br><span class="line">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class="line">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class="line">docker rmi $&#123;IMAGE NAME&#x2F;ID&#125;                      #删除镜像</span><br><span class="line">docker rm $&#123;CONTAINER NAME&#x2F;ID&#125;                   #删除容器</span><br><span class="line">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class="line">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class="line">docker start $&#123;CONTAINER NAME&#x2F;ID&#125;                #运行一个以前运行过的容器</span><br><span class="line">docker stop $&#123;CONTAINER NAME&#x2F;ID&#125;                 #停止一个正在运行的容器</span><br><span class="line">docker logs $&#123;CONTAINER NAME&#x2F;ID&#125;                 #显示运行容器的日志</span><br><span class="line">docker run...                                    #运行一个容器</span><br><span class="line">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class="line">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class="line">    -e $&#123;env name&#125;&#x3D;$&#123;env value&#125;                       #添加环境变量</span><br><span class="line">    -d                                                #后台运行</span><br><span class="line">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br></pre></td></tr></table></figure>

<h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Advance use </span><br><span class="line">docker ps -f &quot;status&#x3D;exited&quot;                                   #显示所有退出的容器</span><br><span class="line">docker ps -a -q                                                #显示所有容器id</span><br><span class="line">docker ps -f &quot;status&#x3D;exited&quot; -q                                #显示所有退出容器的id</span><br><span class="line">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class="line">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class="line">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class="line">docker rm $(docker ps -f &quot;status&#x3D;exited&quot; -q)                   #删除所有退出的容器</span><br><span class="line">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class="line">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class="line">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME&#x2F;ID&#125; &#x2F;bin&#x2F;bash                 #进入容器内</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME&#x2F;ID&#125; ping $&#123;CONTAINER NAME&#x2F;ID&#125; #一个容器ping另外一个容器</span><br><span class="line">docker top $&#123;CONTAINER NAME&#x2F;ID&#125;                                #显示一个容器的top信息</span><br><span class="line">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class="line">    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class="line">    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class="line">    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class="line">docker system </span><br><span class="line">      docker system df           #显示硬盘占用</span><br><span class="line">      docker system events       #显示容器的实时事件</span><br><span class="line">      docker system info         #显示系统信息</span><br><span class="line">      docker system prune        #清理文件</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020110101.png" alt="image-20201101173643142"></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>分布式/微服务</category>
        <category>虚拟化/容器化</category>
      </categories>
      <tags>
        <tag>Docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建MySQL集群-PXC方案</title>
    <url>/2020/08/21/Docker%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4-PXC%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>尝试通过Dcoekr搭建MySQL集群</p>
<a id="more"></a>

<p>常见的集群方案包括：Replication，Percona XtraDB Cluster（PXC）</p>
<blockquote>
<p>MySQL主从复制：<a href="https://www.jianshu.com/p/faf0127f1cb2" target="_blank" rel="noopener">https://www.jianshu.com/p/faf0127f1cb2</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>Replication</th>
<th>PXC</th>
</tr>
</thead>
<tbody><tr>
<td>数据同步是单向的，master负责写，然后异步复制给slave；如果slave写入数据，不会复制给master。</td>
<td>数据同步时双向的，任何一个mysql节点写入数据，都会同步到集群中其它的节点。</td>
</tr>
<tr>
<td>异步复制，从和主无法保证数据的一致性</td>
<td>同步复制，事务在所有集群节点要么同时提交，要么同时不提交</td>
</tr>
</tbody></table>
<p>Replication方案适用于日志，博客这样的网站，存储一些价值较低的内容。</p>
<p>而PXC具备强一致性，数据同步是双向的特点，另外PerconaServer是MySQL改进版，性能提升很大。所以这里我选择的是PXC方案搭建Mysql集群。</p>
<h3 id="一、搭建准备"><a href="#一、搭建准备" class="headerlink" title="一、搭建准备"></a>一、搭建准备</h3><p>Docker的安装与配置非常简单。</p>
<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure>

<h4 id="2-配置docker镜像加速器"><a href="#2-配置docker镜像加速器" class="headerlink" title="2.配置docker镜像加速器"></a>2.配置docker镜像加速器</h4><p>这里我使用的阿里云的加速器</p>
<h4 id="3-docker常用命令"><a href="#3-docker常用命令" class="headerlink" title="3.docker常用命令"></a>3.docker常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search   #查找镜像</span><br><span class="line">docker images	#查看所有镜像</span><br><span class="line">docker pull		#下载镜像</span><br><span class="line">docker rmi		#删除镜像</span><br><span class="line">docker ps -a	#查看正在运行的实例</span><br></pre></td></tr></table></figure>



<h3 id="二、Mysql-PXC集群环境部署"><a href="#二、Mysql-PXC集群环境部署" class="headerlink" title="二、Mysql PXC集群环境部署"></a>二、Mysql PXC集群环境部署</h3><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull docker.io&#x2F;percona&#x2F;percona-xtradb-cluster</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>可以使用<code>docker tag</code>改名，这里我将 docker.io/percona/percona-xtradb-cluster更名为pxc</p>
<h4 id="2-创建内部网络"><a href="#2-创建内部网络" class="headerlink" title="2.创建内部网络"></a>2.创建内部网络</h4><p>出于安全考虑，需要给PXC集群实例创建Docker内部网络</p>
<p>这里我搭建集群使用的是<strong>5节点</strong>，网段可以自己规定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create --subnet&#x3D;172.10.0.0&#x2F;24 net1</span><br><span class="line">docker network inspect net1</span><br><span class="line">docker network rm net1</span><br></pre></td></tr></table></figure>

<h4 id="3-创建Docker卷"><a href="#3-创建Docker卷" class="headerlink" title="3.创建Docker卷"></a>3.创建Docker卷</h4><p>容器中的PXC节点映射数据目录的解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create --name v1</span><br><span class="line">docker volume create --name v2</span><br><span class="line">docker volume create --name v3</span><br><span class="line">docker volume create --name v4</span><br><span class="line">docker volume create --name v5</span><br></pre></td></tr></table></figure>

<p>查看docker卷信息：<code>docker inspect v1</code></p>
<h4 id="4-创建PXC容器"><a href="#4-创建PXC容器" class="headerlink" title="4.创建PXC容器"></a>4.创建PXC容器</h4><p>5个PXC容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -v v1:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node1 --net&#x3D;net1 --ip 172.10.0.2 pxc </span><br><span class="line"></span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v2:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node2 --net&#x3D;net1 --ip 172.10.0.3 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v3:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node3 --net&#x3D;net1 --ip 172.10.0.4 pxc </span><br><span class="line"></span><br><span class="line">docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v4:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node4 --net&#x3D;net1 --ip 172.10.0.5 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v5:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node5 --net&#x3D;net1 --ip 172.10.0.6 pxc</span><br></pre></td></tr></table></figure>

<h3 id="三、验证是否创建成功PCX集群"><a href="#三、验证是否创建成功PCX集群" class="headerlink" title="三、验证是否创建成功PCX集群"></a>三、验证是否创建成功PCX集群</h3><p>在数据库中创建5个DB：</p>
<p><img src="/images/2020110201.png" alt="image-20201102100706388"></p>
<p>在DB1中新建test数据库并创建student表：</p>
<p><img src="/images/2020110202.png" alt="image-20201102100820614"></p>
<p>刷新之后，可以看到DB2,DB3,DB4,DB5全部同步到与DB1一致</p>
<p><img src="/images/2020110203.png" alt="image-20201102100858654"></p>
<h3 id="四、数据库负载的配置"><a href="#四、数据库负载的配置" class="headerlink" title="四、数据库负载的配置"></a>四、数据库负载的配置</h3><p>数据库负载均衡的必要性：</p>
<p>虽然搭建了集群，但是不使用数据库负载均衡，单节点处理所有请求，会暴露负载高，性能差的问题</p>
<p>这里可以使用<strong>Haproxy</strong>做负载均衡，将请求均匀的分发给每个节点，单节点负载会轻松很多。</p>
<h4 id="1-haproxy的下载"><a href="#1-haproxy的下载" class="headerlink" title="1.haproxy的下载"></a>1.haproxy的下载</h4><p><code>docker pull haproxy</code></p>
<h4 id="2-创建haproxy配置文件"><a href="#2-创建haproxy配置文件" class="headerlink" title="2.创建haproxy配置文件"></a>2.创建haproxy配置文件</h4><blockquote>
<p>配置参考：<a href="http://zhangge.net/5125.html" target="_blank" rel="noopener">http://zhangge.net/5125.html</a></p>
</blockquote>
<p>在/home/soft/haproxy/目录下创建haproxy.cfg文件</p>
<p>haproxy.cfg</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">	#工作目录</span><br><span class="line">	chroot /usr/local/etc/haproxy</span><br><span class="line">	#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><br><span class="line">	log 127.0.0.1 local5 info</span><br><span class="line">	#守护进程运行</span><br><span class="line">	daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">	log global</span><br><span class="line">	mode http</span><br><span class="line">	#日志格式</span><br><span class="line">	option httplog</span><br><span class="line">	#日志中不记录负载均衡的心跳检测记录</span><br><span class="line">	option dontlognull</span><br><span class="line">	#连接超时（毫秒）</span><br><span class="line">	timeout connect 5000</span><br><span class="line">	#客户端超时（毫秒）</span><br><span class="line">	timeout client 50000</span><br><span class="line">	#服务器超时（毫秒）</span><br><span class="line">	timeout server 50000</span><br><span class="line"></span><br><span class="line">#监控界面</span><br><span class="line">listen admin_stats</span><br><span class="line">	#监控界面的访问的IP和端口</span><br><span class="line">	bind 0.0.0.0:8888</span><br><span class="line">	#访问协议</span><br><span class="line">	mode http</span><br><span class="line">	#URI相对地址</span><br><span class="line">	stats uri /dbs</span><br><span class="line">	#统计报告格式</span><br><span class="line">	stats realm     Global\ statistics</span><br><span class="line">	#登陆帐户信息</span><br><span class="line">	stats auth  admin:123456</span><br><span class="line"> #数据库负载均衡</span><br><span class="line"> listen  proxy-mysql</span><br><span class="line">	#访问的IP和端口</span><br><span class="line">	bind  0.0.0.0:3306</span><br><span class="line">	#网络协议</span><br><span class="line">	mode  tcp</span><br><span class="line">	#负载均衡算法（轮询算法）</span><br><span class="line">	#轮询算法：roundrobin</span><br><span class="line">	#权重算法：static-rr</span><br><span class="line">	#最少连接算法：leastconn</span><br><span class="line">	#请求源IP算法：source</span><br><span class="line">	balance  roundrobin</span><br><span class="line">	#日志格式</span><br><span class="line">	option  tcplog</span><br><span class="line">   	#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><br><span class="line">        option  mysql-check user haproxy</span><br><span class="line">        server  MySQL_1 172.10.1.2:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_2 172.10.1.3:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_3 172.10.1.4:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_4 172.10.1.5:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_5 172.10.1.6:3306 check weight 1 maxconn 2000</span><br><span class="line">	#使用keepalive检测死链</span><br><span class="line">	option  tcpka</span><br></pre></td></tr></table></figure>



<h4 id="4-实例化haproxy"><a href="#4-实例化haproxy" class="headerlink" title="4.实例化haproxy"></a>4.实例化haproxy</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.10.0.7 haproxy</span><br></pre></td></tr></table></figure>

<h4 id="5-登陆到交互容器里"><a href="#5-登陆到交互容器里" class="headerlink" title="5.登陆到交互容器里"></a>5.登陆到交互容器里</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it h1 bash</span><br><span class="line">haproxy -f &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg</span><br></pre></td></tr></table></figure>

<h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p><img src="/images/2020110204.png" alt="image-20201102120345130"></p>
<p>首页展示：</p>
<p><img src="/images/2020110205.png" alt="image-20201102120404832"></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>数据库集群</category>
      </categories>
      <tags>
        <tag>MySQL集群</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Duplicate entry for key &#39;PRIMARY&#39;</title>
    <url>/2020/08/14/Duplicate-entry-for-key-PRIMARY/</url>
    <content><![CDATA[<p>在执行数据库插入语句时，遇到一个比较罕见的错误，记录一下</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Duplicate entry &#39;322&#39; for key &#39;PRIMARY&#39;</span><br></pre></td></tr></table></figure>



<p>经过相关查阅，在Stack Overflow上找到了解决方法：</p>
<p><img src="/images/2020081801.png" alt=""></p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL错误</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装RabbitMQ</title>
    <url>/2020/07/27/Docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<p> RabbitMQ是基于AMQP的一款消息管理系统。AMQP(Advanced Message Queuing Protocol)，是一个提供消息服务的应用层标准高级消息队列协议，其中RabbitMQ就是基于这种协议的一种实现。</p>
<a id="more"></a>

<h1 id="Docker快速安装"><a href="#Docker快速安装" class="headerlink" title="Docker快速安装"></a>Docker快速安装</h1><p>1.docker search选择版本</p>
<p>2.docker pull 下载镜像</p>
<p>3.docker运行即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 rabbitmq:版本号</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020072701.png" alt="image-20201219141443802"></p>
<h1 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h1><p><strong>可能出现的问题</strong>：Windows环境下浏览器无法访问虚拟机开的rabbitmq服务</p>
<p>安装首先确保RabbitMQ的端口等配置正确，另外开放linux防火墙端口。如果依旧不能访问web界面，那么可能是rabbitmq没有开启web管理。</p>
<p>只需要通过<code>rabbitmq-plugins list</code>命令列出插件的启用和禁用状态。然后再修改即可。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.开启RabbitMQ  　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 rabbitmq</span><br></pre></td></tr></table></figure>

<p>2.进入RabbitMQ命令界面　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>3.开启　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>中间件</category>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker设置镜像自启动</title>
    <url>/2020/11/09/Docker%E8%AE%BE%E7%BD%AE%E9%95%9C%E5%83%8F%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>Docker便捷小技巧</p>
<a id="more"></a>

<p>1.发现没启动</p>
<p><code>docker ps</code></p>
<p>2.查看所有安装的镜像</p>
<p><code>docker ps -a</code></p>
<p>3.设置总是自动启动</p>
<p><code>docker update 镜像id --restart=always</code></p>
<p>4.重启测试一下</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>分布式/微服务</category>
        <category>虚拟化/容器化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch7进阶</title>
    <url>/2020/12/06/ElasticSearch7%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>ElasticSearch的进阶学习主要有两种分别是通读文档和案例学习。这里我选择的是通过案例来深入学习es。</p>
<p>案例数据选择的是tmdb网站的公开数据。</p>
<a id="more"></a>

<blockquote>
<p>tmdb网站：<a href="https://www.themoviedb.org/" target="_blank" rel="noopener">https://www.themoviedb.org/</a></p>
</blockquote>
<h1 id="tmdb索引创建"><a href="#tmdb索引创建" class="headerlink" title="tmdb索引创建"></a>tmdb索引创建</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;movie</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 1,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;mappings&quot;: &#123;</span><br><span class="line">     &quot;properties&quot;: &#123;</span><br><span class="line">       &quot;title&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">       &quot;tagline&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">       &quot;release_date&quot;:&#123;&quot;type&quot;:&quot;date&quot;,        &quot;format&quot;: &quot;8yyyy&#x2F;MM&#x2F;dd||yyyy&#x2F;M&#x2F;dd||yyyy&#x2F;MM&#x2F;d||yyyy&#x2F;M&#x2F;d&quot;&#125;,</span><br><span class="line">       &quot;popularity&quot;:&#123;&quot;type&quot;:&quot;double&quot;&#125;,</span><br><span class="line">       &quot;cast&quot;:&#123;</span><br><span class="line">         &quot;type&quot;:&quot;object&quot;,</span><br><span class="line">         &quot;properties&quot;:&#123;</span><br><span class="line">           &quot;character&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;:&quot;standard&quot;&#125;,</span><br><span class="line">           &quot;name&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;:&quot;standard&quot;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;overview&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="tmdb文档导入"><a href="#tmdb文档导入" class="headerlink" title="tmdb文档导入"></a>tmdb文档导入</h1><blockquote>
<p>csv文件导入es用通过SpringBoot实现的：<a href="https://github.com/liuurick/csvimportes" target="_blank" rel="noopener">https://github.com/liuurick/csvimportes</a></p>
</blockquote>
<h1 id="tmdb查询学习"><a href="#tmdb查询学习" class="headerlink" title="tmdb查询学习"></a>tmdb查询学习</h1><h2 id="query-DSL"><a href="#query-DSL" class="headerlink" title="query DSL"></a>query DSL</h2><blockquote>
<p><a href="https://blog.csdn.net/supermao1013/article/details/84261526" target="_blank" rel="noopener">https://blog.csdn.net/supermao1013/article/details/84261526</a></p>
</blockquote>
<h3 id="1-match查询与terms查询"><a href="#1-match查询与terms查询" class="headerlink" title="1.match查询与terms查询"></a>1.match查询与terms查询</h3><h4 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h4><p>match query 知道分词器的存在，会对field进行分词操作，然后再查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;Steve Jobs&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 7,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 14.340551,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2340&quot;,</span><br><span class="line">        &quot;_score&quot; : 14.340551,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Steve Jobs&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Can a great man be a good man?&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;53.670525&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Burke&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Aaron Eckhart&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Set backstage at three iconic product launches and ending in 1998 with the unveiling of the iMac, Steve Jobs takes us behind the scenes of the digital revolution to paint an intimate portrait of the brilliant man at its epicenter.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;703&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Italian Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get in. Get out. Get even.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2003&#x2F;5&#x2F;30&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;62.766854&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jason Bourne&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Matt Damon&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Charlie Croker pulled off the crime of a lifetime. The one thing that he didn&#39;t plan on was being double-crossed. Along with a drop-dead gorgeous safecracker, Croker and his team take off to re-steal the loot and end up in a pulse-pounding, pedal-to-the-metal chase that careens up, down, above and below the streets of Los Angeles.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1581&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Nut Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Let&#39;s Get Nuts!&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2014&#x2F;1&#x2F;17&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;18.568021&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Kay&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Meryl Streep&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Surly, a curmudgeon, independent squirrel is banished from his park and forced to survive in the city. Lucky for him, he stumbles on the one thing that may be able to save his life, and the rest of park community, as they gear up for winter - Maury&#39;s Nut Store.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2152&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Bank Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2008&#x2F;2&#x2F;28&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;30.387754&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Lucius&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Tom Felton&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Terry is a small-time car dealer trying to leave his shady past behind and start a family. Martine is a beautiful model from Terry&#39;s old neighbourhood who knows that Terry is no angel. When Martine proposes a foolproof plan to rob a bank, Terry recognises the danger but realises this may be the opportunity of a lifetime. As the resourceful band of thieves burrows its way into a safe-deposit vault at a Lloyds Bank, they quickly realise that, besides millions in riches, the boxes also contain secrets that implicate everyone from London&#39;s most notorious underworld gangsters to powerful government figures, and even the Royal Family. Although the heist makes headlines throughout Britain for several days, a government gag order eventually brings all reporting of the case to an immediate halt.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4081&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Inside Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The film that cost $20,000,000,000,000 to make.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;10&#x2F;8&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;16.930914&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Adam Beach&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A film that exposes the shocking truth behind the economic crisis of 2008. The global financial meltdown, at a cost of over $20 trillion, resulted in millions of people losing their homes and jobs. Through extensive research and interviews with major financial insiders, politicians and journalists, Inside Job traces the rise of a rogue industry and unveils the corrosive relationships which have corrupted politics, regulation and academia.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2552&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.198678,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;All About Steve&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Comedy That Clings&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;9&#x2F;4&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.237835&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Melvin B. Tolson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Denzel Washington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After one short date, a brilliant crossword constructor decides that a CNN cameraman is her true love. Because the cameraman&#39;s job takes him hither and yon, she crisscrosses the country, turning up at media events as she tries to convince him they are perfect for each other.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.3308554,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="查看分词分析"><a href="#查看分词分析" class="headerlink" title="查看分词分析"></a>查看分词分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;title&quot;, </span><br><span class="line">  &quot;text&quot;: &quot;Steve Jobs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过下方结果可知”Steve Jobs”被分词为steve和job</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;steve&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;job&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 10,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h4><p>term：查询某个字段里含有某个关键词的文档</p>
<p>terms：查询某个字段里含有多个关键词的文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: [</span><br><span class="line">        &quot;Steve Jobs&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过下方结果可知并没有命中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>match查询是按照字段上的定义的分词分析后去索引内查询</p>
<p>term查询是不进行分词的查询，直接去索引内查询，这种查询适合keyword、numeric、date等明确值的</p>
<h3 id="2-match分词后的and和or"><a href="#2-match分词后的and和or" class="headerlink" title="2.match分词后的and和or"></a>2.match分词后的and和or</h3><p>match查询默认是or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;:&#123;&quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 12,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 11,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 8.280251,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.280251,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3347&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien Zone&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Don&#39;t you dare go in there!&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1978&#x2F;11&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;0.000372&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Sgt. Jericho &#39;Action&#39; Jackson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Carl Weathers&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A man who is having an affair with a married woman is dropped off on the wrong street when going back to his hotel. He takes refuge out of the rain when an old man invites him in. He turns out to be a mortician, who tells him the stories of the people who have wound up in his establishment over the course of four stories.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;68&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.2474747,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Monsters vs Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;When aliens attack, monsters fight back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;3&#x2F;19&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.167578&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Carl Fredricksen (voice)&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ed Asner&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Susan Murphy is unwittingly clobbered by a meteor full of outer space gunk on her wedding day, she mysteriously grows to 49-feet-11-inches. The military jumps into action and captures Susan, secreting her away to a covert government compound. She is renamed Ginormica and placed in confinement with a ragtag group of Monsters...&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2468&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.2474747,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My Stepmother is an Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Man&#39;s closest encounter.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1988&#x2F;12&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;9.455596&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cristina&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Scarlett Johansson&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Trying to rescue her home planet from destruction, a gorgeous extraterrestrial named Celeste arrives on Earth and begins her scientific research. She woos quirky scientist Dr. Steve Mills, a widower with a young daughter. Before long, Celeste finds herself in love with Steve and her new life on Earth, where she experiences true intimacy for the first time. But when she loses sight of her mission, she begins to question where she belongs.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 4.512821,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将or换成and，想同时匹配到basketball 和cartoom aliens</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">   &quot;title&quot;: &#123;</span><br><span class="line">     &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">     &quot;operator&quot;: &quot;and&quot; </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-最小词项匹配"><a href="#3-最小词项匹配" class="headerlink" title="3.最小词项匹配"></a>3.最小词项匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">   &quot;title&quot;: &#123;</span><br><span class="line">     &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">     &quot;operator&quot;: &quot;or&quot; ,</span><br><span class="line">     &quot;minimum_should_match&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 5,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-短语查询"><a href="#4-短语查询" class="headerlink" title="4.短语查询"></a>4.短语查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match_phrase&quot;:&#123;&quot;title&quot;:&quot;steve zissou&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 13,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 11.292614,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.292614,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>短语前缀查询:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match_phrase_prefix&quot;:&#123;&quot;title&quot;:&quot;steve zis&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 14,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 23.216133,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 23.216133,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-多字段查询"><a href="#5-多字段查询" class="headerlink" title="5.多字段查询"></a>5.多字段查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;basketball with cartoom aliens&quot;,</span><br><span class="line">   &quot;field&quot;:[&quot;title&quot;,&quot;overview&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;[multi_match] unknown token [START_ARRAY] after [field]&quot;,</span><br><span class="line">        &quot;line&quot; : 5,</span><br><span class="line">        &quot;col&quot; : 12</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;[multi_match] unknown token [START_ARRAY] after [field]&quot;,</span><br><span class="line">    &quot;line&quot; : 5,</span><br><span class="line">    &quot;col&quot; : 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>操作不管是字符与还是或，按照逻辑关系命中后相加得分</p>
<blockquote>
<p>“explain”: true 类似于MySQL中的explain </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 查询结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 4,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 7.4039927,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2340&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.4039927,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Steve Jobs&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Can a great man be a good man?&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;53.670525&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Burke&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Aaron Eckhart&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Set backstage at three iconic product launches and ending in 1998 with the unveiling of the iMac, Steve Jobs takes us behind the scenes of the digital revolution to paint an intimate portrait of the brilliant man at its epicenter.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 7.4039927,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 1437) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 7.4039927,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.47008157,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2552&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.198678,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;All About Steve&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Comedy That Clings&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;9&#x2F;4&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.237835&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Melvin B. Tolson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Denzel Washington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After one short date, a brilliant crossword constructor decides that a CNN cameraman is her true love. Because the cameraman&#39;s job takes him hither and yon, she crisscrosses the country, turning up at media events as she tries to convince him they are perfect for each other.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 6.198678,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 1632) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 6.198678,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.39355576,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.3308554,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 5.3308554,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 140) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 5.3308554,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.33845747,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看数值，tfidf多少分，tfnorm归一化后多少分</p>
<p><img src="/images/2020120601.png" alt="image-20201206201041743"></p>
<p>多字段查询索引内有query分词后的结果，因为title比overview命中更重要，因此需要加权重。</p>
<h3 id="6-多字段查询优化"><a href="#6-多字段查询优化" class="headerlink" title="6.多字段查询优化"></a>6.多字段查询优化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;basketball with cartoom aliens&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title^10&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;tie_break&quot;:0.3</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;[multi_match] query does not support [tie_break]&quot;,</span><br><span class="line">        &quot;line&quot; : 6,</span><br><span class="line">        &quot;col&quot; : 16</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;[multi_match] query does not support [tie_break]&quot;,</span><br><span class="line">    &quot;line&quot; : 6,</span><br><span class="line">    &quot;col&quot; : 16</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继续深入查询"><a href="#继续深入查询" class="headerlink" title="继续深入查询"></a>继续深入查询</h2><h3 id="1-bool查询"><a href="#1-bool查询" class="headerlink" title="1.bool查询"></a>1.bool查询</h3><blockquote>
<p>must：必须都是true</p>
<p>must not： 必须都是false</p>
<p>should：其中有一个为true即可，但true的越多得分越高</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;: &#123; </span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line"></span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 23,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 103,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 14.092542,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 14.092542,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.687689,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.652669,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.450155,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.37727,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.803101,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.5949,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1740&quot;,</span><br><span class="line">        &quot;_score&quot; : 9.010006,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;How to Lose Friends &amp; Alienate People&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;He&#39;s across the pond, and out of his depth.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2008&#x2F;10&#x2F;2&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;16.785866&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Narrator&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Philippe Labro&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;&quot;&quot;A British writer struggles to fit in at a high-profile magazine in New York. Based on Toby Young&#39;s memoir &quot;How to Lose Friends &amp; Alienate People&quot;.&quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;453&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.579647,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Space Jam&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get ready to jam.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1996&#x2F;11&#x2F;15&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.125715&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cameron Poe&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nicolas Cage&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In a desperate attempt to win a basketball match and earn their freedom, the Looney Tunes seek the aid of retired basketball champion, Michael Jordan.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2842&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.242802,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Just Wright&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In this game every shot counts.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;5&#x2F;14&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.409253&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Quentin Jacobsen&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nat Wolff&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A physical therapist falls for the basketball player she is helping recover from a career-threatening injury.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-不同的multi-query的type"><a href="#2-不同的multi-query的type" class="headerlink" title="2.不同的multi_query的type"></a>2.不同的multi_query的type</h3><p>和multi_match得分不一样</p>
<p>因为multi_match有很多种type</p>
<p>best_fields:默认，取得分最高的作为对应的分数，最匹配模式,等同于dismax模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;dis_max&quot;: &#123; </span><br><span class="line">   &quot;queries&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 4512,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Avatar&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Enter the World of Pandora.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;150.437577&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jake Sully&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Sam Worthington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Spectre&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Plan No One Escapes&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;26&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;107.376788&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;James Bond&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Daniel Craig&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A cryptic message from Bond��s past sends him on a trail to uncover a sinister organization. While M battles political forces to keep the secret service alive, Bond peels back the layers of deceit to reveal the terrible truth behind SPECTRE.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Dark Knight Rises&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Legend Ends&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2012&#x2F;7&#x2F;16&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;112.31295&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Bruce Wayne &#x2F; Batman&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Christian Bale&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Following the death of District Attorney Harvey Dent, Batman assumes responsibility for Dent&#39;s crimes to protect the late attorney&#39;s reputation and is subsequently hunted by the Gotham City Police Department. Eight years later, Batman encounters the mysterious Selina Kyle and the villainous Bane, a new terrorist leader who overwhelms Gotham&#39;s finest. The Dark Knight resurfaces to protect a city that has branded him an enemy.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;John Carter&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Lost in our world, found in another.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2012&#x2F;3&#x2F;7&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;43.926995&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;John Carter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Taylor Kitsch&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;John Carter is a war-weary, former military captain who&#39;s inexplicably transported to the mysterious and exotic planet of Barsoom (Mars) and reluctantly becomes embroiled in an epic conflict. It&#39;s a world on the brink of collapse, and Carter rediscovers his humanity when he realizes the survival of Barsoom and its people rests in his hands.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Spider-Man 3&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The battle within.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;5&#x2F;1&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;115.699814&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Peter Parker &#x2F; Spider-Man&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Tobey Maguire&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;The seemingly invincible Spider-Man goes up against an all-new crop of villain �� including the shape-shifting Sandman. While Spider-Man��s superpowers are altered by an alien organism, his alter ego, Peter Parker, deals with nemesis Eddie Brock and also gets caught up in a love triangle.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;7&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Tangled&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;They&#39;re taking adventure to new lengths.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;11&#x2F;24&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;48.681969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Flynn Rider (voice)&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Zachary Levi&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When the kingdom&#39;s most wanted-and most charming-bandit Flynn Rider hides out in a mysterious tower, he&#39;s taken hostage by Rapunzel, a beautiful and feisty tower-bound teen with 70 feet of magical, golden hair. Flynn&#39;s curious captor, who&#39;s looking for her ticket out of the tower where she&#39;s been locked away for years, strikes a deal with the handsome thief and the unlikely duo sets off on an action-packed escapade, complete with a super-cop horse, an over-protective chameleon and a gruff gang of pub thugs.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;8&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Avengers: Age of Ultron&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A New Age Has Come.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;4&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;134.279229&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Tony Stark &#x2F; Iron Man&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Robert Downey Jr.&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth��s Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;9&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Harry Potter and the Half-Blood Prince&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Dark Secrets Revealed&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;7&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;98.885637&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Harry Potter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Daniel Radcliffe&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;As Harry begins his sixth year at Hogwarts, he discovers an old book marked as &#39;Property of the Half-Blood Prince&#39;, and begins to learn more about Lord Voldemort&#39;s dark past.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;10&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Batman v Superman: Dawn of Justice&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Justice or revenge&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2016&#x2F;3&#x2F;23&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;155.790452&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Bruce Wayne &#x2F; Batman&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Fearing the actions of a god-like Super Hero left unchecked, Gotham City��s own formidable, forceful vigilante takes on Metropolis��s most revered, modern-day savior, while the world wrestles with what sort of hero it really needs. And with Batman and Superman at war with one another, a new threat quickly arises, putting mankind in greater danger than it��s ever known before.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;11&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Superman Returns&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2006&#x2F;6&#x2F;28&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;57.925623&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Superman &#x2F; Clark Kent&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Brandon Routh&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Superman returns to discover his 5-year absence has allowed Lex Luthor to walk free, and that those he was closest too felt abandoned and have moved on. Luthor plots his ultimate revenge that could see millions killed and change the face of the planet forever, as well as ridding himself of the Man of Steel.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后使用explan看下 ((title:steve title:job) | (overview:steve overview:job))，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;best_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;valid&quot; : true,</span><br><span class="line">  &quot;explanations&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &quot;movie&quot;,</span><br><span class="line">      &quot;valid&quot; : true,</span><br><span class="line">      &quot;explanation&quot; : &quot;((overview:steve overview:job) | (title:steve title:job))&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以字段为单位分别计算分词的分数，然后取最好的一个,适用于最优字段匹配。</p>
<p>将其他因素以0.3的倍数考虑进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;dis_max&quot;: &#123; </span><br><span class="line">   &quot;queries&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;tie_breaker&quot;: 0.3</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 10,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 103,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 10.023938,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.023938,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.952852,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.881593,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.859726,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;453&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.579647,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Space Jam&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get ready to jam.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1996&#x2F;11&#x2F;15&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.125715&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cameron Poe&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nicolas Cage&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In a desperate attempt to win a basketball match and earn their freedom, the Looney Tunes seek the aid of retired basketball champion, Michael Jordan.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.8832817,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.644126,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.5659513,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2842&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.242802,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Just Wright&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In this game every shot counts.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;5&#x2F;14&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.409253&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Quentin Jacobsen&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nat Wolff&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A physical therapist falls for the basketball player she is helping recover from a career-threatening injury.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1890&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.92179,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;He Got Game&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The father, the son and the holy game.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1998&#x2F;5&#x2F;1&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.232599&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Megan&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Shoshana Bush&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A basketball player&#39;s father must try to convince him to go to a college so he can get a shorter sentence.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>most_fields:取命中的分值相加作为分数，同should match模式，加权共同影响模式</p>
<p>然后使用explain看下 ((title:steve title:job) | (overview:steve overview:job))~1.0，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;valid&quot; : true,</span><br><span class="line">  &quot;explanations&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &quot;movie&quot;,</span><br><span class="line">      &quot;valid&quot; : true,</span><br><span class="line">      &quot;explanation&quot; : &quot;((overview:steve overview:job) | (title:steve title:job))~1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以字段为单位分别计算分词的分数，然后加在一起，适用于都有影响的匹配</p>
<p>cross_fields:以分词为单位计算栏位总分</p>
<p>然后使用explain看下 blended(terms:[title:steve, overview:steve]) blended(terms:[title:job, overview:job])，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &#x2F;&#x2F;&quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以词为单位，分别用词去不同的字段内取内容，拿高的分数后与其他词的分数相加，适用于词导向的匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;forum&#x2F;article&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">  &quot;multi_match&quot;: &#123;</span><br><span class="line">   &quot;query&quot;: &quot;Peter Smith&quot;,</span><br><span class="line">   &quot;type&quot;: &quot;cross_fields&quot;, </span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;fields&quot;: [&quot;author_first_name&quot;, &quot;author_last_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>要求Peter必须在author_first_name或author_last_name中出现</p>
<p>要求Smith必须在author_first_name或author_last_name中出</p>
<p>原来most_fiels，可能像Smith //Williams也可能会出现，因为most_fields要求只是任何一个field匹配了就可以，匹配的field越多，分数越高</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;cross_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下不同的评分规则</p>
<h3 id="3-query-string"><a href="#3-query-string" class="headerlink" title="3.query string"></a>3.query string</h3><p>方便的利用AND(+) OR(|) NOT(-)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;query_string&quot;:&#123;</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;],</span><br><span class="line">   &quot;query&quot;:&quot;steve AND jobs&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-过滤查询"><a href="#4-过滤查询" class="headerlink" title="4.过滤查询"></a>4.过滤查询</h3><p>filter过滤查询</p>
<p><strong>单条件过滤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;filter&quot;:&#123;</span><br><span class="line">     &quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>多条件过滤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;sort&quot;:[</span><br><span class="line">  &#123;&quot;popularity&quot;:&#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>带match打分的的filter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;must&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;Search&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回0结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;Search&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>有结果，但是返回score为0，因为bool中若有filter的话，即便should都不满足，只是返回为0分而已</p>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;life&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到分数</p>
<h1 id="查全率和查准率"><a href="#查全率和查准率" class="headerlink" title="查全率和查准率"></a>查全率和查准率</h1><blockquote>
<p>查全率：正确的结果有n个，实际查询出来正确的有m  <strong>查全率：</strong>m/n</p>
<p>查准率：查出的n个文档有m个正确  <strong>查准率：m/n</strong></p>
<p>两者不可兼得，但可以调整排序</p>
</blockquote>
<p>function score自定义打分</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;function_score&quot;: &#123;</span><br><span class="line">   &#x2F;&#x2F;原始查询得到oldscore</span><br><span class="line">   &quot;query&quot;: &#123;   </span><br><span class="line">     &quot;multi_match&quot;:&#123;</span><br><span class="line">     &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">     &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">     &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">     &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;functions&quot;: [</span><br><span class="line">   &#123;&quot;field_value_factor&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;popularity&quot;,  &#x2F;&#x2F;对应要处理的字段</span><br><span class="line">      &quot;modifier&quot;: &quot;log2p&quot;,  &#x2F;&#x2F;将字段值+2后，计算对数</span><br><span class="line">      &quot;factor&quot;: 10  &#x2F;&#x2F;字段预处理*10</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  ], </span><br><span class="line"> </span><br><span class="line">  &quot;score_mode&quot;: &quot;sum&quot;,  &#x2F;&#x2F;不同的field value之间的得分相加</span><br><span class="line">  &quot;boost_mode&quot;: &quot;sum&quot;  &#x2F;&#x2F;最后在与old value相加</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="相关性排序调整"><a href="#相关性排序调整" class="headerlink" title="相关性排序调整"></a>相关性排序调整</h1><blockquote>
<p><a href="https://www.cnblogs.com/orzlin/p/10496869.html" target="_blank" rel="noopener">https://www.cnblogs.com/orzlin/p/10496869.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>搜索引擎</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch7笔记</title>
    <url>/2020/12/02/ElasticSearch7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>ElasticSearch7学习笔记</p>
<a id="more"></a>

<h1 id="ElasticSearch原理及部署"><a href="#ElasticSearch原理及部署" class="headerlink" title="ElasticSearch原理及部署"></a>ElasticSearch原理及部署</h1><blockquote>
<p>中文官网：<a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">https://www.elastic.co/cn/elasticsearch/</a></p>
<p>阮一峰：<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>
</blockquote>
<h2 id="搜索原理"><a href="#搜索原理" class="headerlink" title="搜索原理"></a>搜索原理</h2><p>ElasticSearch是独立的网络上的一个或一组进程节点，对外提供搜索服务（http/transport协议），对内就是一个搜索数据库。</p>
<p>对于搜索，是以词为单位做最基本的搜索单元，依靠分词器构造分词（其中英文分词器有空格分词器），然后用分词构建倒排索引。</p>
<p><img src="/images/2020120401.png" alt="image-20201204152921640"></p>
<p>正向索引</p>
<p><img src="/images/2020120402.png" alt="image-20201204193628122"></p>
<p>倒排索引</p>
<p><img src="/images/2020120403.png" alt="image-20201204193651906"></p>
<p>试想根据某个词查找，查找出一堆文档，那到底是哪个匹配度更高呢，这时候就需要打分的逻辑</p>
<ul>
<li>TF：词频，这个document文档包含了多少个这个词，包含越多表明越相关</li>
<li>DF：文档频率，包含该词的文档总数目</li>
<li>IDF：DF取倒数</li>
<li>打分常用计算公式：TF * IDF</li>
</ul>
<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><p>关系型数据库MySQL对应ElasticSearch：</p>
<ol>
<li>MySQL 中的数据库（DataBase），等价于 ES 中的索引（Index）。</li>
<li>MySQL 中一个数据库下面有 N 张表（Table），等价于1个索引 Index 下面有 N 多类型（Type）。</li>
<li>MySQL 中一个数据库表（Table）下的数据由多行（Row）多列（column，属性）组成，等价于1个 Type 由多个文档（Document）和多 Field 组成。</li>
<li>MySQL 中定义表结构、设定字段类型等价于 ES 中的 Mapping。举例说明，在一个关系型数据库里面，Schema 定义了表、每个表的字段，还有表和字段之间的关系。与之对应的，在 ES 中，Mapping 定义索引下的 Type 的字段处理规则，即索引如何建立、索引类型、是否保存原始索引 JSON 文档、是否压缩原始 JSON 文档、是否需要分词处理、如何进行分词处理等。</li>
<li>MySQL 中的增 insert、删 delete、改 update、查 search 操作等价于 ES 中的增 PUT/POST、删 Delete、改 _update、查 GET。其中的修改指定条件的更新 update 等价于 ES 中的 update_by_query，指定条件的删除等价于 ES 中的 delete_by_query。</li>
<li>MySQL 中的 group by、avg、sum 等函数类似于 ES 中的 Aggregations 的部分特性。</li>
<li>MySQL 中的去重 distinct 类似 ES 中的 cardinality 操作。</li>
<li>MySQL 中的数据迁移等价于 ES 中的 reindex 操作。</li>
</ol>
<p><img src="/images/2020120404.png" alt="img"></p>
<h2 id="分布式原理"><a href="#分布式原理" class="headerlink" title="分布式原理"></a>分布式原理</h2><p><a href="https://www.cnblogs.com/jajian/p/10176604.html" target="_blank" rel="noopener">https://www.cnblogs.com/jajian/p/10176604.html</a></p>
<h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><p><a href="https://liuurick.github.io/2020/10/11/ElasticSearch集群搭建/" target="_blank" rel="noopener">https://liuurick.github.io/2020/10/11/ElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a></p>
<h1 id="ElasticSearch基础语法及应用"><a href="#ElasticSearch基础语法及应用" class="headerlink" title="ElasticSearch基础语法及应用"></a>ElasticSearch基础语法及应用</h1><h2 id="索引创建，更新，删除"><a href="#索引创建，更新，删除" class="headerlink" title="索引创建，更新，删除"></a>索引创建，更新，删除</h2><blockquote>
<p>结构化索引，类似MySQL，我们会对索引结构做预定义，包括字段名，字段类型等；</p>
<p>非结构化索引，就类似Mongo，索引结构未知，根据具体的数据来update索引的mapping。</p>
<p>那么如何选择两种索引呢，还是跟具体的使用场景有关，结构化相比非结构化，更易优化，性能好些，非结构化相较灵活，只是频繁update索引mapping会有一定的性能损耗。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.索引创建</span><br><span class="line">PUT &#x2F;mytest</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.索引删除</span><br><span class="line">DELETE &#x2F;mytest</span><br></pre></td></tr></table></figure>



<h2 id="索引简单语句"><a href="#索引简单语句" class="headerlink" title="索引简单语句"></a>索引简单语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#3.非结构化方式新建索引</span><br><span class="line">PUT &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;name&quot;: &quot;liubin&quot;,</span><br><span class="line">  &quot;age&quot;: 24</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#4.获取索引记录</span><br><span class="line">GET &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line"></span><br><span class="line">#5.指定字段修改</span><br><span class="line">POST &#x2F;employee&#x2F;_update&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;: &quot;刘斌&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#6.强制指定创建，若已经存在，则失败</span><br><span class="line">POST &#x2F;employee&#x2F;_create&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;123&quot;,</span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#7.删除某个文档</span><br><span class="line">DELETE &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line"></span><br><span class="line">#8.查询全部文档</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#9.使用结构化的方式创建索引</span><br><span class="line">PUT &#x2F;employee</span><br><span class="line">&#123;</span><br><span class="line"> &quot;settings&quot;: &#123;</span><br><span class="line">   &quot;number_of_shards&quot;: 1,</span><br><span class="line">   &quot;number_of_replicas&quot;: 1</span><br><span class="line"> &#125; ,</span><br><span class="line"> &quot;mappings&quot;: &#123;</span><br><span class="line">   &quot;properties&quot;: &#123;</span><br><span class="line">     &quot;name&quot;:&#123;&quot;type&quot;: &quot;text&quot;&#125;,</span><br><span class="line">     &quot;age&quot;:&#123;&quot;type&quot;: &quot;integer&quot;&#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#10.添加数据</span><br><span class="line">POST &#x2F;employee&#x2F;_create&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;我是打工人&quot;,</span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#11.不带条件查询所有记录</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#12.分页查询</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="索引复杂语句"><a href="#索引复杂语句" class="headerlink" title="索引复杂语句"></a>索引复杂语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#13.带关键字条件的查询</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#14.带排序</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#15.带filter </span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;&quot;term&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &quot;30&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#16.带聚合</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_age&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>match和term区别：<a href="https://www.cnblogs.com/yjf512/p/4897294.html" target="_blank" rel="noopener">https://www.cnblogs.com/yjf512/p/4897294.html</a></p>
<p>match 分词查询<br>term 整体查询</p>
</blockquote>
<h1 id="ElasticSearch高级语法及应用"><a href="#ElasticSearch高级语法及应用" class="headerlink" title="ElasticSearch高级语法及应用"></a>ElasticSearch高级语法及应用</h1><p>更着重于分词相关的操作</p>
<h2 id="analyze分析过程"><a href="#analyze分析过程" class="headerlink" title="analyze分析过程"></a>analyze分析过程</h2><p><code>analyse分析=分词的过程：字符过滤器--&gt;字符处理--&gt;分词过滤（分词转换，词干转化）</code></p>
<ul>
<li>字符过滤：使用字符过滤器转变字符。</li>
<li>文本切分为分词：将文本（档）分为单个或多个分词。</li>
<li>分词过滤：使用分词过滤器转变每个分词。</li>
<li>分词索引：最终将分词存储在Lucene倒排索引中。</li>
</ul>
<p><img src="/images/2020120405.png" alt="20190824003615611858"></p>
<p>利用analyze api搜索</p>
<p>先建立索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Eating an apple a day &amp; keeps the doctor away&quot;, </span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;&quot;name&quot;:&quot;eat&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>没搜到后使用analyze api查看分析处理结果，可以看到没有分出eat，所以搜不到，改成用english分词器做索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;field&quot;:&quot;name&quot;,</span><br><span class="line"> &quot;text&quot;:&quot;Eating an apple a day &amp; keeps the doctor away&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重新创建索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;employee</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">   &quot;number_of_shards&quot; : 1,</span><br><span class="line">   &quot;number_of_replicas&quot; : 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot; : &#123;</span><br><span class="line">    &quot;properties&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &#123; </span><br><span class="line">        &quot;type&quot; : &quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">        &quot;age&quot; : &#123;&quot;type&quot;:&quot;integer&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在用<code>analyze api</code>，可以看到eat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;field&quot;:&quot;name&quot;,</span><br><span class="line"> &quot;text&quot;:&quot;Eating an apple a day &amp; keeps the doctor away&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关性查询手段"><a href="#相关性查询手段" class="headerlink" title="相关性查询手段"></a>相关性查询手段</h2><p>类型：</p>
<blockquote>
<p><a href="https://blog.csdn.net/chengyuqiang/article/details/79048800" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/79048800</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>搜索引擎</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch搜索优化</title>
    <url>/2020/12/09/ElasticSearch%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>ElasticSearch搜索优化主要通过三个方面：</p>
<ol>
<li>定制化分词器</li>
<li>同义词扩展</li>
<li>相关性重塑</li>
</ol>
<a id="more"></a>

<h1 id="定制化分词器"><a href="#定制化分词器" class="headerlink" title="定制化分词器"></a>定制化分词器</h1><p>对于中文分词器，我们一般使用的是<code>elasticsearch-analysis-ik</code>，当然也可以在现成的分词器上加一些定制化的改造，让分词器更加“智能”。</p>
<h2 id="1-创建dic文件"><a href="#1-创建dic文件" class="headerlink" title="1.创建dic文件"></a>1.创建dic文件</h2><p>在es的node1节点创建<code>myword.dic</code>文件</p>
<p>然后将文件复制到其余的两个节点</p>
<h2 id="2-修改es配置文件"><a href="#2-修改es配置文件" class="headerlink" title="2.修改es配置文件"></a>2.修改es配置文件</h2><p><code>IKAnalyzer.cfg.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;properties.dtd&quot;&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;comment&gt;IK Analyzer 扩展配置&lt;&#x2F;comment&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">	&lt;entry key&#x3D;&quot;ext_dict&quot;&gt;myword.dic&lt;&#x2F;entry&gt;</span><br><span class="line">	 &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">	&lt;entry key&#x3D;&quot;ext_stopwords&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">	&lt;!-- &lt;entry key&#x3D;&quot;remote_ext_dict&quot;&gt;words_location&lt;&#x2F;entry&gt; --&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">	&lt;!-- &lt;entry key&#x3D;&quot;remote_ext_stopwords&quot;&gt;words_location&lt;&#x2F;entry&gt; --&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>将文件复制到其余的两个节点</p>
<h2 id="3-热更新词库"><a href="#3-热更新词库" class="headerlink" title="3.热更新词库"></a>3.热更新词库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>http://yoursite.com/getCustomDic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Http请求需要返回两个头部，last-modified和etag</p>
<p>两者任何一个发生变化会重新更新，ik一分钟检测一次</p>
</blockquote>
<h1 id="同义词扩展"><a href="#同义词扩展" class="headerlink" title="同义词扩展"></a>同义词扩展</h1><p>同义词：</p>
<blockquote>
<p>语义相近或相同</p>
<p>品牌类目关联</p>
<p>搜索它等于搜索它</p>
</blockquote>
<h2 id="1-创建同义词文件"><a href="#1-创建同义词文件" class="headerlink" title="1.创建同义词文件"></a>1.创建同义词文件</h2><p>在集群的各节点上的该路径<code>elasticsearch\elasticsearch-node3\config\analysis-ik</code>加上同义词文件</p>
<p><img src="/images/2020120901.png" alt="image-20201209164003792"></p>
<h2 id="2-建立es索引"><a href="#2-建立es索引" class="headerlink" title="2.建立es索引"></a>2.建立es索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#加入同义词</span><br><span class="line">PUT &#x2F;myshop</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;my_synonym_filter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;synonym&quot;,</span><br><span class="line">          &quot;synonyms_path&quot;:&quot;analysis-ik&#x2F;my_synonyms.txt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;analyzer&quot;:&#123;</span><br><span class="line">        &quot;ik_syno&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;:&quot;ik_smart&quot;,</span><br><span class="line">          &quot;filter&quot;:[&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ik_syno_max&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;:&quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;:[&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_syno_max&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_syno&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tags&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;whitespace&quot;,&quot;fielddata&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;remark_score&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price_per_man&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category_id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category_name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_remark_score&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_disabled_flag&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-同步数据"><a href="#3-同步数据" class="headerlink" title="3.同步数据"></a>3.同步数据</h2><p>通过logstash将数据同步到es中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logstash -f mysql&#x2F;jdbc.conf</span><br></pre></td></tr></table></figure>



<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>分词测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;shop&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;name&quot;</span><br><span class="line">  , &quot;text&quot;: &quot;xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>索引测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;shop&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="相关性重塑"><a href="#相关性重塑" class="headerlink" title="相关性重塑"></a>相关性重塑</h1><blockquote>
<p>什么是相关性：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html</a></p>
</blockquote>
<p>相关性搜索</p>
<p>让搜索引擎理解语义</p>
<p>影响召回及排序</p>
<h2 id="重新构建es索引"><a href="#重新构建es索引" class="headerlink" title="重新构建es索引"></a>重新构建es索引</h2><p>采取词性影响召回策略模型 通过category_id</p>
<h2 id="引入Java代码："><a href="#引入Java代码：" class="headerlink" title="引入Java代码："></a>引入Java代码：</h2><p>构造分类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getCategoryIdByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer key : categoryWorkMap.keySet()) &#123;</span><br><span class="line">        List&lt;String&gt; tokenList = categoryWorkMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (tokenList.contains(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, List&lt;String&gt;&gt; categoryWorkMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    categoryWorkMap.put(<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    categoryWorkMap.put(<span class="number">2</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    categoryWorkMap.get(<span class="number">1</span>).add(<span class="string">"吃饭"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">1</span>).add(<span class="string">"下午茶"</span>);</span><br><span class="line"></span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"休息"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"睡觉"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"住宿"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构造分词函数识别器时调用<code>getCategoryIdByToken</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造分词函数识别器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">analyzeCategoryKeyword</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/shop/_analyze"</span>);</span><br><span class="line">    request.setJsonEntity(<span class="string">"&#123;"</span> + <span class="string">"  \"field\": \"name\","</span> + <span class="string">"  \"text\":\""</span> + keyword + <span class="string">"\"\n"</span> + <span class="string">"&#125;"</span>);</span><br><span class="line">    Response response = highLevelClient.getLowLevelClient().performRequest(request);</span><br><span class="line">    String responseStr = EntityUtils.toString(response.getEntity());</span><br><span class="line">    JSONObject jsonObject = JSONObject.parseObject(responseStr);</span><br><span class="line">    JSONArray jsonArray = jsonObject.getJSONArray(<span class="string">"tokens"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonArray.size(); i++) &#123;</span><br><span class="line">        String token = jsonArray.getJSONObject(i).getString(<span class="string">"token"</span>);</span><br><span class="line">        Integer categoryId = getCategoryIdByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (categoryId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.put(token, categoryId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>搜索引擎</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch集群搭建</title>
    <url>/2020/10/11/ElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>ElasticSearch诞生于2010年，它采用的是分布式模式，这也印证了它名字中的“elastic”。谈到分布式，当然离不开集群，这里记录一下自己搭建集群的经验。</p>
<a id="more"></a>

<h3 id="一、版本"><a href="#一、版本" class="headerlink" title="一、版本"></a>一、版本</h3><ul>
<li><p>elasticsearch-7.7.1-windows-x86_64</p>
</li>
<li><p>elasticsearch-head-5.0.0</p>
</li>
</ul>
<h3 id="二、搭建"><a href="#二、搭建" class="headerlink" title="二、搭建"></a>二、搭建</h3><p>搭建主要分为三步：解压文件–》修改配置文件–》启动</p>
<h4 id="1-解压文件"><a href="#1-解压文件" class="headerlink" title="1.解压文件"></a>1.解压文件</h4><p>这里我是将文件解压到一个新的文件夹，注意文件路径名不要带有中文名。</p>
<p><img src="/images/2020101101.png" alt="image-20201011112800198"></p>
<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>修改config文件中的elasticsearch.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class="line"><span class="comment">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class="line"><span class="comment">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class="line"><span class="comment"># the most important settings you may want to configure for a production cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consult the documentation for further information on configuration options:</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">XXX</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群之间的通信</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#允许前端做跨域访问</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is ["127.0.0.1", "[::1]"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,"127.0.0.1:9302"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,"127.0.0.1:9302"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the gateway module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br></pre></td></tr></table></figure>

<p>因为是单机搭建集群，这里是做的伪分布式配置，集群的区分主要是通过端口</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#集群名字</span></span><br><span class="line"><span class="string">cluster.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前配置所在机器的节点名</span></span><br><span class="line"><span class="string">node.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址</span></span><br><span class="line"><span class="string">network.host</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置对外服务的http端口</span></span><br><span class="line"><span class="string">http.port</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置节点之间交互的tcp端口，默认是9300。</span></span><br><span class="line"><span class="string">transport.tcp.port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在启动此节点时传递要执行发现的主机的初始列表</span></span><br><span class="line"><span class="string">discovery.seed_hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用初始的一组符合主节点条件的节点引导集群</span></span><br><span class="line"><span class="string">cluster.initial_master_nodes</span></span><br></pre></td></tr></table></figure>

<p>另外两个节点更改一下端口即可</p>
<h4 id="3-启动集群"><a href="#3-启动集群" class="headerlink" title="3.启动集群"></a>3.启动集群</h4><p>node1:</p>
<p><img src="/images/2020101102.png" alt="node1"></p>
<p>node2:</p>
<p><img src="/images/2020101103.png" alt="node2"></p>
<p>node3:</p>
<p><img src="/images/2020101104.png" alt="node3"></p>
<p>总览：</p>
<p><img src="/images/2020101105.png" alt="nodes"></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>搜索引擎</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop运行环境搭建</title>
    <url>/2020/03/27/Hadoop%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Hadoop运行环境搭建</p>
<a id="more"></a>

<h3 id="电脑配置要求："><a href="#电脑配置要求：" class="headerlink" title="电脑配置要求："></a>电脑配置要求：</h3><p>内存：最低8G，最好16G以上<br>硬盘：预留100G，实际上不妨数据大概不会超过20G</p>
<h3 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h3><p>Windows环境：Windows10<br>Linux环境：CentOS-6.10-x86_64-bin-DVD1<br>VMware：15.5.0 build-14665864</p>
<h3 id="所需文件"><a href="#所需文件" class="headerlink" title="所需文件"></a>所需文件</h3><p><strong>链接：</strong> <a href="https://pan.baidu.com/s/1X3Nfv5hBuJl6mGDNNcvnQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1X3Nfv5hBuJl6mGDNNcvnQA</a><br>提取码：dgmt<br><strong>资源失效记得留言</strong></p>
<h3 id="检查是否开启虚拟机"><a href="#检查是否开启虚拟机" class="headerlink" title="检查是否开启虚拟机"></a>检查是否开启虚拟机</h3><p><img src="https://img-blog.csdnimg.cn/2020032710260212.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h3><p>1.选择自定义<br><img src="https://img-blog.csdnimg.cn/20200327103653439.png?x-oss-process=image" alt="在这里插入图片描述"><br>2.下一步<br><img src="https://img-blog.csdnimg.cn/2020032710440027.png?x-oss-process=image" alt="在这里插入图片描述"><br>3.稍后安装操作系统<br><img src="https://img-blog.csdnimg.cn/20200327104418203.png?x-oss-process=image" alt="在这里插入图片描述"><br>4.选择Linux 版本为Centos6 64位<br><img src="https://img-blog.csdnimg.cn/20200327104437670.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.虚拟机命名为Hadoop001<br><img src="https://img-blog.csdnimg.cn/20200327104457220.png?x-oss-process=image" alt="在这里插入图片描述"><br>6.处理机配置，这里配置最好对应下图：<br><img src="https://img-blog.csdnimg.cn/2020032710451572.png?x-oss-process=image" alt="在这里插入图片描述"><br><strong>注意:</strong> 如果电脑配置不足，虚拟机会自动提示，这里根据自己电脑配置调整即可<br><img src="https://img-blog.csdnimg.cn/20200327110559495.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>7.网络类型选择NAT<br><img src="https://img-blog.csdnimg.cn/20200327104532614.png?x-oss-process=image" alt="在这里插入图片描述"><br>8.I/O控制器类型选择LSI Logic<br><img src="https://img-blog.csdnimg.cn/20200327104555764.png?x-oss-process=image" alt="在这里插入图片描述"><br>9.磁盘类型选择SCSI<br><img src="https://img-blog.csdnimg.cn/20200327104618841.png?x-oss-process=image" alt="在这里插入图片描述"><br>10.创建新虚拟磁盘<br><img src="https://img-blog.csdnimg.cn/20200327104635294.png?x-oss-process=image" alt="在这里插入图片描述"><br>11.磁盘大小分配50G，将虚拟磁盘拆分成多个文件<br><img src="https://img-blog.csdnimg.cn/20200327104652738.png?x-oss-process=image" alt="在这里插入图片描述"><br>12.指定磁盘文件<br><img src="https://img-blog.csdnimg.cn/20200327104707478.png?x-oss-process=image" alt="在这里插入图片描述"><br>13.创建完成<br><img src="https://img-blog.csdnimg.cn/2020032710473853.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>14.在虚拟机配置中选择下载好的镜像文件<br><img src="https://img-blog.csdnimg.cn/20200327104750966.png?x-oss-process=image" alt="在这里插入图片描述"><br>15.选择第一个<br> <img src="https://img-blog.csdnimg.cn/20200327105929634.png?x-oss-process=image" alt="在这里插入图片描述"><br>16.选择skip<br><img src="https://img-blog.csdnimg.cn/20200327105959950.png?x-oss-process=image" alt="在这里插入图片描述"><br>17.选择next<br><img src="https://img-blog.csdnimg.cn/20200327110029718.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>18.语言环境选择英文<br><img src="https://img-blog.csdnimg.cn/20200327110101712.png?x-oss-process=image" alt="在这里插入图片描述"><br>19.选择输入法<br><img src="https://img-blog.csdnimg.cn/20200327110230645.png?x-oss-process=image" alt="在这里插入图片描述"><br>20.选择Basic Storage Devices<br><img src="https://img-blog.csdnimg.cn/20200327110259402.png?x-oss-process=image" alt="在这里插入图片描述"><br>21.同意即可<br><img src="https://img-blog.csdnimg.cn/20200327110344102.png?x-oss-process=image" alt="在这里插入图片描述"><br>22.主机命名<br><img src="https://img-blog.csdnimg.cn/20200327110434306.png?x-oss-process=image" alt="在这里插入图片描述"><br>23.配置Configure Network<br><img src="https://img-blog.csdnimg.cn/20200327110518430.png?x-oss-process=image" alt="在这里插入图片描述"><br>24.勾选即可<br><img src="https://img-blog.csdnimg.cn/20200327110749262.png?x-oss-process=image" alt="在这里插入图片描述"><br>25.选择相应的时区<br><img src="https://img-blog.csdnimg.cn/20200327110908993.png?x-oss-process=image" alt="在这里插入图片描述"><br>26.密码设个123456就行了<br><img src="https://img-blog.csdnimg.cn/20200327110937171.png?x-oss-process=image" alt="在这里插入图片描述"><br>27.选择Use All Space<br><img src="https://img-blog.csdnimg.cn/20200327111016724.png?x-oss-process=image0" alt="在这里插入图片描述"><br>28.write changes to disk<br><img src="https://img-blog.csdnimg.cn/20200327111055987.png?x-oss-process=image" alt="在这里插入图片描述"><br>29.选择Basic<br><img src="https://img-blog.csdnimg.cn/20200327111132984.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>30.系统开始初始化<br><img src="https://img-blog.csdnimg.cn/20200327111233395.png?x-oss-process=image" alt="在这里插入图片描述"><br>31.可见系统已经安装成功，reboot重启即可<img src="https://img-blog.csdnimg.cn/20200327111308432.png?x-oss-process=image" alt="在这里插入图片描述"><br>32.进入系统界面<br><img src="https://img-blog.csdnimg.cn/20200327111408414.png?x-oss-process=image" alt="在这里插入图片描述"><br>因为hadoop实验需要3个服务器，另外两个可以使用克隆安装<br>33.选择下一步<img src="https://img-blog.csdnimg.cn/20200327111548739.png?x-oss-process=image" alt="在这里插入图片描述"><br>34.下一步<br><img src="https://img-blog.csdnimg.cn/20200327111614282.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>35.克隆类型选择链接克隆，尽量节省磁盘空间<br><img src="https://img-blog.csdnimg.cn/2020032711163713.png?x-oss-process=image" alt="在这里插入图片描述"><br>36.命名<br><img src="https://img-blog.csdnimg.cn/20200327111730702.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327111810391.png?x-oss-process=image" alt="在这里插入图片描述"><br>37.可以看到安装完成之后的情形<br><img src="https://img-blog.csdnimg.cn/20200327111851452.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327111909745.png" alt="在这里插入图片描述"></p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-配置网卡"><a href="#1-配置网卡" class="headerlink" title="1.配置网卡"></a>1.配置网卡</h4><p><img src="https://img-blog.csdnimg.cn/20200327112637566.png" alt="在这里插入图片描述"><br>输入上面的命令可以查看hadoop01的网络环境：如下图所示<br><img src="https://img-blog.csdnimg.cn/20200327112644781.png" alt="在这里插入图片描述"><br>然后开始修改hadoop02，hadoop03的网络配置<br><img src="https://img-blog.csdnimg.cn/20200327112715134.png?x-oss-process=image" alt="在这里插入图片描述"><br>改动如下图所示：<br>也就是将上面的配置删除，下面的NAME=”eth1” 改成eth0<br><img src="https://img-blog.csdnimg.cn/20200327112733595.png" alt="在这里插入图片描述"><br>hadoop03的操作和hadoop02的一样</p>
<p><strong>注意：</strong> 这里的MAC地址不能一样，如果一样，就需要自动生成一个<br><img src="https://img-blog.csdnimg.cn/20200327113128393.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="2-配置静态ip"><a href="#2-配置静态ip" class="headerlink" title="2.配置静态ip"></a>2.配置静态ip</h4><p>修改hadoop01，02，03的网络配置文件(ifcfg-eth0)<br><img src="https://img-blog.csdnimg.cn/20200327113449436.png" alt="在这里插入图片描述"><br>可以查看配置文件的内容如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200327113458775.png" alt="在这里插入图片描述"><br>将网络配置改为下面的：<br><img src="https://img-blog.csdnimg.cn/20200327113507394.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>验证网络配置：<br><img src="https://img-blog.csdnimg.cn/20200327113527171.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里使用静态IP，ip地址分别是134 135 136<br>hadoop02和hadoop03的操作和hadoop01的一样，重复即可</p>
<h4 id="3-配置虚拟机网络"><a href="#3-配置虚拟机网络" class="headerlink" title="3.配置虚拟机网络"></a>3.配置虚拟机网络</h4><p>首先需要检查是否开启了5个服务<br>在控制面板的服务里面可以看到是否开启<br><img src="https://img-blog.csdnimg.cn/20200327112000348.png" alt="在这里插入图片描述"><br>1.编辑-&gt;虚拟网络编辑器<br><img src="https://img-blog.csdnimg.cn/20200327114410335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdTEzNDAzMDgzNTA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.配置网络编辑器<br><img src="https://img-blog.csdnimg.cn/20200327114500515.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200327114550386.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327114917915.png?x-oss-process=image" alt="在这里插入图片描述"><br>NAT设置如图所示：<br><img src="https://img-blog.csdnimg.cn/20200327114628469.png?x-oss-process=image" alt="在这里插入图片描述"><br>DHCP设置如图所示：<br><img src="https://img-blog.csdnimg.cn/2020032711470347.png?x-oss-process=image" alt="在这里插入图片描述"><br>修改VMware network<br><img src="https://img-blog.csdnimg.cn/20200327114710335.png" alt="在这里插入图片描述"><br>将VMnet8的ipv4修改为下图所示<br><img src="https://img-blog.csdnimg.cn/20200327114717792.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="4-主机名映射配置"><a href="#4-主机名映射配置" class="headerlink" title="4.主机名映射配置"></a>4.主机名映射配置</h4><p><img src="https://img-blog.csdnimg.cn/20200327115555637.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115608830.png" alt="在这里插入图片描述"></p>
<h4 id="5-IP映射配置"><a href="#5-IP映射配置" class="headerlink" title="5.IP映射配置"></a>5.IP映射配置</h4><p><img src="https://img-blog.csdnimg.cn/20200327115618260.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115627958.png" alt="在这里插入图片描述"></p>
<h4 id="6-windows的hosts配置"><a href="#6-windows的hosts配置" class="headerlink" title="6.windows的hosts配置"></a>6.windows的hosts配置</h4><p>修改Windows下的hosts文件<br><img src="https://img-blog.csdnimg.cn/20200327115930695.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115937887.png" alt="在这里插入图片描述"></p>
<p><strong>注意：</strong>网络配置完成记得重启网络服务<br><code>service network restart</code>或者重启服务器<code>reboot</code><br>完成以上步骤，网络配置就算完成</p>
<h4 id="7-测试网络配置"><a href="#7-测试网络配置" class="headerlink" title="7.测试网络配置"></a>7.测试网络配置</h4><p>接下来测试网络配置是否完成<br><img src="https://img-blog.csdnimg.cn/20200327120013734.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<blockquote>
<p>ifcfg-eth0 配置参数说明<br>1.TYPE：配置文件接口类型。在/etc/sysconfig/network-scripts/目录有多种网络配置文件，有Ethernet 、IPsec等类型，网络接口类型为Ethernet。<br>2.DEVICE：网络接口名称<br>3.BOOTPROTO：系统启动地址协议<br>4.none：不使用启动地址协议<br>5.bootp：BOOTP协议<br>6.dhcp：DHCP动态地址协议<br>7.static：静态地址协议<br>8.ONBOOT：系统启动时是否激活<br>            yes：系统启动时激活该网络接口<br>            no：系统启动时不激活该网络接口<br>9.IPADDR：IP地址<br>10.NETMASK：子网掩码<br>11.GATEWAY：网关地址<br>12.BROADCAST：广播地址<br>13.HWADDR/MACADDR：MAC地址。只需设置其中一个，同时设置时不能相互冲突。<br>14.PEERDNS：是否指定DNS。如果使用DHCP协议，默认为yes</p>
</blockquote>
<h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>输入<code>rpm -qa|grep ssh</code>查看ssh是否安装<br><img src="https://img-blog.csdnimg.cn/20200327121043104.png" alt="在这里插入图片描述"><br>如果没有安装：<code>yum install openssh-server</code></p>
<h3 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h3><p>1.为什么要免密登录<br>Hadoop节点众多，所以一般在主节点启动从节点，这个时候就需要程序自动在主节点登录<br>到从节点中，如果不能免密就每次都要输入密码，非常麻烦<br>2. 免密SSH登录的原理<br>需要先在B节点配置A节点的公钥<br>A节点请求B节点要球登录<br>B节点使用A节点的公钥，加密一段随机文本<br>A节点使用私钥解密，并发回给B节点<br>B节点验证文本是否正确</p>
<p><img src="https://img-blog.csdnimg.cn/20200327121318858.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>这里为了更方便的操作，使用secureCRT文件<br>打开secureCRT文件，new Session创建相应的session连接<br>1.new Session<img src="https://img-blog.csdnimg.cn/20200327122809177.png" alt="在这里插入图片描述"><br>2.下一步<br><img src="https://img-blog.csdnimg.cn/20200327122947738.png?x-oss-process=image" alt="在这里插入图片描述"><br>3.填写相应信息<br><img src="https://img-blog.csdnimg.cn/20200327123020515.png?x-oss-process=image" alt="在这里插入图片描述"><br>4.SFTP协议<img src="https://img-blog.csdnimg.cn/20200327123105814.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.命名<br><img src="https://img-blog.csdnimg.cn/2020032712314534.png?x-oss-process=image" alt="在这里插入图片描述"><br>最后效果：<br> <img src="https://img-blog.csdnimg.cn/20200327123215433.png" alt="在这里插入图片描述"><br> 配置完成之后虚拟机就可以后台运行了<br><img src="https://img-blog.csdnimg.cn/20200327124339234.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里为了软件的美观，可以进行相应的设置<br>这里推荐一个配色方案：<br><a href="https://blog.51cto.com/sandshell/2109176" target="_blank" rel="noopener">SecureCRT优化调整、永久设置、保护眼睛和配色方案</a></p>
<h4 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h4><p>1.在三台机器执行以下命令，生成公钥与私钥<br><code>ssh-keygen -t rsa</code><br>一直回车就行了<br><img src="https://img-blog.csdnimg.cn/20200327123828820.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>2.复制<code>ssh-copy-id hadoop01</code><br><img src="https://img-blog.csdnimg.cn/20200327123939763.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327123952454.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327124005151.png?x-oss-process=image" alt="在这里插入图片描述"><br>将第一台机器的公钥拷贝到其他机器<br><code>scp /root/.ssh/authorized_keys hadoop02:/root/.ssh</code><br><code>scp /root/.ssh/authorized_keys hadoop03:/root/.ssh</code><br><img src="https://img-blog.csdnimg.cn/20200327124148240.png" alt="在这里插入图片描述"><br>如果3台机器可以相互访问，说明配置成功<br><img src="https://img-blog.csdnimg.cn/20200327124153657.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="hadoop安装"><a href="#hadoop安装" class="headerlink" title="hadoop安装"></a>hadoop安装</h3><blockquote>
<p>Hadoop集群部署模式 </p>
<ol>
<li>在独立模式下，所有程序都在单个VM上执行，调试Hadoop集群的MapReduce程序也非常方便。一般情况下，该模式常用于学习或开发阶段进行调试程序。</li>
<li>在伪分布式模式下，Hadoop程序的守护进程都运行在一台节点上，该模式主要用于调试Hadoop分布式程序的代码，以及程序执行是否正确。伪分布式模式是完全分布式模式的一个特例。</li>
<li>在完全分布式模式下，Hadoop的守护进程分别运行在由多个主机措建的集群上，不同节点担任不同的角色，在实际工作应用开发中，通常使用该模式构建企业级Hadoop系统。</li>
</ol>
</blockquote>
<blockquote>
<p>从JDK版本7u71以后，JAVA将会在同一时间发布两个版本的JDK，其中： </p>
<ol>
<li>奇数版本为BUG修正并全部通过检验的版本，官方强烈推荐使用这个版本。</li>
<li>偶数版本包含了奇数版本所有的内容，以及未被验证的BUG修复，Oracle官方表示：除非你深受BUG困扰，否则不推荐您使用这个版本。</li>
</ol>
</blockquote>
<p><a href="http://hbase.apache.org/book.html#basic.prerequisites" target="_blank" rel="noopener">http://hbase.apache.org/book.html#basic.prerequisites</a><br><a href="http://hive.apache.org/downloads.html" target="_blank" rel="noopener">http://hive.apache.org/downloads.html</a><br><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>根据官网推荐，使用如下软件配置<br><img src="https://img-blog.csdnimg.cn/202003271247571.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="1-上传文件并创建相应文件"><a href="#1-上传文件并创建相应文件" class="headerlink" title="1.上传文件并创建相应文件"></a>1.上传文件并创建相应文件</h4><p>1.创建文件：在根目录下创建下图文件<br><img src="https://img-blog.csdnimg.cn/2020032712490655.png" alt="在这里插入图片描述"></p>
<p>2.通过命令将文件拖进software文件中<br>安装上传文件命令<code>yum install -y lrzsz</code><br>执行命令rz，上传文件<br>执行命令sz，下载文件<br><img src="https://img-blog.csdnimg.cn/20200327125021970.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h4><p>解压jdk文件到/export/servers/路径下<br><code>tar -zxvf jdk-8u201-linux-x64.tar.gz -C /export/servers/</code><br>将jdk文件移动到jdk路径下<br><code>mv jdk1.8.0_201 jdk</code></p>
<p>4.添加环境变量<br><code>vim /etc/profile</code><br>添加下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;export&#x2F;servers&#x2F;jdk</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure>
<p>添加完成之后记得<code>source /etc/profile</code>使配置生效<br>测试：<br><code>java -version</code><br><img src="https://img-blog.csdnimg.cn/20200327125713207.png" alt="在这里插入图片描述"><br><code>which java</code><br><img src="https://img-blog.csdnimg.cn/20200327125729409.png" alt="在这里插入图片描述"></p>
<h4 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h4><p>1.解压<br><code>tar -zxvf hadoop-2.7.7.tar.gz -C /export/servers/</code><br>2.编写<code>/etc/profile文件</code><br><code>vim /etc/profile</code><br>添加下列命令：<br><img src="https://img-blog.csdnimg.cn/20200327125936586.png" alt="在这里插入图片描述"><br>配置完成之后：<code>source /etc/profile</code><br> <img src="https://img-blog.csdnimg.cn/20200327125950742.png" alt="在这里插入图片描述"><br> 测试：<br> <code>hadoop version</code>查看是否配置完成<img src="https://img-blog.csdnimg.cn/2020032713000287.png" alt="在这里插入图片描述"></p>
<h3 id="hadoop入门案例："><a href="#hadoop入门案例：" class="headerlink" title="hadoop入门案例："></a>hadoop入门案例：</h3><p><img src="https://img-blog.csdnimg.cn/20200327130134643.png" alt="在这里插入图片描述"><br>1.进入hadoop-2.7.7下面<br>2.创建一个input文件夹<br>3.将Hadoop的xml配置文件复制到input<br>xml配置文件是etc/hadoop/*.xml’</p>
<p>4.执行share目录下的MapReduce程序<br><code>hadoop jar hadoop-mapreduce-examples-2.7.2.jar grep input output &#39;dfs[a-z.]+&#39;</code><br><img src="https://img-blog.csdnimg.cn/20200327130119673.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.在<strong>hadoop-2.7.7路径下</strong>查看输出结果<br><code>cat output/*</code></p>
<p><strong>注意:</strong> hadoop jar 是命令，hadoop-mapreduce-examples-2.7.7.jar是自己写的mr代码，input 输入文件夹，output 输出文件夹</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop集群搭建</title>
    <url>/2020/03/28/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Hadoop集群搭建之前记得完成hadoop运行环境的搭建</p>
</blockquote>
<a id="more"></a>
<p>hadoop集群搭建：<br><img src="https://img-blog.csdnimg.cn/20200327140632968.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>也就是要修改以下文件<br><img src="https://img-blog.csdnimg.cn/20200327140653262.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>1.使用sublime文件<br>配置方法：<a href="https://blog.csdn.net/liu1340308350/article/details/105139669" target="_blank" rel="noopener">https://blog.csdn.net/liu1340308350/article/details/105139669</a><br>2.直接在secureCRT中配置<br>这里我是使用第一种方法配置的</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Hadoop-specific environment variables here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The only required environment variable is JAVA_HOME.  All others are</span></span><br><span class="line"><span class="comment"># optional.  When running a distributed configuration it is best to</span></span><br><span class="line"><span class="comment"># set JAVA_HOME in this file, so that it is correctly defined on</span></span><br><span class="line"><span class="comment"># remote nodes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The java implementation to use.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/<span class="built_in">export</span>/servers/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># The jsvc implementation to use. Jsvc is required to run secure datanodes</span></span><br><span class="line"><span class="comment"># that bind to privileged ports to provide authentication of data transfer</span></span><br><span class="line"><span class="comment"># protocol.  Jsvc is not required if SASL is configured for authentication of</span></span><br><span class="line"><span class="comment"># data transfer protocol using non-privileged ports.</span></span><br><span class="line"><span class="comment">#export JSVC_HOME=$&#123;JSVC_HOME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$&#123;HADOOP_CONF_DIR:-"/etc/hadoop"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra Java CLASSPATH elements.  Automatically insert capacity-scheduler.</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$HADOOP_HOME</span>/contrib/capacity-scheduler/*.jar; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$HADOOP_CLASSPATH</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$HADOOP_CLASSPATH</span>:<span class="variable">$f</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$f</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum amount of heap to use, in MB. Default is 1000.</span></span><br><span class="line"><span class="comment">#export HADOOP_HEAPSIZE=</span></span><br><span class="line"><span class="comment">#export HADOOP_NAMENODE_INIT_HEAPSIZE=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra Java runtime options.  Empty by default.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"<span class="variable">$HADOOP_OPTS</span> -Djava.net.preferIPv4Stack=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command specific options appended to HADOOP_OPTS when specified</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_NAMENODE_OPTS=<span class="string">"-Dhadoop.security.logger=<span class="variable">$&#123;HADOOP_SECURITY_LOGGER:-INFO,RFAS&#125;</span> -Dhdfs.audit.logger=<span class="variable">$&#123;HDFS_AUDIT_LOGGER:-INFO,NullAppender&#125;</span> <span class="variable">$HADOOP_NAMENODE_OPTS</span>"</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_DATANODE_OPTS=<span class="string">"-Dhadoop.security.logger=ERROR,RFAS <span class="variable">$HADOOP_DATANODE_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECONDARYNAMENODE_OPTS=<span class="string">"-Dhadoop.security.logger=<span class="variable">$&#123;HADOOP_SECURITY_LOGGER:-INFO,RFAS&#125;</span> -Dhdfs.audit.logger=<span class="variable">$&#123;HDFS_AUDIT_LOGGER:-INFO,NullAppender&#125;</span> <span class="variable">$HADOOP_SECONDARYNAMENODE_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_NFS3_OPTS=<span class="string">"<span class="variable">$HADOOP_NFS3_OPTS</span>"</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_PORTMAP_OPTS=<span class="string">"-Xmx512m <span class="variable">$HADOOP_PORTMAP_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following applies to multiple commands (fs, dfs, fsck, distcp etc)</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_CLIENT_OPTS=<span class="string">"-Xmx512m <span class="variable">$HADOOP_CLIENT_OPTS</span>"</span></span><br><span class="line"><span class="comment">#HADOOP_JAVA_PLATFORM_OPTS="-XX:-UsePerfData $HADOOP_JAVA_PLATFORM_OPTS"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On secure datanodes, user to run the datanode as after dropping privileges.</span></span><br><span class="line"><span class="comment"># This **MUST** be uncommented to enable secure HDFS if using privileged ports</span></span><br><span class="line"><span class="comment"># to provide authentication of data transfer protocol.  This **MUST NOT** be</span></span><br><span class="line"><span class="comment"># defined if SASL is configured for authentication of data transfer protocol</span></span><br><span class="line"><span class="comment"># using non-privileged ports.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_USER=<span class="variable">$&#123;HADOOP_SECURE_DN_USER&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where log files are stored.  $HADOOP_HOME/logs by default.</span></span><br><span class="line"><span class="comment">#export HADOOP_LOG_DIR=$&#123;HADOOP_LOG_DIR&#125;/$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where log files are stored in the secure data environment.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_LOG_DIR=<span class="variable">$&#123;HADOOP_LOG_DIR&#125;</span>/<span class="variable">$&#123;HADOOP_HDFS_USER&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># HDFS Mover specific parameters</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># Specify the JVM options to be used when starting the HDFS Mover.</span></span><br><span class="line"><span class="comment"># These options will be appended to the options specified as HADOOP_OPTS</span></span><br><span class="line"><span class="comment"># and therefore may override any similar flags set in HADOOP_OPTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># export HADOOP_MOVER_OPTS=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># Advanced Users Only!</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The directory where pid files are stored. /tmp by default.</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this should be set to a directory that can only be written to by </span></span><br><span class="line"><span class="comment">#       the user that will run the hadoop daemons.  Otherwise there is the</span></span><br><span class="line"><span class="comment">#       potential for a symlink attack.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_PID_DIR=<span class="variable">$&#123;HADOOP_PID_DIR&#125;</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_PID_DIR=<span class="variable">$&#123;HADOOP_PID_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A string representing this instance of hadoop. $USER by default.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_IDENT_STRING=<span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p>也就是修改JDK路径<br><img src="https://img-blog.csdnimg.cn/20200327142029116.png" alt="在这里插入图片描述"><br><strong>注意：</strong> JAVA_HOME的路径按照你自己的路径来</p>
<h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		  &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">       &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/<span class="built_in">export</span>/servers/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">     &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">		 &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop02:50090&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>fs.defaultFS表示我们对HDFS的访问路径<br>dfs.replication指定副本数量，也就是一个文件存几遍<br>dfs.namenode.secondary.http-address表示2nn的访问路径</p>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><p>系统里面没有mapred-site.xml文件，则需要复制一个<br><code>cp mapred-site.xml.template mapred-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- 指定MR运行在Yarn上 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt; </span><br><span class="line">  &lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop01:10020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!-- 历史服务器web端地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop01:19888&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- Reducer获取数据的方式 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 日志保留时间设置7天 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;	</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br></pre></td></tr></table></figure>
<h4 id="上传配置"><a href="#上传配置" class="headerlink" title="上传配置"></a>上传配置</h4><p>将以上修改的文件上传到服务器中：<br><strong>右键–&gt;SFTP/FTP–&gt;Upload File</strong><br>对应下图文件：<br>注意：只要是修改过的文件都需要Upload<br><img src="https://img-blog.csdnimg.cn/20200327142853963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdTEzNDAzMDgzNTA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="配置文件分发"><a href="#配置文件分发" class="headerlink" title="配置文件分发"></a>配置文件分发</h3><p>让hadoop02、03和01保持一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line">scp -r /<span class="built_in">export</span>/ hadoop02:/</span><br><span class="line">scp -r /<span class="built_in">export</span>/ hadoop03:/</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200327143347362.png?x-oss-process=image" alt="在这里插入图片描述"><br>scp /etc/profile hadoop02:/etc/profile这句是发环境变量<br>scp -r /export/ hadoop02:/这句是发hadoop整个文件夹</p>
<p><strong>注意：</strong> 命令执行完之后在hadoop02和hadoop03上执行<code>source /etc/profile</code></p>
<p>配置完以上的文件，那么集群基本配置就已经完成</p>
<h3 id="执行格式化"><a href="#执行格式化" class="headerlink" title="执行格式化"></a>执行格式化</h3><p>在hadoop01中执行下列命令<br><code>hdfs namenode -format</code><br><img src="https://img-blog.csdnimg.cn/20200327143553474.png?x-oss-process=image" alt="在这里插入图片描述"><br>在上图看到下图内容则说明文件配置成功<br><img src="https://img-blog.csdnimg.cn/20200327143544630.png" alt="在这里插入图片描述"></p>
<h3 id="查看hadoop信息"><a href="#查看hadoop信息" class="headerlink" title="查看hadoop信息"></a>查看hadoop信息</h3><p><img src="https://img-blog.csdnimg.cn/20200327143748685.png" alt="在这里插入图片描述"><br><strong>注意：</strong> 第一次进入没有data文件，需要启动namenode<br><img src="https://img-blog.csdnimg.cn/20200327143802429.png" alt="在这里插入图片描述"><br>下图是hadoop文件的树形结构：<br><img src="https://img-blog.csdnimg.cn/202003271451261.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327145141354.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327145153230.png?x-oss-process=image" alt="在这里插入图片描述"><br><strong>注意：</strong><br>如果想让文件显示树形结构，需要安装tree文件：<code>yum -y install tree</code><br><img src="https://img-blog.csdnimg.cn/20200327143812869.png" alt="在这里插入图片描述"><br>查看版本信息：clusterID必须保持一致<br><img src="https://img-blog.csdnimg.cn/2020032714382229.png" alt="在这里插入图片描述"><br><strong>注意：</strong><br>1.如果后面出现集群找不到数据的情况，那就是因为NameNode和DataNode的集群id不一致<br>2.格式化NameNode，会产生新的集群id</p>
<h3 id="启动HDFS和YARN"><a href="#启动HDFS和YARN" class="headerlink" title="启动HDFS和YARN"></a>启动HDFS和YARN</h3><p><img src="https://img-blog.csdnimg.cn/20200327145625866.png" alt="在这里插入图片描述"></p>
<p>hadoop01:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start resourcemanager</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<p>hadoop02:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br><span class="line">在节点hadoop02执行指令启动SecondaryNameNode进程</span><br><span class="line">hadoop-daemon.sh start secondarynamenode</span><br></pre></td></tr></table></figure>

<p>hadoop03:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<h4 id="脚本一键启动"><a href="#脚本一键启动" class="headerlink" title="脚本一键启动"></a>脚本一键启动</h4><p>在主节点hadoop01上执行指令<code>start-dfs.sh</code>或<code>stop-dfs.sh</code>启动/关闭所有HDFS服务进程<br>在主节点hadoop01上执行指令<code>start-yarn.sh</code>或<code>stop-yarn.sh</code>启动/关闭所有YARN服务进程；<br>在主节点hadoop01上执行<code>start-all.sh</code>或<code>stop-all.sh</code>指令，直接启动/关闭整个Hadoop集群服务。</p>
<h4 id="查看是否启动"><a href="#查看是否启动" class="headerlink" title="查看是否启动"></a>查看是否启动</h4><p>hadoop01，02，03的情况如下图所示：<br>hadoop01:<br><img src="https://img-blog.csdnimg.cn/20200327150056763.png" alt="在这里插入图片描述"><br>hadoop02:<br><img src="https://img-blog.csdnimg.cn/20200327150104128.png" alt="在这里插入图片描述"><br>hadoop03:<br><img src="https://img-blog.csdnimg.cn/20200327150110367.png" alt="在这里插入图片描述"></p>
<h4 id="配置jps快捷键"><a href="#配置jps快捷键" class="headerlink" title="配置jps快捷键"></a>配置jps快捷键</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建文件夹 /root/bin</span><br><span class="line">touch jpsall</span><br><span class="line">vim jpsall</span><br><span class="line">chmod 777 jpsall</span><br></pre></td></tr></table></figure>
<p>jpsall文件内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hadoop01 hadoop02 hadoop03</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo ===================== <span class="variable">$i</span> ======================</span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">"source /etc/profile &amp;&amp; jps | grep -v Jps"</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>配置完成就不再需要单独运行jps了<br><strong>测试：</strong><br><img src="https://img-blog.csdnimg.cn/20200327151641623.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="游览器访问"><a href="#游览器访问" class="headerlink" title="游览器访问"></a>游览器访问</h4><p>Hadoop集群正常启动后，它默认开放了两个端口50070和8088 ，需要关闭防火墙才能访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> hadoop02和hadoop03的防火墙也需要关闭<br>关闭防火墙之后，在游览器中输入下列网址即可访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://hadoop01:50070/</span><br><span class="line">http://hadoop01:8088</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200327150457137.png?x-oss-process=image" alt="在这里插入图片描述"><br>检查3个datanode是否显示：<br><img src="https://img-blog.csdnimg.cn/20200327150537481.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327150555548.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>执行命令报错：<br><code>export HADOOP_ROOT_LOGGER=DEBUG,console
hdfs dfs -ls /</code><br><img src="https://img-blog.csdnimg.cn/20200327151905501.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327151915561.png" alt="在这里插入图片描述"><br>查阅debug报错信息，可以看到问题是glib版本不够</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-下载对应文件"><a href="#1-下载对应文件" class="headerlink" title="1.下载对应文件"></a>1.下载对应文件</h5><p>下载glibc-2.14.tar.bz2<br>地址为：<a href="http://ftp.ntu.edu.tw/gnu/glibc/" target="_blank" rel="noopener">http://ftp.ntu.edu.tw/gnu/glibc/</a><br>下载glibc-linuxthreads-2.5.tar.bz2<br>地址为：<a href="http://ftp.ntu.edu.tw/gnu/glibc/" target="_blank" rel="noopener">http://ftp.ntu.edu.tw/gnu/glibc/</a></p>
<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">tar -xjvf glibc-2.14.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> glibc-2.14</span><br><span class="line">tar -xjvf ../glibc-linuxthreads-2.5.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">glibc-2.14/configure --prefix=/usr --<span class="built_in">disable</span>-profile --<span class="built_in">enable</span>-add-ons -</span><br><span class="line">-with-headers=/usr/include --with-binutils=/usr/bin --<span class="built_in">disable</span>-sanitychecks</span><br><span class="line">make//编译，执行很久(5-10分钟)，可能出错，出错再重新执行</span><br><span class="line">make install</span><br><span class="line">ll /lib64/libc.so.6</span><br></pre></td></tr></table></figure>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="https://img-blog.csdnimg.cn/2020032715242188.png" alt="在这里插入图片描述"></p>
<h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p><img src="https://img-blog.csdnimg.cn/20200327152654363.png" alt="在这里插入图片描述"><br>可知集群已经上hdfs了：<br><img src="https://img-blog.csdnimg.cn/20200327152702853.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327152719538.png" alt="在这里插入图片描述"></p>
<p>由下图可知集群测试成功：<br>看到3个备份，集群数据统一<br><img src="https://img-blog.csdnimg.cn/20200327152854544.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.7.7.jar wordcount /wordcount/input /wordcount/output</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> output文件不能存在<br><img src="https://img-blog.csdnimg.cn/20200327153113296.png?x-oss-process=image" alt="在这里插入图片描述"><br>到这一步为止，表示集群运行正常</p>
<h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><p><img src="https://img-blog.csdnimg.cn/20200327154728635.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327154806819.png" alt="在这里插入图片描述"><br>可以看到无法访问页面：</p>
<p><img src="https://img-blog.csdnimg.cn/20200327154856858.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里就需要继续编辑vim mapred-site.xml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 历史服务器端地址 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; </span><br><span class="line">&lt;value&gt;hadoop01:10020&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;!-- 历史服务器web端地址 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; </span><br><span class="line">    &lt;value&gt;hadoop01:19888&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>启动历史服务器<br><code>mr-jobhistory-daemon.sh start historyserver</code></p>
<p>可以看到下图显示：<br><img src="https://img-blog.csdnimg.cn/2020032715502952.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="日志聚集"><a href="#日志聚集" class="headerlink" title="日志聚集"></a>日志聚集</h3><p><strong>目的：</strong> 应用运行完成以后，将程序运行日志信息上传到HDFS系统上。</p>
<p>这里需要配置yarn-site.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 日志聚集功能使能 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; </span><br><span class="line">&lt;value&gt;<span class="literal">true</span>&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;!-- 日志保留时间设置7天 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt; </span><br><span class="line">&lt;value&gt;604800&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>1.重启NodeManager 、ResourceManager和HistoryServer<br>2..删除HDFS上已经存在的输出文件<br><code>hdfs dfs -rm -R /wordcount/output</code><br>3.执行WordCount程序<br>4.查看日志聚集<br>点击log文件<br><img src="https://img-blog.csdnimg.cn/20200327155302493.png" alt="在这里插入图片描述"><br>可以看到：<br><img src="https://img-blog.csdnimg.cn/20200327155318637.png?x-oss-process=image" alt="在这里插入图片描述"><br>那么现在开始，每个任务都开起了实时日志收集功能，日志保存7天，全部可以在cluster中查看了</p>
<h3 id="集群时间同步"><a href="#集群时间同步" class="headerlink" title="集群时间同步"></a>集群时间同步</h3><p>这里以hadoop01作为基准时间，02、03跟他一致</p>
<h4 id="1-查看是否有ntp文件，系统默认安装"><a href="#1-查看是否有ntp文件，系统默认安装" class="headerlink" title="1.查看是否有ntp文件，系统默认安装"></a>1.查看是否有ntp文件，系统默认安装</h4><p><code>rpm -qa|grep ntp</code><br><img src="https://img-blog.csdnimg.cn/20200327160254904.png" alt="在这里插入图片描述"></p>
<h4 id="2-vim-etc-ntp-conf"><a href="#2-vim-etc-ntp-conf" class="headerlink" title="2.vim /etc/ntp.conf"></a>2.vim /etc/ntp.conf</h4><p><img src="https://img-blog.csdnimg.cn/2020032716040257.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327160414790.png?x-oss-process=image" alt="在这里插入图片描述"><br>修改点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、授权192.168.1.0-192.168.1.255网段上的所有机器可以从这台机器上查询和同步时间</span><br><span class="line">将  <span class="comment">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap为</span></span><br><span class="line">restrict 192.168.200.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line">2、集群在局域网中，不使用其他互联网上的时间</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">为</span><br><span class="line"></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">3、当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步</span><br><span class="line">server 127.127.1.0</span><br><span class="line"></span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure>
<h4 id="3-vim-etc-sysconfig-ntpd"><a href="#3-vim-etc-sysconfig-ntpd" class="headerlink" title="3.vim /etc/sysconfig/ntpd"></a>3.vim /etc/sysconfig/ntpd</h4><p>让硬件时间与系统时间一起同步<code>SYNC_HWCLOCK=yes</code><br><img src="https://img-blog.csdnimg.cn/20200327160618712.png" alt="在这里插入图片描述"><br>配置文件保存之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">重新启动ntpd服务</span><br><span class="line">service ntpd status</span><br><span class="line"></span><br><span class="line">设置ntpd服务开机启动</span><br><span class="line">chkconfig ntpd on</span><br></pre></td></tr></table></figure>

<h4 id="4-在hadoop2和hadoop3上配置"><a href="#4-在hadoop2和hadoop3上配置" class="headerlink" title="4.在hadoop2和hadoop3上配置"></a>4.在hadoop2和hadoop3上配置</h4><p><code>crontab -e</code> </p>
<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * /usr/sbin/ntpdate hadoop01</span><br></pre></td></tr></table></figure>
<p>这样会让hadoop02和hadoop03每10分钟与时间服务器同步一次</p>
<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>修改hadoop02的当前时间：<br><img src="https://img-blog.csdnimg.cn/20200327160931558.png" alt="在这里插入图片描述"><br>然后输入<code>mail</code>,系统会提示时间已经修改<br><img src="https://img-blog.csdnimg.cn/20200327161036874.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327161056816.png?x-oss-process=image" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop集群</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA配置与常用快捷键</title>
    <url>/2021/01/20/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-IDEA配置"><a href="#1-IDEA配置" class="headerlink" title="1 IDEA配置"></a>1 IDEA配置</h1><p>1.1 整合maven</p>
<p>1.2 JDK配置</p>
<p>1.3 编码设置为UTF8</p>
<h2 id="1-4-启动时不自动打开上一次的项目"><a href="#1-4-启动时不自动打开上一次的项目" class="headerlink" title="1.4 启动时不自动打开上一次的项目"></a>1.4 启动时不自动打开上一次的项目</h2><p>取消勾选</p>
<p><img src="/images/2021012001.png" alt="image"></p>
<h1 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2 常用快捷键"></a>2 常用快捷键</h1><p><strong>快捷键技巧：</strong></p>
<p>对于Windows：HotKey Explorer，HotKey Commander，快捷键说明</p>
<p>对于macOS：CheatSheet</p>
<p><strong>查看快捷键文档：</strong></p>
<p>Helper–》Keymap Preference</p>
<h2 id="2-1-代码格式化"><a href="#2-1-代码格式化" class="headerlink" title="2.1 代码格式化"></a>2.1 代码格式化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">去掉空白： Ctrl + Shift + J</span><br><span class="line">格式化代码： Ctrl + Alt + L</span><br></pre></td></tr></table></figure>



<h1 id="3-常用插件"><a href="#3-常用插件" class="headerlink" title="3 常用插件"></a>3 常用插件</h1><table>
<thead>
<tr>
<th>Plugins</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Maven Helper</td>
<td>检测maven依赖冲突的问题</td>
</tr>
<tr>
<td>Lombok</td>
<td>让代码更简洁</td>
</tr>
<tr>
<td>CodeGlance</td>
<td>代码缩放图</td>
</tr>
<tr>
<td>Alibaba Java Coding</td>
<td>扫描Java代码潜在的代码隐患，提升代码质量</td>
</tr>
<tr>
<td>Save Actions</td>
<td>保存自动格式化</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>集成开发环境</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7上安装docker</title>
    <url>/2019/12/17/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>Docker分为社区版CE和企业版EE。CE版完全足够个人使用，选择stable版本即可。</p>
<a id="more"></a>

<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p>1.Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>
<p>通过 <strong>uname -r</strong> 命令查看你当前的内核版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uname -r</span><br></pre></td></tr></table></figure>

<p><img src="/images/2019121701.png" alt="image-20201217213427007"></p>
<p>2.使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum update</span><br></pre></td></tr></table></figure>

<p>3.卸载旧版本(如果安装过旧版本的话)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<p>4.安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>5.设置yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="/images/2019121702.png" alt="image-20201217213649924"></p>
<p>6.可以查看所有仓库中所有docker版本，并选择特定版本安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<p>7.安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版</span><br><span class="line"># sudo yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce</span><br></pre></td></tr></table></figure>

<p>8.启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>9.设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>10.验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker version</span><br></pre></td></tr></table></figure>



<h2 id="2-配置镜像加速"><a href="#2-配置镜像加速" class="headerlink" title="2 配置镜像加速"></a>2 配置镜像加速</h2><blockquote>
<p>阿里云界面：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
</blockquote>
<p>Docker客户端版本需要大于 1.10.0 </p>
<p>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;26udi78a.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>





<h2 id="3-问题"><a href="#3-问题" class="headerlink" title="3 问题"></a>3 问题</h2><p>1.因为之前已经安装过旧版本的docker，在安装的时候报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transaction check error:</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure>

<p>2.卸载旧版本的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure>

<p>3.再次安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install docker-ce</span><br></pre></td></tr></table></figure>



<p>2.yum安装的时候遇到公钥尚未安装的问题解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 yum install xxxx 命令之后添加 --nogpgcheck 进行跳过公钥检查安装</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p>导入密钥重新安装Docker</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rpm --<span class="keyword">import</span> http:<span class="comment">//mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>分布式/微服务</category>
        <category>虚拟化/容器化</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流详解</title>
    <url>/2020/12/27/Java-IO%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>Java之美[从菜鸟到高手演变]之Java中的IO:<a href="https://blog.csdn.net/zhangerqing/article/details/8466532" target="_blank" rel="noopener">https://blog.csdn.net/zhangerqing/article/details/8466532</a></p>
<p>Java IO流学习总结一：输入输出流:<a href="https://blog.csdn.net/zhaoyanjun6/article/details/54292148" target="_blank" rel="noopener">https://blog.csdn.net/zhaoyanjun6/article/details/54292148</a></p>
<p>史上最骚最全最详细的IO流教程，没有之一！:<a href="https://www.cnblogs.com/yichunguo/p/11775270.html" target="_blank" rel="noopener">https://www.cnblogs.com/yichunguo/p/11775270.html</a></p>
<p>Java IO:<a href="http://www.cyc2018.xyz/Java/Java%20IO.html#%E4%B8%80%E3%80%81%E6%A6%82%E8%A7%88" target="_blank" rel="noopener">http://www.cyc2018.xyz/Java/Java%20IO.html#%E4%B8%80%E3%80%81%E6%A6%82%E8%A7%88</a></p>
</blockquote>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>Java IO流大概可以分为以下几类：</p>
<ul>
<li>磁盘操作：File类</li>
<li>字节流操作：InputStream，OutputStream</li>
<li>字符流操作：Reader，Writer</li>
<li>对象操作：Serializable</li>
<li>网络操作：socket</li>
<li>新的输入/输出：NIO</li>
</ul>
<h1 id="2-磁盘操作"><a href="#2-磁盘操作" class="headerlink" title="2 磁盘操作"></a>2 磁盘操作</h1><p>File类可以用于获取目录和文件的信息，但他不表示文件的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileMethod</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != files) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file2 : files) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file2.isDirectory()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"文件夹:"</span> + file2.getAbsolutePath());</span><br><span class="line">                        fileMethod(file2.getAbsolutePath());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"文件:"</span> + file2.getAbsolutePath());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从 Java7 开始，可以使用 Paths 和 Files 代替 File。文件的操作更加简便快捷</p>
<blockquote>
<p>Java文件处理：Paths和Files：<a href="https://www.jianshu.com/p/3b3c5dbcfae7" target="_blank" rel="noopener">https://www.jianshu.com/p/3b3c5dbcfae7</a></p>
</blockquote>
<h1 id="3-字节流操作"><a href="#3-字节流操作" class="headerlink" title="3 字节流操作"></a>3 字节流操作</h1><p>实现文件复制</p>
<h1 id="4-对象操作"><a href="#4-对象操作" class="headerlink" title="4 对象操作"></a>4 对象操作</h1><blockquote>
<p>对象的序列化:<a href="https://liuyangjun.blog.csdn.net/article/details/80422143" target="_blank" rel="noopener">https://liuyangjun.blog.csdn.net/article/details/80422143</a></p>
</blockquote>
<h1 id="5-网络操作"><a href="#5-网络操作" class="headerlink" title="5 网络操作"></a>5 网络操作</h1><h1 id="6-新的输入-输出（NIO）"><a href="#6-新的输入-输出（NIO）" class="headerlink" title="6 新的输入/输出（NIO）"></a>6 新的输入/输出（NIO）</h1><blockquote>
<p><a href="https://www.zhihu.com/question/29005375" target="_blank" rel="noopener">https://www.zhihu.com/question/29005375</a></p>
</blockquote>
<p>NIO主要有<strong>三个核心部分组成</strong>：</p>
<ul>
<li><strong>buffer缓冲区</strong></li>
<li><strong>Channel管道</strong></li>
<li><strong>Selector选择器</strong></li>
</ul>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM学习笔记</title>
    <url>/2020/12/20/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-为什么学习JVM"><a href="#1-为什么学习JVM" class="headerlink" title="1 为什么学习JVM"></a>1 为什么学习JVM</h1><p>1.面试需要</p>
<p>2.更深入的理解Java</p>
<ul>
<li>一个类是如何加载到JVM的</li>
<li>它在JVM中是如何存储的</li>
<li>如何运行的</li>
<li>方法是如何调用的</li>
<li>运行时内存怎么分配的</li>
<li>产生垃圾后是如何回收的</li>
</ul>
<p>3.排查解决故障</p>
<ul>
<li>内存溢出导致宕机了</li>
<li>CPU使用率居高不下</li>
<li>频繁卡顿</li>
<li>应用越跑越慢</li>
</ul>
<p>4.性能调优</p>
<ul>
<li>合理的分配内存</li>
<li>调整参数</li>
<li>选择GC垃圾回收器</li>
<li>第三方中间件的适配</li>
</ul>
<h1 id="2-认识JVM规范"><a href="#2-认识JVM规范" class="headerlink" title="2 认识JVM规范"></a>2 认识JVM规范</h1><p><strong>认识JVM</strong>：是什么，有什么，能干什么</p>
<blockquote>
<p>JVM：Java Virtual Machine，也就是Java虚拟机</p>
<p>虚拟机：通过软件模拟的具有完整硬件系统功能的，运行在一个完全隔离环境中的计算机系统<br>JVM是通过软件来模拟Java字节码的指令集，是Java程序的运行环境</p>
</blockquote>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201224105252066.png" alt="image-20201224105252066"></p>
<p><strong>JVM主要功能</strong></p>
<ol>
<li>通过ClassLoader寻找和装载class文件</li>
<li>解释字节码成为指令并执行，提供class文件的运行环境</li>
<li>进行运行期间的内存分配和垃圾回收</li>
<li>提供与硬件交互的平台</li>
</ol>
<p>​    JVM跨平台特征</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201224105219618.png" alt="image-20201224105219618"></p>
<h2 id="JVM规范作用及其核心"><a href="#JVM规范作用及其核心" class="headerlink" title="JVM规范作用及其核心"></a>JVM规范作用及其核心</h2><blockquote>
<p>Java虚拟机规范为不同的硬件平台提供了一种编译Java技术代码的规范</p>
<p>该规范是Java软件独立于平台，因为编译针对作为虚拟机的“一般机器”而做</p>
</blockquote>
<p><strong>JVM规范定义的主要内容</strong>：</p>
<p>可以看官方文档</p>
<ul>
<li>字节码指令集（相当于中央处理器CPU）</li>
<li>Class文件的格式</li>
<li>数据类型和值</li>
<li>运行时数据区</li>
<li>栈帧</li>
<li>特殊方法</li>
<li>类库</li>
<li>异常</li>
<li>虚拟机的启动，加载，链接和初始化</li>
</ul>
<p>虚拟机规范内容很多，了解即可</p>
<h1 id="3-类加载、连接和初始化"><a href="#3-类加载、连接和初始化" class="headerlink" title="3.类加载、连接和初始化"></a>3.类加载、连接和初始化</h1><h1 id="4-内存分配"><a href="#4-内存分配" class="headerlink" title="4 内存分配"></a>4 内存分配</h1><h1 id="5-字节码执行引擎"><a href="#5-字节码执行引擎" class="headerlink" title="5 字节码执行引擎"></a>5 字节码执行引擎</h1><h1 id="6-垃圾回收"><a href="#6-垃圾回收" class="headerlink" title="6 垃圾回收"></a>6 垃圾回收</h1><h1 id="7-高效并发"><a href="#7-高效并发" class="headerlink" title="7  高效并发"></a>7  高效并发</h1><h1 id="8-性能监控与故障处理工具"><a href="#8-性能监控与故障处理工具" class="headerlink" title="8 性能监控与故障处理工具"></a>8 性能监控与故障处理工具</h1><h1 id="9-JVM调优"><a href="#9-JVM调优" class="headerlink" title="9 JVM调优"></a>9 JVM调优</h1>]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内部类详解</title>
    <url>/2021/01/04/Java%E5%86%85%E9%83%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p><a href="https://www.runoob.com/w3cnote/java-inner-class-intro.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/java-inner-class-intro.html</a></p>
<p><a href="https://www.iteye.com/topic/494230#" target="_blank" rel="noopener">https://www.iteye.com/topic/494230#</a></p>
</blockquote>
<h1 id="内部类概述"><a href="#内部类概述" class="headerlink" title="内部类概述"></a>内部类概述</h1><blockquote>
<p>内部类：就是在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</p>
</blockquote>
<p><strong>定义格式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="内部类分类"><a href="#内部类分类" class="headerlink" title="内部类分类"></a>内部类分类</h1><ul>
<li><p>静态内部类：类似于静态变量</p>
</li>
<li><p>实例内部类：类似于实例变量</p>
</li>
<li><p>局部内部类：类似于局部变量</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li><p>使用内部类编写的代码，可读性很差。能不用尽量不用。</p>
</li>
<li><p>匿名内部类是局部内部类的一种</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类在类的内部，所以称为内部类</span></span><br><span class="line"><span class="comment">     * 由于前面有static，称为静态内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类在类的内部，所以称为内部类</span></span><br><span class="line"><span class="comment">     * 没有static称为实例内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 该类在类的内部，所以称为内部类</span></span><br><span class="line"><span class="comment">         * 局部内部类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>类似于静态变量</p>
<h2 id="实例内部类"><a href="#实例内部类" class="headerlink" title="实例内部类"></a>实例内部类</h2><p>成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。</p>
<p>不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部类.this.成员变量</span><br><span class="line">外部类.this.成员方法</span><br></pre></td></tr></table></figure>



<p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">    private double radius &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">    public Circle(double radius) &#123;</span><br><span class="line">        this.radius &#x3D; radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   &#x2F;&#x2F;必须先创建成员内部类的对象，再进行访问</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    private Draw getDrawInstance() &#123;</span><br><span class="line">        return new Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    class Draw &#123;     &#x2F;&#x2F;内部类</span><br><span class="line">        public void drawSahpe() &#123;</span><br><span class="line">            System.out.println(radius);  &#x2F;&#x2F;外部类的private成员</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。创建成员内部类对象的一般方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)  &#123;</span><br><span class="line">        &#x2F;&#x2F;第一种方式：</span><br><span class="line">        Outter outter &#x3D; new Outter();</span><br><span class="line">        Outter.Inner inner &#x3D; outter.new Inner();  &#x2F;&#x2F;必须通过Outter对象来创建</span><br><span class="line">         </span><br><span class="line">        &#x2F;&#x2F;第二种方式：</span><br><span class="line">        Outter.Inner inner1 &#x3D; outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Outter &#123;</span><br><span class="line">    private Inner inner &#x3D; null;</span><br><span class="line">    public Outter() &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public Inner getInnerInstance() &#123;</span><br><span class="line">        if(inner &#x3D;&#x3D; null)</span><br><span class="line">            inner &#x3D; new Inner();</span><br><span class="line">        return inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    class Inner &#123;</span><br><span class="line">        public Inner() &#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类可以拥有 private 访问权限、protected 访问权限、public 访问权限及包访问权限。比如上面的例子，如果成员内部类 Inner 用 private 修饰，则只能在外部类的内部访问，如果用 public 修饰，则任何地方都能访问；如果用 protected 修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被 public 和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p>
<p>类似于实例变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Outer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Outer o &#x3D; new Outer();</span><br><span class="line">        Outer.MyMath myMath &#x3D; o.new MyMath();</span><br><span class="line">        myMath.mysum(new Compute() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int sum(int x, int y) &#123;</span><br><span class="line">                return x+y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 10, 20);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class MyMath&#123;</span><br><span class="line">        public void mysum(Compute c,int x ,int y)&#123;</span><br><span class="line">            int value &#x3D; c.sum(x,y);</span><br><span class="line">            System.out.println(x + &quot;+&quot;+ y + &quot;&#x3D;&quot;+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface comput&#123;</span><br><span class="line">        public int sum(int x,int y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class computImpl implements comput&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int sum(int x, int y) &#123;</span><br><span class="line">            return x+y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>类似于局部变量</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射详解</title>
    <url>/2020/12/27/Java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html" target="_blank" rel="noopener">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器详解</title>
    <url>/2020/12/27/Java%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.jianshu.com/p/8ef342da8732" target="_blank" rel="noopener">https://www.jianshu.com/p/8ef342da8732</a></p>
<p><a href="https://blog.csdn.net/feiyanaffection/article/details/81394745" target="_blank" rel="noopener">https://blog.csdn.net/feiyanaffection/article/details/81394745</a></p>
</blockquote>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201228151026979.png" alt="image-20201228151026979"></p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP页面El表达式不起作用</title>
    <url>/2020/11/22/JSP%E9%A1%B5%E9%9D%A2El%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>首先查看web.xml文件 查看jsp servlet版本是多少？</p>
<a id="more"></a>

<p>头文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>此时的jsp servlet的版本为2.3，<strong>Servlet2.3或者更早的JSP页面默认是不使用EL表达式的</strong>，即不解析EL表达式，所以要不就是使用更高版本的jsp servlet。这样比较麻烦，这里Java提供了一各属性来解决这个问题，使2.3或更早版本能使用El表达式，该属性为<code>&lt;%@page isELIgnored=&quot;false&quot; %&gt;</code>默认是true，表示暂时不解析，此时我们在jsp页面头文件中设置为false，再次运行，此时jsp页面就会解析El表达式</p>
<p>jsp约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>模板框架</category>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>JSP</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性</title>
    <url>/2020/12/24/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>Java8提供了很多新特性，总结一下</p>
<p>1.lambda表达式</p>
<p>2.函数式（Functional）接口</p>
<p>3.方法引用/构造器引用</p>
<p>4.Stream API</p>
<ul>
<li>并行流：</li>
<li>串行流</li>
</ul>
<p>5.Optional类—最大化减少空指针异常</p>
<p>6.新的时间和日期API</p>
<a id="more"></a>

<h1 id="1-lambda表达式"><a href="#1-lambda表达式" class="headerlink" title="1 lambda表达式"></a>1 lambda表达式</h1><blockquote>
<p>Lambda表达式详解:<a href="https://www.cnblogs.com/haixiang/p/11029639.html" target="_blank" rel="noopener">https://www.cnblogs.com/haixiang/p/11029639.html</a></p>
<p>Lambda 表达式有何用处？如何使用？:<a href="https://www.zhihu.com/question/20125256/answer/324121308" target="_blank" rel="noopener">https://www.zhihu.com/question/20125256/answer/324121308</a></p>
</blockquote>
<p>lambda表达式是JDK8的一个新特性，直接感受是简化代码，个人认为主要目的是取代匿名内部类，从而写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>
<h2 id="1-1-为什么使用lambda表达式"><a href="#1-1-为什么使用lambda表达式" class="headerlink" title="1.1 为什么使用lambda表达式"></a>1.1 为什么使用lambda表达式</h2><p>Lambda 是一个<strong>匿名函数</strong>，我们可以把 Lambda 表达式理解为是<strong>一段可以传递的代码</strong>（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
<h2 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda操作符 或箭头操作符</span><br><span class="line">左边：lambda形参列表（其实就是接口中的抽象方法的形参列表）</span><br><span class="line">右边：lambda体（其实就是重写的抽象方法的方法体）</span><br></pre></td></tr></table></figure>

<h2 id="1-3-lambda的使用"><a href="#1-3-lambda的使用" class="headerlink" title="1.3 lambda的使用"></a>1.3 lambda的使用</h2><p>主要分为6种情况</p>
<ul>
<li>无参数无返回值</li>
<li>一个参数无返回值</li>
<li>多个参数无返回值</li>
<li>无参数有返回值</li>
<li>一个参数有返回值</li>
<li>多个参数有返回值</li>
</ul>
<h2 id="1-4-lambda表达式的本质"><a href="#1-4-lambda表达式的本质" class="headerlink" title="1.4 lambda表达式的本质"></a>1.4 lambda表达式的本质</h2><p>作为函数式接口的实例</p>
<h2 id="1-5-Lambda-表达式常用示例"><a href="#1-5-Lambda-表达式常用示例" class="headerlink" title="1.5 Lambda 表达式常用示例"></a>1.5 Lambda 表达式常用示例</h2><h3 id="lambda-表达式引用方法"><a href="#lambda-表达式引用方法" class="headerlink" title="lambda 表达式引用方法"></a>lambda 表达式引用方法</h3><p>有时候我们不是必须要自己重写某个匿名内部类的方法，我们可以可以利用 lambda表达式的接口快速指向一个已经被实现的方法。</p>
<p><strong>语法：</strong><code>方法归属者::方法名 静态方法的归属者为类名，普通方法归属者为对象</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exe1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReturnOneParam lambda1 = a -&gt; doubleNum(a);</span><br><span class="line">        System.out.println(lambda1.method(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda2 引用了已经实现的 doubleNum 方法</span></span><br><span class="line">        ReturnOneParam lambda2 = Exe1::doubleNum;</span><br><span class="line">        System.out.println(lambda2.method(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        Exe1 exe = <span class="keyword">new</span> Exe1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda4 引用了已经实现的 addTwo 方法</span></span><br><span class="line">        ReturnOneParam lambda4 = exe::addTwo;</span><br><span class="line">        System.out.println(lambda4.method(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求</span></span><br><span class="line"><span class="comment">     * 1.参数数量和类型要与接口中定义的一致</span></span><br><span class="line"><span class="comment">     * 2.返回值类型要与接口中定义的一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doubleNum</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addTwo</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法的引用"><a href="#构造方法的引用" class="headerlink" title="构造方法的引用"></a>构造方法的引用</h3><p>一般我们需要声明接口，该接口作为对象的生成器，通过<code>类名::new</code> 的方式来实例化对象，然后调用方法返回对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ItemCreatorBlankConstruct</span> </span>&#123;</span><br><span class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ItemCreatorParamContruct</span> </span>&#123;</span><br><span class="line">    <span class="function">Item <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exe2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ItemCreatorBlankConstruct creator = () -&gt; <span class="keyword">new</span> Item();</span><br><span class="line">        Item item = creator.getItem();</span><br><span class="line"></span><br><span class="line">        ItemCreatorBlankConstruct creator2 = Item::<span class="keyword">new</span>;</span><br><span class="line">        Item item2 = creator2.getItem();</span><br><span class="line"></span><br><span class="line">        ItemCreatorParamContruct creator3 = Item::<span class="keyword">new</span>;</span><br><span class="line">        Item item3 = creator3.getItem(<span class="number">112</span>, <span class="string">"鼠标"</span>, <span class="number">135.99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lambda-表达式创建线程"><a href="#lambda-表达式创建线程" class="headerlink" title="lambda 表达式创建线程"></a>lambda 表达式创建线程</h3><p>我们以往都是通过创建 Thread 对象，然后通过匿名内部类重写 run() 方法，一提到匿名内部类我们就应该想到可以使用 lambda 表达式来简化线程的创建过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">     System.out.println(<span class="number">2</span> + <span class="string">":"</span> + i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>

<h3 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><p>我们可以调用集合的 <code>public void forEach(Consumer&lt;? super E&gt; action)</code> 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line">  ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  Collections.addAll(list, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//lambda表达式 方法引用</span></span><br><span class="line">  list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">  list.forEach(element -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (element % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="删除集合中的某个元素"><a href="#删除集合中的某个元素" class="headerlink" title="删除集合中的某个元素"></a>删除集合中的某个元素</h3><p>我们通过<code>public boolean removeIf(Predicate&lt;? super E&gt; filter)</code>方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">items.add(<span class="keyword">new</span> Item(<span class="number">11</span>, <span class="string">"小牙刷"</span>, <span class="number">12.05</span> ));</span><br><span class="line">items.add(<span class="keyword">new</span> Item(<span class="number">5</span>, <span class="string">"日本马桶盖"</span>, <span class="number">999.05</span> ));</span><br><span class="line">items.add(<span class="keyword">new</span> Item(<span class="number">7</span>, <span class="string">"格力空调"</span>, <span class="number">888.88</span> ));</span><br><span class="line">items.add(<span class="keyword">new</span> Item(<span class="number">17</span>, <span class="string">"肥皂"</span>, <span class="number">2.00</span> ));</span><br><span class="line">items.add(<span class="keyword">new</span> Item(<span class="number">9</span>, <span class="string">"冰箱"</span>, <span class="number">4200.00</span> ));</span><br><span class="line"></span><br><span class="line">items.removeIf(ele -&gt; ele.getId() == <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 foreach 遍历，查看是否已经删除</span></span><br><span class="line">items.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h3 id="集合内元素的排序"><a href="#集合内元素的排序" class="headerlink" title="集合内元素的排序"></a>集合内元素的排序</h3><p>在以前我们若要为集合内的元素排序，就必须调用 sort 方法，传入比较器匿名内部类重写 compare 方法，我们现在可以使用 lambda 表达式来简化代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Item(<span class="number">13</span>, <span class="string">"背心"</span>, <span class="number">7.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Item(<span class="number">11</span>, <span class="string">"半袖"</span>, <span class="number">37.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Item(<span class="number">14</span>, <span class="string">"风衣"</span>, <span class="number">139.80</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Item(<span class="number">12</span>, <span class="string">"秋裤"</span>, <span class="number">55.33</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list.sort(new Comparator&lt;Item&gt;() &#123;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public int compare(Item o1, Item o2) &#123;</span></span><br><span class="line"><span class="comment">        return o1.getId()  - o2.getId();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">list.sort((o1, o2) -&gt; o1.getId() - o2.getId());</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Lambda-表达式中的闭包问题"><a href="#1-6-Lambda-表达式中的闭包问题" class="headerlink" title="1.6 Lambda 表达式中的闭包问题"></a>1.6 Lambda 表达式中的闭包问题</h2><p>这个问题我们在匿名内部类中也会存在，如果我们把注释放开会报错，告诉我 num 值是 final 不能被改变。这里我们虽然没有标识 num 类型为 final，但是在编译期间虚拟机会帮我们加上 final 修饰关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = ele -&gt; &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//num = num + 2;</span></span><br><span class="line">        consumer.accept(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-函数式（Functional）接口"><a href="#2-函数式（Functional）接口" class="headerlink" title="2  函数式（Functional）接口"></a>2  函数式（Functional）接口</h1><p>函数式（Functional）接口：只包含一个抽象方法</p>
<p>Java内置的四大核心函数式接口：</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020120411.png" alt="img"></p>
<h1 id="3-方法引用-构造器引用"><a href="#3-方法引用-构造器引用" class="headerlink" title="3 方法引用/构造器引用"></a>3 方法引用/构造器引用</h1><p>当要传递给Lamdba体的操作，已经有实现的方法了，可以使用方法引用。</p>
<p>方法引用可以看做是lambda表达式深层次的表达。换句话说，方法引用就是lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是lambda表达式的一个语法糖。</p>
<p><strong>要求：</strong>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致。</p>
<p><strong>格式：</strong>使用操作符“::”将类（或对象）与方法名分隔开来</p>
<p>主要有三种使用情况：</p>
<ul>
<li>对象::实例方法名</li>
<li>类::静态方法名</li>
<li>类::实例方法名</li>
</ul>
<h1 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4 Stream API"></a>4 Stream API</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><blockquote>
<p>Stream API（java.util.stream）把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生成力，让程序员写出高效率，干净，简洁的代码。</p>
</blockquote>
<p>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。</strong>也可以使用 Stream API 来<strong>并行</strong>执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<h2 id="4-2-为什么使用Stream-API"><a href="#4-2-为什么使用Stream-API" class="headerlink" title="4.2 为什么使用Stream API"></a>4.2 为什么使用Stream API</h2><ul>
<li>实际开发中，项目中多数数据源都来自于MySQL，Oracle等。但现在数据源可以更多了，有MonogoDB，Redis，而这些NoSQL的数据源就需要Java层面去处理。</li>
<li>Stream和Collection集合的区别：<ul>
<li>Collection是一种静态的内存数据结构，是主要面向内存，存储在内存中。</li>
<li>Stream是有相关计算的，主要是面向CPU，通过CPU实现计算。</li>
</ul>
</li>
</ul>
<h2 id="4-3-什么是Stream"><a href="#4-3-什么是Stream" class="headerlink" title="4.3 什么是Stream"></a>4.3 什么是Stream</h2><p>Stream是数据渠道，用于操作数据源（集合，数组等）所生成的元素序列。</p>
<p><strong>“集合讲的是数据，Stream讲的是计算”</strong></p>
<p><strong>注意：</strong></p>
<ul>
<li>Stream 自己不会存储元素。</li>
<li>Stream 不会改变源对象。每次处理都会返回一个持有结果的新Stream。</li>
<li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>
</ul>
<h2 id="4-4-Stream-的操作三个步骤："><a href="#4-4-Stream-的操作三个步骤：" class="headerlink" title="4.4 Stream 的操作三个步骤："></a>4.4 Stream 的操作三个步骤：</h2><ol>
<li><strong>创建 Stream</strong>：通过一个数据源（如：集合、数组），获取一个流</li>
<li><strong>中间操作</strong>：中间操作是个操作链，对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</li>
<li><strong>终止操作</strong>：一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。<br><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020120410.png" alt="在这里插入图片描述"></li>
</ol>
<h3 id="4-4-1-创建Stream流"><a href="#4-4-1-创建Stream流" class="headerlink" title="4.4.1 创建Stream流"></a>4.4.1 创建Stream流</h3><h4 id="1-创建Stream方式一-通过集合"><a href="#1-创建Stream方式一-通过集合" class="headerlink" title="1.创建Stream方式一:通过集合"></a>1.创建Stream方式一:通过集合</h4><p>Java8中的Collection接口被扩展，提供了两个获取流的方法:</p>
<p>​        ●default Stream stream() : 返回一个顺序流</p>
<p>​        ●default Stream parallelStream() : 返回一个并行流</p>
<h4 id="2-创建Stream方式二-通过数组"><a href="#2-创建Stream方式二-通过数组" class="headerlink" title="2.创建Stream方式二:通过数组"></a>2.创建Stream方式二:通过数组</h4><p>Java8中的Arrays的静态方法stream()可以获取数组流:</p>
<p>​        ● static Stream stream(T[] array): 返回一个流</p>
<p>重载形式，能够处理对应基本类型的数组:</p>
<p>​        ●public static IntStream stream(int[] array)：返回一个整型数据流</p>
<p>​        ●public static LongStream stream(long[] array)：返回一个长整型数据流</p>
<p>​        ●public static DoubleStream stream(double[] array)：返回一个浮点型数据流</p>
<h4 id="3-创建Stream方式三-通过Stream的of"><a href="#3-创建Stream方式三-通过Stream的of" class="headerlink" title="3.创建Stream方式三:通过Stream的of()"></a>3.创建Stream方式三:通过Stream的of()</h4><p>可以调用Stream类静态方法<code>of()</code>，通过显示值创建一个流。它可以接受任意数量的参数</p>
<p>​        ●public static Stream of(T… values) : 返回一个顺序流</p>
<h4 id="4-创建Stream方式四-创建无限流"><a href="#4-创建Stream方式四-创建无限流" class="headerlink" title="4.创建Stream方式四:创建无限流"></a>4.创建Stream方式四:创建无限流</h4><p>可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流。</p>
<p>​        ●public static Stream iterate(final T seed, final UnaryOperator f):返回一个无限流</p>
<p>​        ● public static Stream generate(Supplier s) ：返回一个无限流</p>
<h3 id="4-4-2-中间处理数据操作"><a href="#4-4-2-中间处理数据操作" class="headerlink" title="4.4.2 中间处理数据操作"></a>4.4.2 中间处理数据操作</h3><h3 id="4-4-3-终结操作"><a href="#4-4-3-终结操作" class="headerlink" title="4.4.3 终结操作"></a>4.4.3 终结操作</h3><h1 id="5-Optional类—最大化减少空指针异常"><a href="#5-Optional类—最大化减少空指针异常" class="headerlink" title="5 Optional类—最大化减少空指针异常"></a>5 Optional类—最大化减少空指针异常</h1><h1 id="6-新的时间和日期API"><a href="#6-新的时间和日期API" class="headerlink" title="6 新的时间和日期API"></a>6 新的时间和日期API</h1>]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习笔记</title>
    <url>/2020/12/20/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>并发学习</p>
<a id="more"></a>

<h1 id="1-并发概念"><a href="#1-并发概念" class="headerlink" title="1 并发概念"></a>1 并发概念</h1><h1 id="2-并发基础"><a href="#2-并发基础" class="headerlink" title="2 并发基础"></a>2 并发基础</h1><h1 id="3-项目准备"><a href="#3-项目准备" class="headerlink" title="3 项目准备"></a>3 项目准备</h1><h1 id="4-线程安全性"><a href="#4-线程安全性" class="headerlink" title="4 线程安全性"></a>4 线程安全性</h1><h1 id="5-安全发布对象"><a href="#5-安全发布对象" class="headerlink" title="5 安全发布对象"></a>5 安全发布对象</h1><h1 id="6-线程安全策略"><a href="#6-线程安全策略" class="headerlink" title="6 线程安全策略"></a>6 线程安全策略</h1><h1 id="7-J-U-C之AQS"><a href="#7-J-U-C之AQS" class="headerlink" title="7 J.U.C之AQS"></a>7 J.U.C之AQS</h1><h1 id="8-J-U-C组件扩展"><a href="#8-J-U-C组件扩展" class="headerlink" title="8 J.U.C组件扩展"></a>8 J.U.C组件扩展</h1><h1 id="9-线程调度之线程池"><a href="#9-线程调度之线程池" class="headerlink" title="9 线程调度之线程池"></a>9 线程调度之线程池</h1><h1 id="10-多线程并发扩展"><a href="#10-多线程并发扩展" class="headerlink" title="10 多线程并发扩展"></a>10 多线程并发扩展</h1><h1 id="11-高并发之扩容思路"><a href="#11-高并发之扩容思路" class="headerlink" title="11 高并发之扩容思路"></a>11 高并发之扩容思路</h1><h1 id="12-高并发之缓存思路"><a href="#12-高并发之缓存思路" class="headerlink" title="12 高并发之缓存思路"></a>12 高并发之缓存思路</h1><h1 id="13-高并发之消息队列思路"><a href="#13-高并发之消息队列思路" class="headerlink" title="13 高并发之消息队列思路"></a>13 高并发之消息队列思路</h1><h1 id="14-高并发之应用拆分思路"><a href="#14-高并发之应用拆分思路" class="headerlink" title="14 高并发之应用拆分思路"></a>14 高并发之应用拆分思路</h1><h1 id="15-高并发之应用限流思路"><a href="#15-高并发之应用限流思路" class="headerlink" title="15 高并发之应用限流思路"></a>15 高并发之应用限流思路</h1><h1 id="16-高并发之服务降级与服务熔断思路"><a href="#16-高并发之服务降级与服务熔断思路" class="headerlink" title="16 高并发之服务降级与服务熔断思路"></a>16 高并发之服务降级与服务熔断思路</h1><h1 id="17-高并发之数据库切库分库分表思路"><a href="#17-高并发之数据库切库分库分表思路" class="headerlink" title="17 高并发之数据库切库分库分表思路"></a>17 高并发之数据库切库分库分表思路</h1><h1 id="18-高并发之高可用手段介绍"><a href="#18-高并发之高可用手段介绍" class="headerlink" title="18 高并发之高可用手段介绍"></a>18 高并发之高可用手段介绍</h1>]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>Java并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常详解</title>
    <url>/2020/12/27/Java%E5%BC%82%E5%B8%B8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>java提高篇—–异常(一)：<a href="https://www.cnblogs.com/chenssy/p/3438130.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3438130.html</a></p>
<p>java提高篇—–异常(二)：<a href="https://www.cnblogs.com/chenssy/p/3453039.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3453039.html</a></p>
</blockquote>
<h1 id="异常类体系"><a href="#异常类体系" class="headerlink" title="异常类体系"></a>异常类体系</h1><p>​        Throwable是所有异常的超类，两个直接子类分别为Exception和Error，其中Exception又可分为运行时异常和非运行时异常，这两种异常有很大的区别，也称之为不检查异常（Unchecked Exception）和检查异常（Checked Exception）。</p>
<p>​        其中CheckException发生在编译阶段，必须要使用try…catch（或者throws）否则编译不通过。而UncheckedException发生在运行期，具有不确定性，主要是由于程序的逻辑问题所引起的，难以排查，我们一般都需要纵观全局才能够发现这类的异常错误，所以在程序设计中我们需要认真考虑，好好写代码，尽量处理异常，即使产生了异常，也能尽量保证程序朝着有利方向发展。</p>
<p><img src="/images/2020122703.png" alt="1354439580_6933"></p>
<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>   Java自定义异常的使用要经历如下四个步骤：</p>
<ol>
<li>定义一个类继承Throwable或其子类。</li>
<li>添加构造方法(当然也可以不用添加，使用默认构造方法)。</li>
<li>在某个方法类抛出该异常。</li>
<li>捕捉该异常。</li>
</ol>
<h1 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h1><p>​        在设计模式中有一个叫做责任链模式，该模式是将多个对象链接成一条链，客户端的请求沿着这条链传递直到被接收、处理。同样Java异常机制也提供了这样一条链：异常链。</p>
<p>​        <strong>通过使用异常链，我们可以提高代码的可理解性、系统的可维护性和友好性。</strong></p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口详解</title>
    <url>/2020/12/27/Java%E6%8E%A5%E5%8F%A3%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>JAVA基础——接口（全网最详细教程）：<a href="https://blog.csdn.net/qq_19782019/article/details/80259836" target="_blank" rel="noopener">https://blog.csdn.net/qq_19782019/article/details/80259836</a></p>
<p>java提高篇(五)—–抽象类与接口：<a href="https://www.cnblogs.com/chenssy/p/3376708.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3376708.html</a></p>
<p>深入理解Java的接口和抽象类：<a href="https://www.cnblogs.com/dolphin0520/p/3811437.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3811437.html</a></p>
</blockquote>
<p><strong>接口：</strong></p>
<p><strong>抽象类：</strong></p>
<p>　从这里可以看出，抽象类就是为了继承而存在的，如果你定义了一个抽象类，却不去继承它，那么等于白白创建了这个抽象类，因为你不能用它来做任何事情。对于一个父类，如果它的某个方法在父类中实现出来没有任何意义，必须根据子类的实际需求来进行不同的实现，那么就可以将这个方法声明为abstract方法，此时这个类也就成为abstract类了。</p>
<p>包含抽象方法的类称为抽象类，但并不意味着抽象类中只能有抽象方法，它和普通类一样，同样可以拥有成员变量和普通的成员方法。注意，抽象类和普通类的主要有三点区别：</p>
<p>1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</p>
<p>2）抽象类不能用来创建对象；</p>
<p>3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。</p>
<p>在其他方面，抽象类和普通的类并没有区别。</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象详解</title>
    <url>/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>面向对象的多态性：<a href="https://liuyangjun.blog.csdn.net/article/details/79788326" target="_blank" rel="noopener">https://liuyangjun.blog.csdn.net/article/details/79788326</a></p>
<p>理解java的三大特性之多态：<a href="https://www.cnblogs.com/chenssy/p/3372798.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3372798.html</a></p>
</blockquote>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote>
<p><a href="https://www.cnblogs.com/dolphin0520/p/3803432.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3803432.html</a></p>
</blockquote>
<p>继承在一定程度上破坏了父类的封装性，此时要合理运用组合</p>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote>
<p><a href="https://www.zhihu.com/question/30082151" target="_blank" rel="noopener">https://www.zhihu.com/question/30082151</a></p>
</blockquote>
<h2 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h2><p>事物在运行过程中存在不同的状态。</p>
<h2 id="多态的三个前提"><a href="#多态的三个前提" class="headerlink" title="多态的三个前提"></a>多态的三个前提</h2><ul>
<li>继承</li>
</ul>
<ul>
<li>重写</li>
</ul>
<ul>
<li>父类引用指向子类对象（向上转型）</li>
</ul>
<h2 id="多态成员访问的特点"><a href="#多态成员访问的特点" class="headerlink" title="多态成员访问的特点"></a>多态成员访问的特点</h2><ul>
<li>成员变量<pre><code>编译看左边，运行看左边。</code></pre></li>
<li>构造方法<pre><code>创建子类对象的时候，访问父类的构造方法，对父类的数据进行初始化。</code></pre></li>
<li>成员方法<pre><code>编译看左边，运行看右边。</code></pre></li>
<li>静态方法<pre><code>编译看左边，运行看左边。
(静态和类相关，算不上重写，所以，访问还是左边的)</code></pre></li>
</ul>
<h2 id="多态的优劣"><a href="#多态的优劣" class="headerlink" title="多态的优劣"></a>多态的优劣</h2><p>优点：十分灵活，减少多余对象的创建</p>
<p>弊端：不能使用子类特有的属性和方法</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201228124938500.png" alt="image-20201228124938500"></p>
<p> 比如你是一个酒神，对酒情有独钟。某日回家发现桌上有几个杯子里面都装了白酒，从外面看我们是不可能知道这是些什么酒，只有喝了之后才能够猜出来是何种酒。你一喝，这是剑南春、再喝这是五粮液、再喝这是酒鬼酒….在这里我们可以描述成如下：</p>
<p>   酒 a = 剑南春</p>
<p>   酒 b = 五粮液</p>
<p>   酒 c = 酒鬼酒</p>
<p>   …</p>
<p>   这里所表现的的就是多态。剑南春、五粮液、酒鬼酒都是酒的子类，我们只是通过酒这一个父类就能够引用不同的子类，这就是多态——我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p>
<p>   诚然，要理解多态我们就必须要明白什么是“向上转型”。在继承中我们简单介绍了向上转型，这里就在啰嗦下：在上面的喝酒例子中，酒（Win）是父类，剑南春（JNC）、五粮液（WLY）、酒鬼酒（JGJ）是子类。我们定义如下代码：</p>
<p>   JNC a = new JNC();</p>
<p>   对于这个代码我们非常容易理解无非就是实例化了一个剑南春的对象嘛！但是这样呢？</p>
<p>   Wine a = new JNC();</p>
<p>   在这里我们这样理解，这里定义了一个Wine 类型的a，它指向JNC对象实例。由于JNC是继承与Wine，所以JNC可以自动向上转型为Wine，所以a是可以指向JNC实例对象的。这样做存在一个非常大的好处，在继承中我们知道子类是父类的扩展，它可以提供比父类更加强大的功能，如果我们定义了一个指向子类的父类引用类型，那么它除了能够引用父类的共性外，还可以使用子类强大的功能。</p>
<p>   但是向上转型存在一些缺憾，那就是它必定会导致一些方法和属性的丢失，而导致我们不能够获取它们。所以父类类型的引用可以调用父类中定义的所有属性和方法，对于只存在与子类中的方法和属性它就望尘莫及了—1。</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Java定时任务调度工具</title>
    <url>/2021/02/02/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><blockquote>
<p>什么是定时任务调度：基于<strong>给定的时间点</strong>，<strong>给定的时间间隔</strong>或者<strong>给定的执行次数</strong>自动执行的任务</p>
</blockquote>
<p>常用的调度工具</p>
<ul>
<li><p>Timer：JDK提供</p>
</li>
<li><p>Quartz：第三方提供</p>
</li>
</ul>
<h1 id="2-Timer"><a href="#2-Timer" class="headerlink" title="2 Timer"></a>2 Timer</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><blockquote>
<p>有且仅有一个后台线程对多个业务线程进行定时定频率的调度</p>
</blockquote>
<h2 id="2-2-主要构件"><a href="#2-2-主要构件" class="headerlink" title="2.2 主要构件"></a>2.2 主要构件</h2><p>Timer定时调用TimerTask</p>
<ul>
<li><p>Timer：可以笼统的理解为后台执行的线程</p>
</li>
<li><p>TimerTask：可以理解为业务线程</p>
</li>
</ul>
<h2 id="2-3-Timer工具类"><a href="#2-3-Timer工具类" class="headerlink" title="2.3 Timer工具类"></a>2.3 Timer工具类</h2><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210202101609478.png" alt="image-20210202101609478"></p>
<blockquote>
<p>个人DEMO：</p>
</blockquote>
<h2 id="2-4-Timer的定时调度函数"><a href="#2-4-Timer的定时调度函数" class="headerlink" title="2.4 Timer的定时调度函数"></a>2.4 Timer的定时调度函数</h2><ul>
<li>schedule的四种用法</li>
<li>scheduleAtFixedRate的两种用法</li>
</ul>
<h3 id="2-4-1-schedule的四种用法"><a href="#2-4-1-schedule的四种用法" class="headerlink" title="2.4.1 schedule的四种用法"></a>2.4.1 schedule的四种用法</h3><p>1.schedule(task,time)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	task：所要安排的任务</span><br><span class="line">	time：执行任务的时间</span><br><span class="line">作用：在时间等于或超过time的时间执行且仅执行一次task</span><br></pre></td></tr></table></figure>

<p>2.schedule(task,time,period)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	task：所要安排的任务</span><br><span class="line">	time：首次执行任务的时间</span><br><span class="line">	period：执行一次task的时间间隔，单位是毫秒</span><br><span class="line">作用：时间等于或超过time时首次执行task，之后每隔period毫秒重复执行一次task</span><br></pre></td></tr></table></figure>

<p>3.scheduleAtFixedRate(task,time,period)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	task：所要安排的任务</span><br><span class="line">	time：首次执行任务的时间</span><br><span class="line">	period：执行一次task的时间间隔，单位是毫秒</span><br><span class="line">作用：时间等于或超过time时首次执行task，之后每隔period毫秒重复执行一次task</span><br></pre></td></tr></table></figure>

<p>4.scheduleAtFixedRate(task,delay,period)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	task：所要安排的任务</span><br><span class="line">	delay：执行任务前的延迟时间，单位是毫秒</span><br><span class="line">	period：执行一次task的时间间隔，单位是毫秒</span><br><span class="line">作用：时间等于或超过time时首次执行task，之后每隔period毫秒重复执行一次task</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-其他重要函数"><a href="#2-4-2-其他重要函数" class="headerlink" title="2.4.2 其他重要函数"></a>2.4.2 其他重要函数</h3><p>TimerTask的canal()，scheduledExecutionTime()</p>
<p>canal()：取消当前TimerTask里的任务</p>
<p>Timer的canal()，purge()</p>
<h2 id="2-5-Timer的缺陷"><a href="#2-5-Timer的缺陷" class="headerlink" title="2.5 Timer的缺陷"></a>2.5 Timer的缺陷</h2><ul>
<li>管理并发任务的缺陷</li>
<li>当任务抛出异常时的缺陷</li>
</ul>
<h1 id="3-Quartz"><a href="#3-Quartz" class="headerlink" title="3 Quartz"></a>3 Quartz</h1>]]></content>
      <tags>
        <tag>Timer</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解详解</title>
    <url>/2020/12/27/Java%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p><a href="https://blog.csdn.net/javazejian/article/details/71860633" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/71860633</a></p>
<p><a href="https://www.runoob.com/w3cnote/java-annotation.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/java-annotation.html</a></p>
</blockquote>
<h1 id="Annotation-架构"><a href="#Annotation-架构" class="headerlink" title="Annotation 架构"></a>Annotation 架构</h1><p><img src="/images/2020122704.png" alt="img"></p>
<h1 id="基本Annotation"><a href="#基本Annotation" class="headerlink" title="基本Annotation"></a>基本Annotation</h1><p><code>@Override</code>：限定重写父类方法，强制一个子类必须覆盖父类的的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value=METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(value=SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override</span><br></pre></td></tr></table></figure>



<p><code>@Deprecated</code>：标记已过时，用于表示某个程序元素（类，方法等）已过时，当其他程序使用已过时的类，方法时，编译器将会给出警告。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR,ElementType,LOCAL_VARIABLE,METHOD,PACKAGE,PARAMETER,TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated</span><br></pre></td></tr></table></figure>



<p><code>@SuppressWarnings</code>：抑制编译器警告，指示被该Annotation修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value=&#123;TYPE,ElementType,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(value=SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings</span><br></pre></td></tr></table></figure>



<p><code>@SafeVarargs</code>：Java7的“堆污染”警告</p>
<p>堆污染：当把一个不带泛型的对象赋给一个带泛型的的变量时，就会引发堆污染。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=&#123;CONSTRUCTOR,METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SafeVarargs</span><br></pre></td></tr></table></figure>



<p><code>@FunctionalInterface</code>：函数式接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface</span><br></pre></td></tr></table></figure>



<h1 id="JDK的元Annotation"><a href="#JDK的元Annotation" class="headerlink" title="JDK的元Annotation"></a>JDK的元Annotation</h1><p><code>@Retention</code>：指示要注释具有注释类型的注释的保留时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention</span><br></pre></td></tr></table></figure>



<p><code>@Target</code>：指示注释类型适用的上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target</span><br></pre></td></tr></table></figure>



<p><code>@Documented</code>：用于指定被元注解修饰的Annotation类建被javadoc工具提取成文档，如果定义Annotation类时使用了@Documented修饰，则所有使用该Annotation修饰的程序元素的API文档中将会包含该Annotation说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Documented</span><br></pre></td></tr></table></figure>



<p><code>@Inherited</code>：表示注释类型自动继承。如果在注释类型声明中存在继承的元注释，并且用户在类声明上查询注释类型，并且类声明没有此类型的注释，则该类的超类将自动查询注释类型。将重复此过程，直到找到此类型的注释，或者达到类层次结构（Object）的顶部。 如果没有超类具有此类型的注释，则查询将指示所讨论的类没有这样的注释。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value=ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited</span><br></pre></td></tr></table></figure>





<h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>定义新的Annotation类型使用@interface关键字（在原有的interface关键字前增加@符号）定义一个新的Annotation类型与定义一个接口非常像。</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus笔记</title>
    <url>/2020/08/15/MyBatis-Plus%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>MyBatis-Plus 用起来真的很舒服:<a href="https://www.cnblogs.com/l-y-h/p/12859477.html" target="_blank" rel="noopener">https://www.cnblogs.com/l-y-h/p/12859477.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>ORM框架</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装MySQL</title>
    <url>/2018/02/01/Linux%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>MySQL官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html</a></p>
<p>CentOS安装MySQL详解：<a href="https://juejin.cn/post/6844903870053761037" target="_blank" rel="noopener">https://juejin.cn/post/6844903870053761037</a></p>
</blockquote>
<p>Linux上安装软件常见的几种方式：</p>
<ul>
<li>源码编译</li>
<li>压缩包解压（一般为tar.gz）</li>
<li>编译好的安装包（RPM、DPKG等）</li>
<li>在线安装（YUM、APT等）</li>
</ul>
<p>几种安装方式最好都能掌握，原则上能用简单的就用简单的：<code>YUM&gt;RPM&gt;tar.gz&gt;源码</code></p>
<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><h4 id="1-删除已安装的MySQL"><a href="#1-删除已安装的MySQL" class="headerlink" title="1 删除已安装的MySQL"></a>1 删除已安装的MySQL</h4><h5 id="检查MariaDB"><a href="#检查MariaDB" class="headerlink" title="检查MariaDB"></a>检查MariaDB</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mariadb</span><br><span class="line">mariadb-server-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></table></figure>

<h5 id="删除mariadb"><a href="#删除mariadb" class="headerlink" title="删除mariadb"></a>删除mariadb</h5><p>如果不存在（上面检查结果返回空）则跳过步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps mariadb-server</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure>

<p><em>其实yum方式安装是可以不用删除mariadb的，安装MySQL会覆盖掉之前已存在的mariadb</em></p>
<h5 id="检查MySQL"><a href="#检查MySQL" class="headerlink" title="检查MySQL"></a>检查MySQL</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mysql</span><br></pre></td></tr></table></figure>

<h5 id="删除MySQL"><a href="#删除MySQL" class="headerlink" title="删除MySQL"></a>删除MySQL</h5><p>如果不存在（上面检查结果返回空）则跳过步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps xxx</span><br></pre></td></tr></table></figure>

<h3 id="2-添加MySQL-Yum-Repository"><a href="#2-添加MySQL-Yum-Repository" class="headerlink" title="2 添加MySQL Yum Repository"></a>2 添加MySQL Yum Repository</h3><blockquote>
<p>从CentOS 7开始，MariaDB成为Yum源中默认的数据库安装包。也就是说在CentOS 7及以上的系统中使用yum安装MySQL默认安装的会是MariaDB（MySQL的一个分支）。如果想安装官方MySQL版本，需要使用MySQL提供的Yum源。</p>
</blockquote>
<h5 id="下载MySQL源"><a href="#下载MySQL源" class="headerlink" title="下载MySQL源"></a>下载MySQL源</h5><p>官网地址：<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">dev.mysql.com/downloads/r…</a></p>
<p>查看系统版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; cat /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p><img src="/images/2018020101.png" alt="image-20210201094147199"></p>
<p>选择对应的版本进行下载，例如CentOS 7当前在官网查看最新Yum源的下载地址为： <a href="https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">dev.mysql.com/get/mysql80…</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<h5 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo rpm -Uvh platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></table></figure>

<p>例如CentOS7当前最新MySQL源安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<h5 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h5><p>执行成功后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code>及 <code>mysql-community-source.repo</code></p>
<p>并且通过<code>yum repolist</code>可以看到mysql相关资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/2018020102.png" alt="image-20210201094832982"></p>
<h3 id="3-选择MySQL版本"><a href="#3-选择MySQL版本" class="headerlink" title="3 选择MySQL版本"></a>3 选择MySQL版本</h3><p>使用MySQL Yum Repository安装MySQL，默认会选择当前最新的稳定版本，例如通过上面的MySQL源进行安装的话，默安装会选择MySQL 8.0版本，如果就是想要安装该版本，可以直接跳过此步骤，如果不是，比如我这里希望安装MySQL5.7版本，就需要“切换一下版本”：</p>
<h5 id="查看当前MySQL-Yum-Repository中所有MySQL版本（每个版本在不同的子仓库中）"><a href="#查看当前MySQL-Yum-Repository中所有MySQL版本（每个版本在不同的子仓库中）" class="headerlink" title="查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）"></a>查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<h5 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line">shell&gt; sudo yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br></pre></td></tr></table></figure>

<p>除了使用yum-config-manager之外，还可以直接编辑<code>/etc/yum.repos.d/mysql-community.repo</code>文件</p>
<p><code>enabled=0</code>禁用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysql80-community]</span><br><span class="line">name=MySQL 8.0 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/7/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p><code>enabled=1</code>启用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable to use MySQL 5.7</span></span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<h5 id="检查当前启用的MySQL仓库"><a href="#检查当前启用的MySQL仓库" class="headerlink" title="检查当前启用的MySQL仓库"></a>检查当前启用的MySQL仓库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep mysql</span><br></pre></td></tr></table></figure>

<p><em>如果同时启用了多个仓库，安装时会选择最新版本</em></p>
<h3 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3 安装MySQL"></a>3 安装MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<p>该命令会安装MySQL服务器 (mysql-community-server) 及其所需的依赖、相关组件，包括mysql-community-client、mysql-community-common、mysql-community-libs等</p>
<p>如果带宽不够，这个步骤时间会比较长，请耐心等待~</p>
<h3 id="4-启动MySQL"><a href="#4-启动MySQL" class="headerlink" title="4 启动MySQL"></a>4 启动MySQL</h3><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<p>CentOS 6：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysqld start</span><br></pre></td></tr></table></figure>

<h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<p>CentOS 6：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysqld status</span><br></pre></td></tr></table></figure>

<h5 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo systemctl stop mysqld.service</span><br></pre></td></tr></table></figure>

<p>CentOS 6：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysqld stop</span><br></pre></td></tr></table></figure>

<h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>

<p>CentOS 6：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysqld restart</span><br></pre></td></tr></table></figure>

<h3 id="5-修改密码"><a href="#5-修改密码" class="headerlink" title="5 修改密码"></a>5 修改密码</h3><h5 id="初始密码"><a href="#初始密码" class="headerlink" title="初始密码"></a>初始密码</h5><p>MySQL第一次启动后会创建超级管理员账号<code>root@localhost</code>，初始密码存储在日志文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>

<h5 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>

<p>出现上面的提示是因为密码太简单了，解决方法如下：</p>
<ol>
<li>使用复杂密码，MySQL默认的密码策略是要包含数字、字母及特殊字符；</li>
<li>如果只是测试用，不想用那么复杂的密码，可以修改默认策略，即<code>validate_password_policy</code>（以及<code>validate_password_length</code>等相关参数），使其支持简单密码的设定，具体方法可以自行百度；</li>
<li>mysql查看<code>SHOW VARIABLES LIKE &#39;validate_password%</code>，设置<code>set global validate_password_policy=0;</code>，保存并重启MySQL</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="6-允许root远程访问"><a href="#6-允许root远程访问" class="headerlink" title="6 允许root远程访问"></a>6 允许root远程访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h3 id="7-设置编码为utf8"><a href="#7-设置编码为utf8" class="headerlink" title="7 设置编码为utf8"></a>7 设置编码为utf8</h3><h5 id="查看编码"><a href="#查看编码" class="headerlink" title="查看编码"></a>查看编码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure>

<h5 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h5><p>编辑/etc/my.cnf，[mysqld]节点增加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init-connect=<span class="string">'SET NAMES utf8'</span></span><br></pre></td></tr></table></figure>

<h3 id="8-设置开机启动"><a href="#8-设置开机启动" class="headerlink" title="8 设置开机启动"></a>8 设置开机启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell&gt; systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></table></figure>



<h2 id="MySQL卸载"><a href="#MySQL卸载" class="headerlink" title="MySQL卸载"></a>MySQL卸载</h2><p>1.查看mysql安装了哪些东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa |grep -i mysql</span><br></pre></td></tr></table></figure>

<p><img src="/images/2018020103.png" alt="image-20210201142806593"></p>
<p>2.开始卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove mysql-community-client-plugins-8.0.23-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>3.查看是否卸载完成</p>
<p><img src="/images/2018020104.png" alt="image-20210201142907567"></p>
<p>4.查找mysql相关目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure>

<p><img src="/images/2018020105.png" alt="image-20210201142940077"></p>
<p>5.删除相关目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf</span><br></pre></td></tr></table></figure>

<p><img src="/images/2018020106.png" alt="image-20210201143042317"></p>
<p>6.删除/etc/my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>7.删除/var/log/mysqld.log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装配置大全</title>
    <url>/2020/11/27/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>Linux各种版本安装配置</p>
<a id="more"></a>

<h1 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&mid=2247488461&idx=1&sn=3199f4d7f6854ab450a088135122d2ff&chksm=f9a1c004ced64912098b6e1b1d4406dbcc8858a6fc7b9d9e76196e33f28b613f940dd6d682dc&sessionid=1606460612&scene=126&clicktime=1606460870&enterid=1606460870&ascene=3&devicetype=android-27&version=2700143f&nettype=3gnet&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=A%2F6Xg4qYU%2FwWCE0t8HkjwzY%3D&pass_ticket=Mq6%2FQAWSPqK%2FgoRY6hwN80HcANi%2FWrcs4QkV5e%2BUTRSlviV9nk6vBi1LDmOauhub&wx_header=1" target="_blank" rel="noopener">CentOS 7 安装教程</a></p>
<h1 id="Ubuntu-20-04"><a href="#Ubuntu-20-04" class="headerlink" title="Ubuntu 20.04"></a>Ubuntu 20.04</h1><p><a href="https://mp.weixin.qq.com/s/vkLZ_3Jp4HdQ8PDIMYsGEw" target="_blank" rel="noopener">Ubuntu安装教程</a></p>
<h1 id="CentOS7磁盘操作"><a href="#CentOS7磁盘操作" class="headerlink" title="CentOS7磁盘操作"></a>CentOS7磁盘操作</h1><h2 id="linux磁盘分区扩容"><a href="#linux磁盘分区扩容" class="headerlink" title="linux磁盘分区扩容"></a>linux磁盘分区扩容</h2><p>大概分为以下几步：</p>
<ol>
<li>分区<code>fdisk</code></li>
<li>格式化<code>mkfs</code></li>
<li>挂载<code>mount</code></li>
</ol>
<blockquote>
<p>详细操作：<a href="https://www.cnblogs.com/chenmh/p/5096592.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenmh/p/5096592.html</a></p>
</blockquote>
<p><strong>其他操作：</strong></p>
<p><code>du</code> 查看文件数据占用多少磁盘空间<br><code>swap</code>交换分区 是一种通过在磁盘中预先划分一定的空军，然后就讲把内存中暂时不常用的数据临时存放在磁盘中，以便腾出物理内存空间让更活跃的程序服务来使用的技术，其设计目的是为了解决真实物理内存不足的问题</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis三剑客</title>
    <url>/2020/11/19/MyBatis%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>MyBatis-generator</p>
<p>MyBatis-plugin</p>
<p>MyBatis-PageHelper</p>
<a id="more"></a>

<h1 id="Mybatis-generator代码自动生成"><a href="#Mybatis-generator代码自动生成" class="headerlink" title="Mybatis-generator代码自动生成"></a>Mybatis-generator代码自动生成</h1><p>mybatis-generator是一款流行的自动代码生成工具。</p>
<p>这里简述一下开发步骤：</p>
<h2 id="1-maven依赖配置"><a href="#1-maven依赖配置" class="headerlink" title="1.maven依赖配置"></a>1.maven依赖配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-新建配置文件generatorConfig-xml"><a href="#2-新建配置文件generatorConfig-xml" class="headerlink" title="2.新建配置文件generatorConfig.xml"></a>2.新建配置文件generatorConfig.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></span><br><span class="line"><span class="comment">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span></span><br><span class="line"><span class="comment">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span></span><br><span class="line"><span class="comment">&lt;properties resource="" url="" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></span><br><span class="line"><span class="comment">     location属性指明加载jar/zip包的全路径</span></span><br><span class="line"><span class="comment">&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    context:生成一组对象的环境 </span></span><br><span class="line"><span class="comment">    id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">    defaultModelType:指定生成对象的样式</span></span><br><span class="line"><span class="comment">        1，conditional：类似hierarchical；</span></span><br><span class="line"><span class="comment">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span></span><br><span class="line"><span class="comment">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span></span><br><span class="line"><span class="comment">    targetRuntime:</span></span><br><span class="line"><span class="comment">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span></span><br><span class="line"><span class="comment">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span></span><br><span class="line"><span class="comment">    introspectedColumnImpl：类全限定名，用于扩展MBG</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">defaultModelType</span>=<span class="string">"hierarchical"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoDelimitKeywords"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xmlFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></span><br><span class="line"><span class="comment">        @<span class="doctag">TODO:</span>是否可以扩展</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///pss"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 </span></span><br><span class="line"><span class="comment">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">            false：默认,</span></span><br><span class="line"><span class="comment">                scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></span><br><span class="line"><span class="comment">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span></span><br><span class="line"><span class="comment">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></span><br><span class="line"><span class="comment">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></span><br><span class="line"><span class="comment">            是否创建一个不可变的类，如果为true，</span></span><br><span class="line"><span class="comment">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></span><br><span class="line"><span class="comment">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span></span><br><span class="line"><span class="comment">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span></span><br><span class="line"><span class="comment">                1，属性名相同，类型相同，有相同的getter/setter方法；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></span><br><span class="line"><span class="comment">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span></span><br><span class="line"><span class="comment">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span></span><br><span class="line"><span class="comment">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span></span><br><span class="line"><span class="comment">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span></span><br><span class="line"><span class="comment">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></span><br><span class="line"><span class="comment">        选择的table会生成一下文件：</span></span><br><span class="line"><span class="comment">        1，SQL map文件</span></span><br><span class="line"><span class="comment">        2，生成一个主键类；</span></span><br><span class="line"><span class="comment">        3，除了BLOB和主键的其他字段的类；</span></span><br><span class="line"><span class="comment">        4，包含BLOB的类；</span></span><br><span class="line"><span class="comment">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span></span><br><span class="line"><span class="comment">        6，Mapper接口（可选）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        tableName（必要）：要生成对象的表名；</span></span><br><span class="line"><span class="comment">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span></span><br><span class="line"><span class="comment">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span></span><br><span class="line"><span class="comment">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span></span><br><span class="line"><span class="comment">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span></span><br><span class="line"><span class="comment">            4，否则，使用指定的大小写格式查询；</span></span><br><span class="line"><span class="comment">        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span></span><br><span class="line"><span class="comment">        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        可选：</span></span><br><span class="line"><span class="comment">        1，schema：数据库的schema；</span></span><br><span class="line"><span class="comment">        2，catalog：数据库的catalog；</span></span><br><span class="line"><span class="comment">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span></span><br><span class="line"><span class="comment">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        5，enableInsert（默认true）：指定是否生成insert语句；</span></span><br><span class="line"><span class="comment">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span></span><br><span class="line"><span class="comment">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span></span><br><span class="line"><span class="comment">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span></span><br><span class="line"><span class="comment">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span></span><br><span class="line"><span class="comment">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span></span><br><span class="line"><span class="comment">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span></span><br><span class="line"><span class="comment">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span></span><br><span class="line"><span class="comment">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span></span><br><span class="line"><span class="comment">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span></span><br><span class="line"><span class="comment">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userinfo"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></span><br><span class="line"><span class="comment">        &lt;property name="rootClass" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeCatalog" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeSchema" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeTableName" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></span><br><span class="line"><span class="comment">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"selectAllOrderByClause"</span> <span class="attr">value</span>=<span class="string">"age desc,username asc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">            column:主键的列名；</span></span><br><span class="line"><span class="comment">            sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</span></span><br><span class="line"><span class="comment">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性</span></span><br><span class="line"><span class="comment">        &lt;generatedKey column="" sqlStatement=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span></span><br><span class="line"><span class="comment">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span></span><br><span class="line"><span class="comment">            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span></span><br><span class="line"><span class="comment">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">            如果使用了columnOverride元素，该属性无效；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;columnRenamingRule searchString="" replaceString=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></span><br><span class="line"><span class="comment">             column:要重新设置的列名；</span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个columnOverride元素哈~</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">value</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></span><br><span class="line"><span class="comment">             &lt;property name="javaType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></span><br><span class="line"><span class="comment">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">             &lt;property name="delimitedColumnName" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></span><br><span class="line"><span class="comment">             column:指定要忽略的列的名字；</span></span><br><span class="line"><span class="comment">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-执行"><a href="#3-执行" class="headerlink" title="3.执行"></a>3.执行</h2><p>命令行界面<code>mvn mybatis-generator:generate</code></p>
<h1 id="Mybatis-plugin插件"><a href="#Mybatis-plugin插件" class="headerlink" title="Mybatis-plugin插件"></a>Mybatis-plugin插件</h1><p><a href="https://github.com/rockjava/intellij-mybatis-plugin" target="_blank" rel="noopener">mybatis-plugin插件详情</a></p>
<h2 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a>1.特点：</h2><ul>
<li>提供Mapper接口与配置文件中对应SQL的导航</li>
<li>编辑XML文件时自动补全</li>
<li>自动检查Mapper XML文件中ID冲突</li>
<li>自动检查Mapper XML文件中错误的属性值</li>
<li>等等</li>
</ul>
<h2 id="2-个人推荐"><a href="#2-个人推荐" class="headerlink" title="2.个人推荐"></a>2.个人推荐</h2><p>mybatis-plugin是需要购买授权的，这里我推荐MyBatisX</p>
<p><img src="/images/2020111904.png" alt="image-20201119203540933"></p>
<h1 id="Mybatis-PageHelper"><a href="#Mybatis-PageHelper" class="headerlink" title="Mybatis-PageHelper"></a>Mybatis-PageHelper</h1><p>开源网站：<a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.13&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://liuurick.github.io/2020/10/25/SpringBoot集成MyBatis的分页插件PageHelper/" target="_blank" rel="noopener">Mybatis-PageHelper个人博客记录</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>ORM框架</category>
      </categories>
      <tags>
        <tag>Mybatis-generator</tag>
        <tag>Mybatis-plugin</tag>
        <tag>Mybatis-PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型详解</title>
    <url>/2020/12/27/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>从今天开始复习Java基础知识，泛型是JavaSE中一个很重要的知识点，这里写一篇文档，强化自己的记忆。</p>
<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>泛型就这么简单:<a href="https://segmentfault.com/a/1190000014120746" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014120746</a></p>
<p>java 泛型详解:<a href="https://blog.csdn.net/s10461/article/details/53941091" target="_blank" rel="noopener">https://blog.csdn.net/s10461/article/details/53941091</a></p>
</blockquote>
<h1 id="1-泛型概念"><a href="#1-泛型概念" class="headerlink" title="1 泛型概念"></a>1 泛型概念</h1><blockquote>
<p><strong>Java泛型设计原则：只要在编译时期没有出现警告，那么运行时期就不会出现ClassCastException异常</strong>.</p>
<p>泛型：<strong>把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型</strong></p>
</blockquote>
<p><strong>让数据类型变得参数化</strong>，也就是所操作的数据类型被指定为一个参数</p>
<ul>
<li>定义泛型时，对应的数据类型是不确定的</li>
<li>泛型方法被调用时，会指定具体类型</li>
<li>核心目标：解决容器类型在编译时安全检查的问题</li>
</ul>
<p>泛型优点：</p>
<ul>
<li>类型安全</li>
<li>消除了强制类型的转换</li>
</ul>
<p>demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List ls = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ls.add(<span class="string">"hello"</span>);</span><br><span class="line">        ls.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ls.size(); i++) &#123;</span><br><span class="line">            String item = (String) ls.get(i);</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错如下：</p>
<p><img src="/images/2020122101.png" alt="image-20201221104504502"></p>
<p>这个类型转换的错误在运行期才报出来，显然是不符合我们的预期，应该在编译器就应该解决掉。</p>
<p>设置List容器的类型，就可以解决上面的问题</p>
<p><img src="/images/2020122102.png" alt="image-20201221104807273"></p>
<h1 id="2-泛型基础"><a href="#2-泛型基础" class="headerlink" title="2 泛型基础"></a>2 泛型基础</h1><h2 id="1-泛型类"><a href="#1-泛型类" class="headerlink" title="1.泛型类"></a>1.泛型类</h2><ul>
<li>泛型类的定义语法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名称&lt;泛型标识 : 可以随便写任意标识号 , 标识指定的泛型的类型&gt;&#123;</span><br><span class="line">	修饰符 泛型标识 <span class="comment">/* (成员变量类型) */</span></span><br><span class="line">	修饰符 构造函数(泛型标识 参数)</span><br><span class="line">	......</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>常用的泛型标识：<code>T、E、K、V</code></p>
<ul>
<li>E - Element (在集合中使用，因为集合中存放的是元素)</li>
<li>T - Type（表示Java 类，包括基本的类和我们自定义的类）</li>
<li>K - Key（表示键，比如Map中的key）</li>
<li>V - Value（表示值）</li>
<li>N - Number（表示数值类型）</li>
<li>？ - （表示不确定的java类型）</li>
<li>S、U、V - 2nd、3rd、4th types</li>
</ul>
</li>
<li><p>使用语法：</p>
<p><code>类名&lt;具体的数据类型&gt; 对象名 = new 类名&lt;具体的数据类型&gt;();</code></p>
</li>
<li><p>Java7以后，后面的&lt;&gt;中的具体的数据类型可以省略不写</p>
<p><code>类名&lt;具体的数据类型&gt; 对象名 = new 类名&lt;&gt;();</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//member这个成员变量的类型为T，T的类型由外部指定</span></span><br><span class="line">    <span class="keyword">private</span> T member;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//泛型构造方法形参member的类型也为T，T的类型由外部指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericClassExample</span><span class="params">(T member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// member的get set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">handleSomething</span><span class="params">(T target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//泛型类中是可以定义正常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayhello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+ name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020122103.png" alt="image-20201221111507121"></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作</p>
</li>
<li><p>泛型参数不支持基本类型，只能是类类型</p>
<p><img src="/images/2020122104.png" alt="image-20201221113906058"></p>
</li>
<li><p>泛型相关的信息不会进入到运行时阶段</p>
<p><img src="/images/2020122105.png" alt="image-20201221114453417"></p>
</li>
<li><p>同一泛型类，根据不同数据类型创建对象，本质是同一类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类的定义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 泛型标识-类型形参</span></span><br><span class="line"><span class="comment"> *           T 创建对象的时候指定具体的数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * T，是由外部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GenericDemo&#123;"</span> +</span><br><span class="line">                <span class="string">"key="</span> + key +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Generic&lt;String&gt; stringGeneric &#x3D; new Generic&lt;&gt;(&quot;hello&quot;);</span><br><span class="line">        Generic&lt;Integer&gt; integerGeneric &#x3D; new Generic(100);</span><br><span class="line"></span><br><span class="line">        System.out.println(stringGeneric.getClass());</span><br><span class="line">        System.out.println(integerGeneric.getClass());</span><br><span class="line"></span><br><span class="line">        System.out.println(stringGeneric.getClass() &#x3D;&#x3D; integerGeneric.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020122107.png" alt="image-20210102213439918"></p>
</li>
</ul>
<h2 id="2-泛型类派生子类"><a href="#2-泛型类派生子类" class="headerlink" title="2.泛型类派生子类"></a>2.泛型类派生子类</h2><ul>
<li><p>子类也是泛型类，子类和父类的泛型类型要一致</p>
<p><code>class ChildGeneric&lt;T&gt; extends Generic&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类派生子类，子类也是泛型类，那么子类的泛型标识要和父类一致。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildFirst</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Parent</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>子类不是泛型类，父类要明确泛型的数据类型</p>
<p><code>class ChildGeneric extends Generic&lt;String&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型类派生子类，如果子类不是泛型类，那么父类要明确数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildSecond</span> <span class="keyword">extends</span> <span class="title">Parent</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








</li>
</ul>
<h2 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3.泛型接口"></a>3.泛型接口</h2><blockquote>
<p>泛型接口与泛型类的用法基本相同，常用于数据类型的生产工厂接口中</p>
</blockquote>
<p><strong>定义方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 接口名称 &lt;泛型标识，泛型标识，…&gt; </span>&#123;</span><br><span class="line">	泛型标识 方法名(); </span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>泛型接口的使用</strong>：</p>
<ul>
<li>实现类也是泛型类，实现类和接口的泛型类型要一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型接口的实现类，是一个泛型类，</span></span><br><span class="line"><span class="comment"> * 那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>,<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="keyword">private</span> E value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T key, E value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现类不是泛型类，接口要明确数据类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello generic"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-泛型方法"><a href="#4-泛型方法" class="headerlink" title="4.泛型方法"></a>4.泛型方法</h2><blockquote>
<p>泛型方法，是在调用方法的时候指明泛型的具体类型。</p>
<p>泛型方法既能用在泛型类、泛型接口里，也能用在普通类或者接口里</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;T，E, ...&gt; 返回值类型 方法名(形参列表) &#123; </span><br><span class="line">	方法体... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>public与返回值中间<code>&lt;T&gt;</code>非常重要，可以理解为声明此方法为泛型方法。</li>
<li>只有声明了<code>&lt;T&gt;</code>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</li>
<li><code>&lt;T&gt;</code>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</li>
<li>与泛型类的定义一样，此处<code>T</code>可以随便写为任意标识，常见的如<code>T、E、K、V</code>等形式的参数常用于表示泛型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericFruit</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"fruit"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"apple"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Person"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GenerateTest</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_1</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span></span><br><span class="line">        <span class="comment">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span></span><br><span class="line">        <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_3</span><span class="params">(E t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show_2</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">            System.out.println(t.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        GenerateTest&lt;Fruit&gt; generateTest = <span class="keyword">new</span> GenerateTest&lt;Fruit&gt;();</span><br><span class="line">        <span class="comment">//apple是Fruit的子类，所以这里可以</span></span><br><span class="line">        generateTest.show_1(apple);</span><br><span class="line">        <span class="comment">//编译器会报错，因为泛型类型实参指定的是Fruit，而传入的实参类是Person</span></span><br><span class="line">        <span class="comment">//generateTest.show_1(person);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法都可以成功</span></span><br><span class="line">        generateTest.show_2(apple);</span><br><span class="line">        generateTest.show_2(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用这两个方法也都可以成功</span></span><br><span class="line">        generateTest.show_3(apple);</span><br><span class="line">        generateTest.show_3(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>泛型方法与可变参数:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(E... e)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (E e1 : e) &#123;</span><br><span class="line">		System.out.println(e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型方法和可变参数的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printMsg</span><span class="params">( T... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(T t : args)&#123;</span><br><span class="line">        Log.d(<span class="string">"泛型测试"</span>,<span class="string">"t is "</span> + t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printMsg(&quot;111&quot;,222,&quot;aaaa&quot;,&quot;2323.4&quot;,55.55);</span><br></pre></td></tr></table></figure>



<p><strong>静态方法与泛型</strong></p>
<p>静态方法有一种情况需要注意一下，那就是在类中的静态方法使用泛型：<strong>静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。</strong></p>
<p>即：<strong>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticGenerator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class="line"><span class="comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class="line"><span class="comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class="line"><span class="comment">          "StaticGenerator cannot be refrenced from static context"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>泛型方法总结</strong></p>
<p>泛型方法能使方法独立于类而产生变化，以下是一个基本的指导原则：</p>
<blockquote>
<p>无论何时，如果你能做到，你就该尽量使用泛型方法。也就是说，如果使用泛型方法将整个类泛型化，那么就应该使用泛型方法。另外对于一个static的方法而已，无法访问泛型类型的参数。所以如果static方法要使用泛型能力，就必须使其成为泛型方法。</p>
</blockquote>
<h2 id="5-泛型通配符"><a href="#5-泛型通配符" class="headerlink" title="5.泛型通配符"></a>5.泛型通配符</h2><blockquote>
<p>能否在泛型里面使用具备继承关系的类?</p>
<p>不能使用</p>
<ul>
<li>使用通配符？，但是会使得泛型的类型检查失去意义</li>
<li>给泛型加入上边界 <code>? extends E</code></li>
<li>给泛型加入下边界 <code>? super E</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleMember</span><span class="params">(GenericClassExample&lt;?&gt; integerGenericClassExample)</span></span>&#123;</span><br><span class="line">        Integer result = <span class="number">111</span> + (Integer)integerGenericClassExample.getMember();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericClassExample&lt;String&gt; stringGE = <span class="keyword">new</span> GenericClassExample&lt;String&gt;(<span class="string">"hello"</span>);</span><br><span class="line">        GenericClassExample&lt;Number&gt; integerGE = <span class="keyword">new</span> GenericClassExample&lt;Number&gt;(<span class="number">123</span>);</span><br><span class="line">        System.out.println(stringGE.getMember().getClass());</span><br><span class="line">        System.out.println(integerGE.getMember().getClass());</span><br><span class="line">        System.out.println(stringGE.sayhello(<span class="string">"liubin"</span>));</span><br><span class="line"></span><br><span class="line">        handleMember(integerGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-类型擦除"><a href="#6-类型擦除" class="headerlink" title="6.类型擦除"></a>6.类型擦除</h2><p><strong>概念:</strong></p>
<p>泛型是Java 1.5版本才引进的概念，在这之前是没有泛型的，但是泛型代码能够很好地和之前版本的代码兼容。那是因为，泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉，我们称之为–类型擦除。</p>
<p><strong>分类：</strong></p>
<ul>
<li>无限制类型擦除<br><img src="/images/2020122108.png" alt="image-20210103145023407"></li>
<li>有限制类型擦除<br><img src="/images/2020122109.png" alt="image-20210103145059877">擦除方法中类型定义的参数<br><img src="/images/2020122110.png" alt="在这里插入图片描述"></li>
<li>桥接方法<br><img src="/images/2020122111.png" alt="在这里插入图片描述"></li>
</ul>
<h2 id="7-泛型和数组"><a href="#7-泛型和数组" class="headerlink" title="7.泛型和数组"></a>7.泛型和数组</h2><p><strong>泛型数组的创建</strong></p>
<ul>
<li>可以声明带泛型的数组引用，但是不能直接创建带泛型的数组对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt;[] listArr = <span class="keyword">new</span> ArrayList&lt;<span class="number">5</span>&gt;(); <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure>

<p>会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList[] list = <span class="keyword">new</span> ArrayList[<span class="number">5</span>];</span><br><span class="line">ArrayList&lt;String&gt;[] listArr = list;</span><br><span class="line">或者</span><br><span class="line">ArrayList&lt;String&gt;[] listArr = <span class="keyword">new</span> ArrayList[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>不会报错</p>
<ul>
<li>可以通过java.lang.reflect.Array的newInstance(Class,int)创建T[]数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(Class&lt;T&gt; clz, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过Array.newInstance创建泛型数组</span></span><br><span class="line">        array = (T[])Array.newInstance(clz, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-泛型和反射"><a href="#8-泛型和反射" class="headerlink" title="8.泛型和反射"></a>8.泛型和反射</h2><ul>
<li>反射常用的泛型类<br>Class<br>Constructor</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型与反射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	     Class&lt;Person&gt; personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	     Constructor&lt;Person&gt; constructor = personClass.getConstructor();</span><br><span class="line">	     Person person = constructor.newInstance();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中count(字段) ，count(主键 id) ，count(1)和count(*)的区别</title>
    <url>/2020/11/18/MySQL%E4%B8%ADcount-%E5%AD%97%E6%AE%B5-%EF%BC%8Ccount-%E4%B8%BB%E9%94%AE-id-%EF%BC%8Ccount-1-%E5%92%8Ccount-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><strong>注：下面的讨论和结论是基于 InnoDB 引擎的。</strong></p>
<a id="more"></a>

<blockquote>
<p>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）</p>
</blockquote>
<p>count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p>
<p>所以，count(*)、count(1)和count(主键 id) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p>
<p>至于分析性能差别的时候，记住这么几个原则：</p>
<ul>
<li>server 层要什么就给什么；</li>
<li>InnoDB 只给必要的值；</li>
<li>现在的优化器只优化了 count(*) 的语义为“取行数”，其他“显而易见”的优化并没有做。</li>
</ul>
<p><strong>count(可空字段)</strong></p>
<p>扫描全表，读到server层，判断字段可空，拿出该字段所有值，判断每一个值是否为空，不为空则累加</p>
<p><strong>count(非空字段)与count(主键 id)</strong></p>
<p>扫描全表，读到server层，判断字段不可空，按行累加。</p>
<p><strong>count(1)</strong></p>
<p>扫描全表，但不取值，server层收到的每一行都是1，判断不可能是null，按值累加。</p>
<p><strong>注意：</strong>count(1)执行速度比count(主键 id)快的原因：从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p>
<p><strong>count(*)</strong></p>
<p>MySQL 执行count(<em>)在优化器做了专门优化。因为count(</em>)返回的行一定不是空。扫描全表，但是不取值，按行累加。</p>
<blockquote>
<p>看到这里，你会说优化器就不能自己判断一下吗，主键 id 肯定是非空的，为什么不能按照 count(<em>) 来处理，多么简单的优化。当然 MySQL 专门针对这个语句进行优化也不是不可以。但是这种需要专门优化的情况太多了，而且 MySQL 已经优化过 count(</em>) 了，你直接使用这种语句就可以了。</p>
</blockquote>
<p><strong>性能对比结论</strong></p>
<p><strong>count(可空字段) &lt; count(非空字段) = count(主键 id) &lt; count(1) ≈ count(*)</strong></p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis二级缓存的一个小细节</title>
    <url>/2020/10/23/MyBatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>记录一个小细节</p>
<a id="more"></a>

<p>​    Mybatis的一级缓存是SqlSession级别的缓存，当在同一个SqlSession中执行两次相同的SQL语句时，会将第一次执行查询的数据存入一级缓存中，第二次查询时会从缓存中获取数据，而不用再去数据库中查询，从而提高了查询性能。</p>
<p>​    Mybatis的二级缓存是mapper级别的缓存，多个SqlSession共用二级缓存，他们使用的同一个mapper的SQL语句操作数据库，获得的会存放在二级缓存中。</p>
<p>Mybatis默认没有开启二级缓存，需要在Mybatis的配置文件mybatis-config.xml中开启，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>settings元素要放在properties元素之后，typeAliases元素之前，否则配置文件会报错。</code></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>ORM框架</category>
      </categories>
      <tags>
        <tag>MyBatis缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2018/06/18/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>mysql基础</p>
<a id="more"></a>

<blockquote>
<p><a href="https://www.cnblogs.com/lms520/p/5427685.html" target="_blank" rel="noopener">https://www.cnblogs.com/lms520/p/5427685.html</a></p>
</blockquote>
<h1 id="1-课前准备！"><a href="#1-课前准备！" class="headerlink" title="1.课前准备！"></a>1.课前准备！</h1><p>开启mysql服务：1).配置环境变量;2).net start mysql</p>
<p>将该sql文件导入到你的数据库中，以下所有操作都是基于该数据库表操作的！！！</p>
<p>建表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods (</span><br><span class="line">  goods_id mediumint(<span class="number">8</span>) <span class="keyword">unsigned</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">  goods_name <span class="built_in">varchar</span>(<span class="number">120</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  cat_id <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span>,</span><br><span class="line">  brand_id <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span>,</span><br><span class="line">  goods_sn <span class="built_in">char</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  goods_number <span class="built_in">smallint</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span>,</span><br><span class="line">  shop_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0.00'</span>,</span><br><span class="line">  market_price <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0.00'</span>,</span><br><span class="line">  click_count <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'0'</span></span><br><span class="line">) <span class="keyword">engine</span>=myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`goods`</span> <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'kd876'</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="string">'ecs000000'</span>,<span class="number">1</span>,<span class="number">1388.00</span>,<span class="number">1665.60</span>,<span class="number">9</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'诺基亚n85原装充电器'</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="string">'ecs000004'</span>,<span class="number">17</span>,<span class="number">58.00</span>,<span class="number">69.60</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'诺基亚原装5800耳机'</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="string">'ecs000002'</span>,<span class="number">24</span>,<span class="number">68.00</span>,<span class="number">81.60</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'索爱原装m2卡读卡器'</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="string">'ecs000005'</span>,<span class="number">8</span>,<span class="number">20.00</span>,<span class="number">24.00</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'胜创kingmax内存卡'</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="string">'ecs000006'</span>,<span class="number">15</span>,<span class="number">42.00</span>,<span class="number">50.40</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">'诺基亚n85原装立体声耳机hs-82'</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="string">'ecs000007'</span>,<span class="number">20</span>,<span class="number">100.00</span>,<span class="number">120.00</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'飞利浦9@9v'</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'ecs000008'</span>,<span class="number">1</span>,<span class="number">399.00</span>,<span class="number">478.79</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">'诺基亚e66'</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'ecs000009'</span>,<span class="number">4</span>,<span class="number">2298.00</span>,<span class="number">2757.60</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">'索爱c702c'</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="string">'ecs000010'</span>,<span class="number">7</span>,<span class="number">1328.00</span>,<span class="number">1593.60</span>,<span class="number">11</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">'索爱c702c'</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="string">'ecs000011'</span>,<span class="number">1</span>,<span class="number">1300.00</span>,<span class="number">0.00</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">'摩托罗拉a810'</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="string">'ecs000012'</span>,<span class="number">8</span>,<span class="number">983.00</span>,<span class="number">1179.60</span>,<span class="number">13</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">'诺基亚5320 xpressmusic'</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'ecs000013'</span>,<span class="number">8</span>,<span class="number">1311.00</span>,<span class="number">1573.20</span>,<span class="number">13</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">'诺基亚5800xm'</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="string">'ecs000014'</span>,<span class="number">1</span>,<span class="number">2625.00</span>,<span class="number">3150.00</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">'摩托罗拉a810'</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="string">'ecs000015'</span>,<span class="number">3</span>,<span class="number">788.00</span>,<span class="number">945.60</span>,<span class="number">8</span>),</span><br><span class="line">(<span class="number">16</span>,<span class="string">'恒基伟业g101'</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="string">'ecs000016'</span>,<span class="number">0</span>,<span class="number">823.33</span>,<span class="number">988.00</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">17</span>,<span class="string">'夏新n7'</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="string">'ecs000017'</span>,<span class="number">1</span>,<span class="number">2300.00</span>,<span class="number">2760.00</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">18</span>,<span class="string">'夏新t5'</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'ecs000018'</span>,<span class="number">1</span>,<span class="number">2878.00</span>,<span class="number">3453.60</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">19</span>,<span class="string">'三星sgh-f258'</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="string">'ecs000019'</span>,<span class="number">12</span>,<span class="number">858.00</span>,<span class="number">1029.60</span>,<span class="number">7</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="string">'三星bc01'</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="string">'ecs000020'</span>,<span class="number">12</span>,<span class="number">280.00</span>,<span class="number">336.00</span>,<span class="number">14</span>),</span><br><span class="line">(<span class="number">21</span>,<span class="string">'金立 a30'</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="string">'ecs000021'</span>,<span class="number">40</span>,<span class="number">2000.00</span>,<span class="number">2400.00</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">22</span>,<span class="string">'多普达touch hd'</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">'ecs000022'</span>,<span class="number">1</span>,<span class="number">5999.00</span>,<span class="number">7198.80</span>,<span class="number">16</span>),</span><br><span class="line">(<span class="number">23</span>,<span class="string">'诺基亚n96'</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="string">'ecs000023'</span>,<span class="number">8</span>,<span class="number">3700.00</span>,<span class="number">4440.00</span>,<span class="number">17</span>),</span><br><span class="line">(<span class="number">24</span>,<span class="string">'p806'</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="string">'ecs000024'</span>,<span class="number">100</span>,<span class="number">2000.00</span>,<span class="number">2400.00</span>,<span class="number">35</span>),</span><br><span class="line">(<span class="number">25</span>,<span class="string">'小灵通/固话50元充值卡'</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="string">'ecs000025'</span>,<span class="number">2</span>,<span class="number">48.00</span>,<span class="number">57.59</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">26</span>,<span class="string">'小灵通/固话20元充值卡'</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="string">'ecs000026'</span>,<span class="number">2</span>,<span class="number">19.00</span>,<span class="number">22.80</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">27</span>,<span class="string">'联通100元充值卡'</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="string">'ecs000027'</span>,<span class="number">2</span>,<span class="number">95.00</span>,<span class="number">100.00</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">28</span>,<span class="string">'联通50元充值卡'</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="string">'ecs000028'</span>,<span class="number">0</span>,<span class="number">45.00</span>,<span class="number">50.00</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">29</span>,<span class="string">'移动100元充值卡'</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="string">'ecs000029'</span>,<span class="number">0</span>,<span class="number">90.00</span>,<span class="number">0.00</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">30</span>,<span class="string">'移动20元充值卡'</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="string">'ecs000030'</span>,<span class="number">9</span>,<span class="number">18.00</span>,<span class="number">21.00</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">31</span>,<span class="string">'摩托罗拉e8 '</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="string">'ecs000031'</span>,<span class="number">1</span>,<span class="number">1337.00</span>,<span class="number">1604.39</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">32</span>,<span class="string">'诺基亚n85'</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'ecs000032'</span>,<span class="number">4</span>,<span class="number">3010.00</span>,<span class="number">3612.00</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">category</span> (</span><br><span class="line">cat_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">cat_name <span class="built_in">varchar</span>(<span class="number">90</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">parent_id <span class="built_in">smallint</span> <span class="keyword">unsigned</span></span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`category`</span> <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'手机类型'</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'CDMA手机'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'GSM手机'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'3G手机'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'双模手机'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'手机配件'</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">'充电器'</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'耳机'</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">'电池'</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">'读卡器和内存卡'</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">'充值卡'</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">'小灵通/固话充值卡'</span>,<span class="number">12</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">'移动手机充值卡'</span>,<span class="number">12</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">'联通手机充值卡'</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`result`</span> (</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`subject`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`score`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">'张三'</span>,<span class="string">'数学'</span>,<span class="number">90</span>),</span><br><span class="line">(<span class="string">'张三'</span>,<span class="string">'语文'</span>,<span class="number">50</span>),</span><br><span class="line">(<span class="string">'张三'</span>,<span class="string">'地理'</span>,<span class="number">40</span>),</span><br><span class="line">(<span class="string">'李四'</span>,<span class="string">'语文'</span>,<span class="number">55</span>),</span><br><span class="line">(<span class="string">'李四'</span>,<span class="string">'政治'</span>,<span class="number">45</span>),</span><br><span class="line">(<span class="string">'王五'</span>,<span class="string">'政治'</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">char</span>(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">num</span> <span class="built_in">int</span></span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> a <span class="keyword">values</span> (<span class="string">'a'</span>,<span class="number">5</span>),(<span class="string">'b'</span>,<span class="number">10</span>),(<span class="string">'c'</span>,<span class="number">15</span>),(<span class="string">'d'</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> b (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">char</span>(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">num</span> <span class="built_in">int</span></span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> b <span class="keyword">values</span> (<span class="string">'b'</span>,<span class="number">5</span>),(<span class="string">'c'</span>,<span class="number">15</span>),(<span class="string">'d'</span>,<span class="number">20</span>),(<span class="string">'e'</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> m(</span><br><span class="line">     <span class="keyword">mid</span> <span class="built_in">int</span>,</span><br><span class="line">     hid <span class="built_in">int</span>,</span><br><span class="line">     gid <span class="built_in">int</span>,</span><br><span class="line">     mres <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">     matime <span class="built_in">date</span></span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t (</span><br><span class="line">     tid <span class="built_in">int</span>,</span><br><span class="line">     tname <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> m</span><br><span class="line">     <span class="keyword">values</span></span><br><span class="line">     (<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'2:0'</span>,<span class="string">'2006-05-21'</span>),</span><br><span class="line">     (<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'1:2'</span>,<span class="string">'2006-06-21'</span>),</span><br><span class="line">     (<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'2:5'</span>,<span class="string">'2006-06-25'</span>),</span><br><span class="line">     (<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">'3:2'</span>,<span class="string">'2006-07-21'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t</span><br><span class="line">     <span class="keyword">values</span></span><br><span class="line">     (<span class="number">1</span>,<span class="string">'国安'</span>),</span><br><span class="line">     (<span class="number">2</span>,<span class="string">'申花'</span>),</span><br><span class="line">     (<span class="number">3</span>,<span class="string">'布尔联队'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mian ( <span class="keyword">num</span> <span class="built_in">int</span>) <span class="keyword">engine</span> myisam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mian <span class="keyword">values</span></span><br><span class="line">(<span class="number">3</span>),</span><br><span class="line">(<span class="number">12</span>),</span><br><span class="line">(<span class="number">15</span>),</span><br><span class="line">(<span class="number">25</span>),</span><br><span class="line">(<span class="number">23</span>),</span><br><span class="line">(<span class="number">29</span>),</span><br><span class="line">(<span class="number">34</span>),</span><br><span class="line">(<span class="number">37</span>),</span><br><span class="line">(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">uid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">age <span class="built_in">smallint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">) <span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> boy (</span><br><span class="line">    hid <span class="built_in">char</span>(<span class="number">1</span>),</span><br><span class="line">     bname <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> boy (bname,hid)</span><br><span class="line">     <span class="keyword">values</span></span><br><span class="line">     (<span class="string">'屌丝'</span>,<span class="string">'A'</span>),</span><br><span class="line">     (<span class="string">'杨过'</span>,<span class="string">'B'</span>),</span><br><span class="line">     (<span class="string">'陈冠希'</span>,<span class="string">'C'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> girl (</span><br><span class="line">    hid <span class="built_in">char</span>(<span class="number">1</span>),</span><br><span class="line">     gname <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">     )<span class="keyword">engine</span> myisam <span class="keyword">charset</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> girl(gname,hid)</span><br><span class="line">     <span class="keyword">values</span></span><br><span class="line">     (<span class="string">'小龙女'</span>,<span class="string">'B'</span>),</span><br><span class="line">     (<span class="string">'张柏芝'</span>,<span class="string">'C'</span>),</span><br><span class="line">     (<span class="string">'死宅女'</span>,<span class="string">'D'</span>);</span><br></pre></td></tr></table></figure>



<p><strong>1.数据库查询的重要思想:将查询的结果集当成一张新关系二维”表”</strong></p>
<p><strong>2.数据表==&gt;二维多列的一个表结构</strong></p>
<p><strong>注意</strong>：此处只是告诉你一些在校期间MySQL需要掌握的知识！但是如何用PHP来操作这些知识，需要不断练习</p>
<h2 id="1-1-数据库–客户端"><a href="#1-1-数据库–客户端" class="headerlink" title="1.1 数据库–客户端"></a>1.1 数据库–客户端</h2><p><strong>mysqld –服务器端==&gt;安装mysql之后，内存中就有这个这个服务了!</strong></p>
<p>mysql – 客户端 ==&gt;连通服务所使用的软件 <code>mysql -h localhost -uroot -p</code> ==&gt;客户端有很多【例如:网络服务(服务器端)==浏览器(IE/Firefox)】</p>
<p>表==(多个表)===&gt;数据库===(多个数据库)==&gt;数据库服务 </p>
<h2 id="1-2-phpmyadmin允许空密码登录配置"><a href="#1-2-phpmyadmin允许空密码登录配置" class="headerlink" title="1.2 phpmyadmin允许空密码登录配置"></a>1.2 phpmyadmin允许空密码登录配置</h2><p>==&gt;config.sample.inc.php–&gt;复制(config.inc.php)==&gt;$cfg[‘Servers’][$i][‘AllowNoPassword’] = true;</p>
<h2 id="1-3-什么是SQL-Structured-Query-Language-结构查询语句"><a href="#1-3-什么是SQL-Structured-Query-Language-结构查询语句" class="headerlink" title="1.3 什么是SQL(Structured Query Language) 结构查询语句"></a>1.3 什么是SQL(Structured Query Language) 结构查询语句</h2><p>—–SQL语句是一种what型语言【想要什么，给你】，而非how语言【要我怎么做才能给你】–php….编程语言</p>
<h2 id="1-4-SQL语言分类"><a href="#1-4-SQL语言分类" class="headerlink" title="1.4 SQL语言分类:"></a>1.4 SQL语言分类:</h2><p>1)DML is Data Manipulation Languages statements .Some examples:数据库操作语言，SQL中处理数据【使用者角度–接触率占据80%】–相当于”员工” </p>
<p>2)DDLis Data Definition Language statements.Some example:数据定义语言，用于定义管理SQL数据库中所有对象–建表，建库，建视图….等【建设的角度–接触率15%】–相当于”总经理” </p>
<p>3)DCL is Data Control Language statements.Some example:数据控制语言，用于授予或回收访问数据库的某种权限，并控制数据库操作事务发生的时间及效果，对数据库实行监视…等【管理者角度–接触率5%】—相当于”董事长”</p>
<h2 id="1-5-我常用的表操作语句"><a href="#1-5-我常用的表操作语句" class="headerlink" title="1.5 我常用的表操作语句:"></a>1.5 我常用的表操作语句:</h2><ol>
<li><p>mysql -h localhost -uroot -p123456 – 以root用户连接本地数据库</p>
</li>
<li><p>show databases; – 查看MySQL服务中所有的数据库</p>
</li>
<li><p>use database; – 更改操作的数据库对象</p>
</li>
<li><p>c –取消执行当前未输入mysql语句</p>
</li>
<li><p>show tables; – 查看该操作数据库对象中所有的数据表名和视图名</p>
</li>
<li><p>desc table_name/view_name;–查看表/视图结构；</p>
</li>
<li><p>truncate table_name; –清空表数据【表结构依然不变】– 和delete from table_name;是不同的</p>
</li>
<li><p>show create table table_name/view; –查看建表/视图过程</p>
</li>
<li><p>show table status [\G]; – 查看数据库中所有表信息【\G:以竖行显示信息】</p>
</li>
<li><p>show table status where name = table_name [\G]; – 查看数据库中指定表信息【\G:以竖行显示信息】</p>
</li>
<li><p>rename table_name; –改表名</p>
</li>
<li><p>drop table table_name; –删除表</p>
</li>
<li><p>drop view view_name; – 删除视图</p>
</li>
</ol>
<h1 id="2-SQL语言之DML部分-数据库操作语言【搬运数据】–”员工”"><a href="#2-SQL语言之DML部分-数据库操作语言【搬运数据】–”员工”" class="headerlink" title="2 SQL语言之DML部分@数据库操作语言【搬运数据】–”员工”"></a>2 SQL语言之DML部分@数据库操作语言【搬运数据】–”员工”</h1><h2 id="2-1-常用操作-增-insert-删-delete-改-update-查-select"><a href="#2-1-常用操作-增-insert-删-delete-改-update-查-select" class="headerlink" title="2.1 常用操作:增[insert] 删[delete] 改[update] 查[select]"></a>2.1 常用操作:增[insert] 删[delete] 改[update] 查[select]</h2><h3 id="1-INSERT"><a href="#1-INSERT" class="headerlink" title="1.INSERT:"></a>1.INSERT:</h3><p><code>insert into table_name (col1, col2,....) values (value1, value2,....)---</code><strong>“插入值”与”列”要一一对应</strong></p>
<h3 id="2-DELETE"><a href="#2-DELETE" class="headerlink" title="2.DELETE"></a>2.DELETE</h3><p><code>deletefrom表名where条件【不加条件删除整个表】--对于关系型数据库:”增&quot;和&quot;删&quot;都是相对整个一行数据来说的</code></p>
<h3 id="3-UPDATE"><a href="#3-UPDATE" class="headerlink" title="3.UPDATE"></a>3.UPDATE</h3><p><code>update 表名set列1=新值1,列2=新值2...where条件---修改指定列(修改所有就不用加where)</code></p>
<h3 id="4-★★★SELECT★★★"><a href="#4-★★★SELECT★★★" class="headerlink" title="4.★★★SELECT★★★"></a>4.★★★SELECT★★★</h3><p><code>select(列1,列2,列3,....)from表名where条件 limit 0,100;[时间函数：select uid,userid,username,email,FROM_UNIXTIME(addtime,&#39;%Y年%m月%d&#39;) from members]</code></p>
<p><strong>【更新和删除操作要注意:where条件记得要加，除非对生活心灰意冷了否则还是加上比较好–不加影响的将是整个表的数据】</strong></p>
<hr>
<ol>
<li><code>select的5种子句:</code></li>
<li><code>where子句；--条件查询</code></li>
<li><code>groupby子句；--分组查询</code></li>
<li><code>having 子句；--筛选查询</code></li>
<li><code>order by子句；--排序查询</code></li>
<li><code>limit 子句；--范围查询</code></li>
</ol>
<p><strong>5种子句写的时候要有严格的顺序：where | group by | having | order by | limit</strong></p>
<hr>
<h2 id="2-2-SELECT条件查询模型深入理解【重点】"><a href="#2-2-SELECT条件查询模型深入理解【重点】" class="headerlink" title="2.2 SELECT条件查询模型深入理解【重点】"></a>2.2 SELECT条件查询模型深入理解【重点】</h2><p><strong>====列是”变量”=====变量就可以计算=====</strong></p>
<p><strong>select uid, name, age+1 from user;–从user表中查找所有uid, name,age三列，并给age列所在值+1</strong></p>
<p><strong>==where是”表达式”==值为真【true】假【false】==</strong></p>
<p><strong>select * from user where id=5;–从user表中查找所有列，当id为5</strong></p>
<p><strong>【判断所在行id=5?==&gt;返回true则输出】</strong></p>
<p><strong>select * from user where 1;–从user表中查找所有列，当条件恒真–【输出所有】<br>select * from user where 0;–从user表中查找所有列，当条件恒假–【返回Empty】</strong></p>
<p><strong>select 语句还可以配合算数运算符、逻辑运算符和位运算符以及相关函数写出更高效率的查询语句</strong></p>
<p>【当然要注意运算符的优先级】</p>
<p>查询的实质：对磁盘上的数据文件进行查询得到结果集，并将结果集存放到内存中，其余就是对内存结果集的操作</p>
<h3 id="2-2-1-查询练习"><a href="#2-2-1-查询练习" class="headerlink" title="2.2.1 查询练习:"></a>2.2.1 查询练习:</h3><p>查询出第4和第11列的信息:<br>select goods_id, goods_name, shop_price from goods where goods_id =4 or goods_id=11;<br>select goods_id, goods_name, shop_price from goods where goods_id in(4,11);<br>查询出第4到第11列间的信息:<br>select goods_id, goods_name, shop_price from goods where goods_id&gt;4 and goods_id &lt; 11;<br>select goods_id, goods_name, shop_price from goods where goods_id between 4 and 11;</p>
<h4 id="模糊查询-like-–-通配任意字符-通配单一字符"><a href="#模糊查询-like-–-通配任意字符-通配单一字符" class="headerlink" title="模糊查询(like)–%通配任意字符; _ 通配单一字符"></a>模糊查询(like)–%通配任意字符; _ 通配单一字符</h4><p><strong>取出名字以”诺基亚”开头的商品<br>select goods_id,cat_id,goods_name,shop_price from e cs_goods where goods_name like ‘诺基亚%’;</strong></p>
<p><strong>取出名字为”诺基亚Nxx”的手机<br>select goods_id,cat_id,goods_name,shop_price from ecs_goods where goods_name like ‘诺基亚N__’;</strong></p>
<p><strong>取出名字不以”诺基亚”开头的商品</strong></p>
<p><strong>select goods_id,cat_id,goods_name,shop_price from ecs_goos where goods_name not like ‘诺基亚%’;</strong></p>
<p><strong>当涉及到多重条件查询需要用到运算符,and , or ,not,…之类的来修饰条件时候：<br>1)一定要先弄清楚条件之间的分类<br>2)使用( ) 将其分类–避免因为优先级问题</strong></p>
<hr>
<p><strong>一道关于查询的面试题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有如下表和数组</span><br><span class="line">把num值处于[20,29]之间,改为20:update main set num&#x3D;20 where num between 20 and 29;</span><br><span class="line">num值处于[30,39]之间的,改为30:mian表</span><br><span class="line">+------+</span><br><span class="line">| num |</span><br><span class="line">+------+</span><br><span class="line">| 3 |</span><br><span class="line">| 12 |</span><br><span class="line">| 15 |</span><br><span class="line">| 25 |</span><br><span class="line">| 23 |</span><br><span class="line">| 29 |</span><br><span class="line">| 34 |</span><br><span class="line">| 37 |</span><br><span class="line">| 32 |</span><br><span class="line">| 45 |</span><br><span class="line">| 48 |</span><br><span class="line">| 52 |</span><br><span class="line">+------+</span><br><span class="line">floor(X):返回一个不大于X的最大整数值</span><br><span class="line">update mian set num&#x3D;( floor(num&#x2F;10)*10 ) where num between 20 and 39;</span><br><span class="line"></span><br><span class="line">练习题:</span><br><span class="line">把good表中商品名为&#39;诺基亚xxxx&#39;的商品,改为&#39;HTCxxxx&#39;,</span><br><span class="line">提示:大胆的把列看成变量,参与运算,甚至调用函数来处理 .</span><br><span class="line">substring(),--concat()</span><br><span class="line">select goods_id, concat( &#39;LMS&#39;, substring(goods_name,4) ,shop_price from goods where goods_name like &#39;诺基亚%&#39;;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="奇怪的NULL查询"><a href="#奇怪的NULL查询" class="headerlink" title="奇怪的NULL查询"></a>奇怪的NULL查询</h4><p><strong>对于NULL=NULL==&gt;返回假;==&gt;NULL是什么都没有,所以不能比较！使用is null 才能查询<br>select * from user where name is not null –查询出user表中name字段不为空的信息<br>【对于数据表中，null不利于数据表优化操作，所以数据表中一般都对字段设置not null】</strong></p>
<hr>
<h4 id="GOUP-BY分组与统计函数"><a href="#GOUP-BY分组与统计函数" class="headerlink" title="GOUP BY分组与统计函数"></a>GOUP BY分组与统计函数</h4><p><strong>group by – 当出现group by分组中不能配对的情况，该字段取查询时候第一次出现的值<br>统计函数：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max()--最大值；</span><br><span class="line">min()--取最小值；</span><br><span class="line">avg()--求平均值;</span><br><span class="line">sum()--求和；</span><br><span class="line">count()--计算行数&#x2F;条数；</span><br><span class="line">distinct()--求有多少种不同解；</span><br></pre></td></tr></table></figure>

<p><strong>【时间是以时间戳的形式存放的，是int型，max() –最新商品; min() – 最旧商品】</strong></p>
<hr>
<h4 id="having筛选结果集"><a href="#having筛选结果集" class="headerlink" title="having筛选结果集"></a>having筛选结果集</h4><p><strong>1.查询goods表中商品比市场价低出多少？</strong><br><strong>select goods_id, goods_name,(market_price-shop_price) from goods</strong><br><strong>2.查询goods表中商品比市场价低出至少200的商品？</strong><br><strong>select goods_id, goods_name,(market_price-shop_price) from goods where (market_price - shop_price) &gt; 200;</strong><br><strong>error：查询goods表中商品比市场价低出至少200的商品？</strong><br><strong>select goods_id, goods_name,(market_price-shop_price) as ‘min’ from goods where min &gt; 200;</strong><br><strong>报错:不识别min这个列！</strong><br><strong>【where子句针对的对象是磁盘上的数据表文件去select的，而select出来后的数据是存放在内存中的一个零时”结果集”】</strong></p>
<p><strong>–因此：当使用where min &gt;200 ；去筛选结果集的时候是不能识别出min字段的</strong><br><strong>having–针对的对象是内存表结构中的”结果集”</strong><br><strong>3.查询goods表中商品比市场价低出至少200的商品？</strong><br><strong>select goods_id, goods_name,(market_price-shop_price) as ‘节省’ from goods where 1 having ‘节省’ &gt;200;</strong></p>
<p><strong>【如果同时写了where和having子句，where子句肯定要写在having子句前面，因为having子句是针对where子句查询出来的结果集来操作的】</strong> </p>
<hr>
<h5 id="★★★where-having-group综合练习题"><a href="#★★★where-having-group综合练习题" class="headerlink" title="★★★where-having-group综合练习题"></a>★★★where-having-group综合练习题</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">有如下表及数据</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| name | subject | score |</span><br><span class="line">+<span class="comment">------+---------+-------+</span></span><br><span class="line">| 张三 | 数学 | 90 |</span><br><span class="line">| 张三 | 语文 | 50 |</span><br><span class="line">| 张三 | 地理 | 40 |</span><br><span class="line">| 李四 | 语文 | 55 |</span><br><span class="line">| 李四 | 政治 | 45 |</span><br><span class="line">| 王五 | 政治 | 30 |</span><br><span class="line">+<span class="comment">------+---------+-------+要求:查询出2门及2门以上不及格者的平均成绩</span></span><br><span class="line"><span class="comment">## 一种错误做法【错在:对count和比较运算两者结合的理解错误】</span></span><br><span class="line">mysql&gt; select name,count(score &lt; 60) as k,avg(score) from stu group by name having k&gt;=2;</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| name | k | avg(score) |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| 张三 | 3 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">count</span>(score &lt; <span class="number">60</span>) <span class="keyword">as</span> k,<span class="keyword">avg</span>(score) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| name | k | avg(score) |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| 张三 | 3 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">| 王五 | 1 | 30.0000 |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">count</span>(score &lt; <span class="number">60</span>) <span class="keyword">as</span> k,<span class="keyword">avg</span>(score) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">having</span> k&gt;=<span class="number">2</span>;</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| name | k | avg(score) |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| 张三 | 3 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#加上赵六后错误暴露</span></span><br><span class="line">mysql&gt; <span class="keyword">insert</span> <span class="keyword">into</span> stu -&gt; <span class="keyword">values</span> -&gt; (<span class="string">'赵六'</span>,<span class="string">'A'</span>,<span class="number">100</span>), -&gt; (<span class="string">'赵六'</span>,<span class="string">'B'</span>,<span class="number">99</span>), -&gt; (<span class="string">'赵六'</span>,<span class="string">'C'</span>,<span class="number">98</span>);</span><br><span class="line">Query OK, 3 rows affected (0.05 sec)</span><br><span class="line">Records: 3 Duplicates: 0 Warnings: 0</span><br><span class="line"> </span><br><span class="line"><span class="comment">#错误显现</span></span><br><span class="line">mysql&gt; select name,count(score &lt; 60) as k,avg(score) from stu group by name having k&gt;=2;</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| name | k | avg(score) |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">| 张三 | 3 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">| 赵六 | 3 | 99.0000 |</span><br><span class="line">+<span class="comment">------+---+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">#正确思路,先查看每个人的平均成绩</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">avg</span>(score) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">| name | avg(score) |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">| 张三 | 60.0000 |</span><br><span class="line">| 李四 | 50.0000 |</span><br><span class="line">| 王五 | 30.0000 |</span><br><span class="line">| 赵六 | 99.0000 |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)mysql&gt; <span class="comment"># 1.看每个人挂科情况</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,score &lt; <span class="number">60</span> <span class="keyword">from</span> stu;</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">| name | score &lt; 60 |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">| 张三 | 0 |</span><br><span class="line">| 张三 | 1 |</span><br><span class="line">| 张三 | 1 |</span><br><span class="line">| 李四 | 1 |</span><br><span class="line">| 李四 | 1 |</span><br><span class="line">| 王五 | 1 |</span><br><span class="line">| 赵六 | 0 |</span><br><span class="line">| 赵六 | 0 |</span><br><span class="line">| 赵六 | 0 |</span><br><span class="line">+<span class="comment">------+------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">sum</span>(score &lt; <span class="number">60</span>) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>; <span class="comment">#2.计算每个人的挂科科目</span></span><br><span class="line">+<span class="comment">------+-----------------+</span></span><br><span class="line">| name | sum(score &lt; 60) |</span><br><span class="line">+<span class="comment">------+-----------------+</span></span><br><span class="line">| 张三 | 2 |</span><br><span class="line">| 李四 | 2 |</span><br><span class="line">| 王五 | 1 |</span><br><span class="line">| 赵六 | 0 |</span><br><span class="line">+<span class="comment">------+-----------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">sum</span>(score &lt; <span class="number">60</span>),<span class="keyword">avg</span>(score) <span class="keyword">as</span> pj <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;<span class="comment">#3.同时计算每人的平均分</span></span><br><span class="line">+<span class="comment">------+-----------------+---------+</span></span><br><span class="line">| name | sum(score &lt; 60) | pj |</span><br><span class="line">+<span class="comment">------+-----------------+---------+</span></span><br><span class="line">| 张三 | 2 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">| 王五 | 1 | 30.0000 |</span><br><span class="line">| 赵六 | 0 | 99.0000 |</span><br><span class="line">+<span class="comment">------+-----------------+---------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">sum</span>(score &lt; <span class="number">60</span>) <span class="keyword">as</span> gk ,<span class="keyword">avg</span>(score) <span class="keyword">as</span> pj <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">having</span> gk &gt;=<span class="number">2</span>;<span class="comment">#利用having筛选挂科2门以上的.</span></span><br><span class="line">+<span class="comment">------+------+---------+</span></span><br><span class="line">| name | gk | pj |</span><br><span class="line">+<span class="comment">------+------+---------+</span></span><br><span class="line">| 张三 | 2 | 60.0000 |</span><br><span class="line">| 李四 | 2 | 50.0000 |</span><br><span class="line">+<span class="comment">------+------+---------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>错误原因【以下几点】:</strong></p>
<p><strong>① score &lt; 60 ☛ 比较运算 ☛ 返回值:真(1)、假(0)<br>②count() ☛ 返回的结果是总行数 ☛ count(socre)和count( score &lt; 60 )得到结果是一样的<br>③对sum()和count()函数理解的不到位☛想要计算至少有2门课挂了的人，使用count()函数，结果是 ✘<br>④sum()和score&lt; 60 结合的理解:sum( score &lt; 60) &gt;=2 ==&gt;计算出至少挂了2门课的人</strong></p>
<hr>
<h4 id="order-by排序查询【在内存中排序】-与-limit范围查询【–经典应用-分页类】"><a href="#order-by排序查询【在内存中排序】-与-limit范围查询【–经典应用-分页类】" class="headerlink" title="order by排序查询【在内存中排序】 与 limit范围查询【–经典应用:分页类】"></a>order by排序查询【在内存中排序】 与 limit范围查询【–经典应用:分页类】</h4><p><strong>1:按价格由高到低排序<br>select goods_id,goods_name,shop_price from goods order by shop_price desc;<br>2:按发布时间由早到晚排序<br>select goods_id,goods_name,add_time from goods order by add_time;<br>3:接栏目由低到高排序,栏目内部按价格由高到低排序【有冲突时，顺序决定优先】<br>select goods_id,cat_id,goods_name,shop_price from goods order by cat_id ,shop_price desc;<br>4:取出价格最高的前三名商品<br>select goods_id,goods_name,shop_price from goods order by shop_price desc limit 3;<br>5:取出点击量前三名到前5名的商品<br>select goods_id,goods_name,click_count from goods order by click_count desc limit 2,3;</strong></p>
<hr>
<h4 id="子句的查询陷阱"><a href="#子句的查询陷阱" class="headerlink" title="子句的查询陷阱"></a>子句的查询陷阱</h4><p><strong>如何：查询goods表中，每个栏目(cat_id) 下最新(goods_id最大)的那件商品？</strong></p>
<p><strong>错误示范:【正确答案见下】<br>思路：1)最新的商品 – max(good_id)<br>2)每个栏目–group by cat_id<br>mysql&gt; select max(goods_id), goods_name, cat_id, shop_price from goods group by cat_id;</strong></p>
<p>+—————+———————–+——–+————+<br>| max(goods_id) | goods_name | cat_id | shop_price |<br>+—————+———————–+——–+————+<br>| 16 | 恒基伟业g101 | 2 | 823.33 |<br>| 32 | 飞利浦9@9v | 3 | 399.00 |</p>
<p><strong>除了数据goods_id对了其他 ✘</strong></p>
<p>| 18 | kd876 | 4 | 1388.00 |<br>| 23 | 诺基亚n96 | 5 | 3700.00 |<br>| 7 | 诺基亚n85原装充电器 | 8 | 58.00 |<br>| 6 | 索爱原装m2卡读卡器 | 11 | 20.00 |<br>| 26 | 小灵通/固话50元充值卡 | 13 | 48.00 |<br>| 30 | 移动100元充值卡 | 14 | 90.00 |<br>| 28 | 联通100元充值卡 | 15 | 95.00 |</p>
<p>+—————+———————–+——–+————+</p>
<p><strong>这里错在：“先查询在排序”==&gt;group by cat_id ,但goods_name, shop_price，我们应该取谁的呢？–解决思路:用到“子查询”/连接查询==&gt;先排序再查询</strong></p>
<hr>
<hr>
<h5 id="子查询-之-where子查询-以内层查询结果作为外层的比较条件"><a href="#子查询-之-where子查询-以内层查询结果作为外层的比较条件" class="headerlink" title="子查询 之 where子查询[以内层查询结果作为外层的比较条件]"></a>子查询 之 where子查询[以内层查询结果作为外层的比较条件]</h5><p><strong>1:查找出goods表中最新的那件商品信息?<br>思考问题：1.如何保证每次更新商品后，取得都是最新的呢？☛ 涉及到了”变量”☛”列”就是变量<br>2.查询的条件可以是个表达式☛但是表示得到的要是一个“明确”的量才可以查询<br>3.数据库查询☛”投影式”查询[要那列查那列,查的那列和其他列没关系]<br>–第3点典型错误: select max(goods_id), goods_name, shop_price from goods;–除了goods_id对,其余都是错的！这是个有语义缺陷的语句<br>子语句查询:select goods_id,goods_name,shop_price from goods where goods_id =<br>( select max(goods_id) from goods );<br>以查询select max( goods_id ) from user;的返回结果【存放在内存中，且无论如何该结果都是一个”定值”】作为对前方查询语句的条件</strong></p>
<p><strong>2.如何：查询goods表中，每个栏目(cat_id) 下最新(goods_id最大)的那件商品？</strong></p>
<p><strong>思路整理:(从上面的错误范例已可以得到正确思路==&gt;先”排序” 再”查询”)<br>1.排序==&gt;有题目可知,排序的变量应该是cat_id字段,通过排序找到每一个cat_id下中goods_id最大的那个商品ID号<br>2.查询==&gt;用排序得到的那个最大ID号作为条件表达式的对比条件，查找出商品信息</strong></p>
<p><strong>1.先”排序:”mysql&gt; select max(goods_id), cat_id, shop_price from goods group by cat_id;<br>+—————+——–+————+<br>| max(goods_id) | cat_id | shop_price |<br>+—————+——–+————+<br>| 16 | 2 | 823.33 |<br>| 32 | 3 | 399.00 |<br>| 18 | 4 | 1388.00 |<br>| 23 | 5 | 3700.00 |<br>| 7 | 8 | 58.00 |<br>| 6 | 11 | 20.00 |<br>| 26 | 13 | 48.00 |<br>| 30 | 14 | 90.00 |<br>| 28 | 15 | 95.00 |<br>+—————+——–+————+<br>9 rows in set (0.00 sec)<br>2.再”查询”:mysql&gt; select good_id, goods_name, shop_price from goods where goods_id in (select max(goods_id) from goods group by cat_id);</strong></p>
<p><strong>+———-+——————————+————+<br>| goods_id | goods_name | shop_price |<br>+———-+——————————+————+<br>| 6 | 胜创kingmax内存卡 | 42.00 |<br>| 7 | 诺基亚n85原装立体声耳机hs-82 | 100.00 |<br>| 16 | 恒基伟业g101 | 823.33 |<br>| 18 | 夏新t5 | 2878.00 |<br>| 23 | 诺基亚n96 | 3700.00 |<br>| 26 | 小灵通/固话20元充值卡 | 19.00 |<br>| 28 | 联通50元充值卡 | 45.00 |<br>| 30 | 移动20元充值卡 | 18.00 |<br>| 32 | 诺基亚n85 | 3010.00 |<br>+———-+——————————+————+</strong></p>
<p><strong>2.查询出编号为19的商品的栏目名称<a href="用左连接查询和子查询分别">栏目名称放在category表中</a></strong></p>
<p><strong>WHERE型子查询：<br>1.先找出外层条件的内层结果–goods表中第19号商品的cat_id：select cat_id from goods where goods_id = 19;<br>**</strong>2.查询:select cat_name from category where cat_id = ( se<strong>**lect cat_id from goods where goods_id = 19 );</strong></p>
<hr>
<h5 id="子查询-之-from子查询【将查询出来的结果集当成一个新”表”来操作】"><a href="#子查询-之-from子查询【将查询出来的结果集当成一个新”表”来操作】" class="headerlink" title="子查询 之 from子查询【将查询出来的结果集当成一个新”表”来操作】"></a>子查询 之 from子查询【将查询出来的结果集当成一个新”表”来操作】</h5><p><strong>2.如何：查询goods表中，每个栏目(cat_id) 下最新(goods_id最大)的那件商品？–使用from子查询</strong><br><strong>同样的思路==&gt;先排序再查询<br>排序：mysql&gt; select goods_id, goods_name, shop_price from order by cat_id asc, goods_id DESC;<br>得到一张优先按照cat_id升序,再goods_id降序的”表”—–同一个cat_id的商品，它在”表”里出现的位置是第一个<br>排序：mysql&gt; select goods_id, goods_name, shop_price from order by cat_id asc, goods_id DESC;<br>查询：mysql&gt; select goods_id, goods_name,shop_price from<br>(select goods_id,cat_id, goods_name, shop_price from goods order by cat_id ) as tmp<br>group by cat_id;</strong></p>
<hr>
<h5 id="子查询-之-exists子查询【”存在”】"><a href="#子查询-之-exists子查询【”存在”】" class="headerlink" title="子查询 之 exists子查询【”存在”】"></a>子查询 之 exists子查询【”存在”】</h5><p><strong>1.用exists型子查询，查出所有商品的栏目下有商品的栏目</strong><br>mysql&gt; <strong>select * from category where exists (select * from goods where goods.cat_id = category.cat_id);</strong><br>查找category这个表，如果select * from goods where goods.cat_id = category.cat_id这个”表”中对应的数据存在则查询+——–+——————-+———–+<br>| cat_id | cat_name | parent_id |<br>+——–+——————-+———–+<br>| 2 | CDMA手机 | 1 |<br>| 3 | GSM手机 | 1 |<br>| 4 | 3G手机 | 1 |<br>| 5 | 双模手机 | 1 |<br>| 8 | 耳机 | 6 |<br>| 11 | 读卡器和内存卡 | 6 |<br>| 13 | 小灵通/固话充值卡 | 12 |<br>| 14 | 移动手机充值卡 | 12 |<br>| 15 | 联通手机充值卡 | 12 |<br>+——–+——————-+———–+<br>9 rows in set (0.00 sec)</p>
<hr>
<hr>
<h4 id="内连接查询-inner-join-、左连接-left-join-、右连接-right-join"><a href="#内连接查询-inner-join-、左连接-left-join-、右连接-right-join" class="headerlink" title="内连接查询[inner join]、左连接[left join]、右连接[right join]"></a>内连接查询[inner join]、左连接[left join]、右连接[right join]</h4><p><strong>【MySQL中没有外连接】</strong></p>
<p><strong>详解：<a href="http://www.dedecms.com/knowledge/data-base/sql-server/2012/0709/2872.html" target="_blank" rel="noopener">http://www.dedecms.com/knowledge/data-base/sql-server/2012/0709/2872.html</a><br>内连接：select xxxx from table1 inner join table2 on table1.xx=table2.xx ☛ 交集<br>左连接：select xxxx from table1 left join table2 on table1.xx=table2.xx ☛ 左表为基础的查询<br>右连接：select xxxx from table1 right join table2 on table1.xx=table2.xx ☛ 右表为基础的查询</strong></p>
<p><strong>1.查询价格大于2000元的商品及其栏目名称<br>思路：<br>–涉及到两个表；–基础表为goods表,连接表为category表，条件为shop_price &gt; 2000<br>–goods表cat_id中的和category表中的cat_id对应<br>mysql &gt; select goods.goods_id, category.cat_name, goods.goods_name, goods.shop price from<br>- &gt; goods left join category<br>- &gt; on goods.cat_id = category.cat_id<br>- &gt; where goods.shop_price &gt; 2000;<br>2.取出第4个栏目下的商品的商品名,栏目名,与品牌名<br>select goods_name,cat_name,shop_price from goods left join category on goods.cat_id=category.cat_id where goods.cat_id = 4</strong></p>
<hr>
<h3 id="用友面试题"><a href="#用友面试题" class="headerlink" title="用友面试题"></a>用友面试题</h3><p><strong>根据给出的表结构按要求写出SQL语句。</strong></p>
<p>Match 赛程表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>matchID</td>
<td>int</td>
<td>主键</td>
</tr>
<tr>
<td>hostTeamID</td>
<td>int</td>
<td>主队的ID</td>
</tr>
<tr>
<td>guestTeamID</td>
<td>int</td>
<td>客队的ID</td>
</tr>
<tr>
<td>matchResult</td>
<td>varchar(20)</td>
<td>比赛结果，如（2:0）</td>
</tr>
<tr>
<td>matchTime</td>
<td>date</td>
<td>比赛开始时间</td>
</tr>
</tbody></table>
<p>Team 参赛队伍表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>teamID</td>
<td>int</td>
<td>主键</td>
</tr>
<tr>
<td>teamName</td>
<td>varchar(20)</td>
<td>队伍名称</td>
</tr>
</tbody></table>
<p><strong>Match的hostTeamID与guestTeamID都与Team中的teamID关联</strong><br>查出 2006-6-1 到2006-7-1之间举行的所有比赛，并且用以下形式列出：<br>拜仁 2：0 不来梅 2006-6-21</p>
<p><strong>mysql&gt; select * from m;</strong><br>+—–+——+——+——+————+<br>| mid | hid | gid | mres | matime |<br>+—–+——+——+——+————+<br>| 1 | 1 | 2 | 2:0 | 2006-05-21 |<br>| 2 | 2 | 3 | 1:2 | 2006-06-21 |<br>| 3 | 3 | 1 | 2:5 | 2006-06-25 |<br>| 4 | 2 | 1 | 3:2 | 2006-07-21 |<br>+—–+——+——+——+————+<br>4 rows in set (0.00 sec)</p>
<p><strong>mysql&gt; select * from t;</strong><br>+——+———-+<br>| tid | tname |<br>+——+———-+<br>| 1 | 国安 |<br>| 2 | 申花 |<br>| 3 | 传智联队 |<br>+——+———-+<br>3 rows in set (0.00 sec)</p>
<p><strong>思路：–使用Team表中tname代替Match表中对应的hid和gid,然后对时间用between做出做出范围限制查询</strong><br><strong>1.先代替hid:</strong><br><strong>mysql&gt; select m.*, t.tname as htname<br>    -&gt; from m inner join t<br>    -&gt; on m.hid = t.tid;</strong></p>
<p>+——+——+——+——+————+———-+</p>
<p>| mid | hid | gid | mres | matime | htname |</p>
<p>+——+——+——+——+————+———-+</p>
<p>| 1 | 1 | 2 | 2:0 | 2006-05-21 | 国安 |</p>
<p>| 2 | 2 | 3 | 1:2 | 2006-06-21 | 申花 |</p>
<p>| 3 | 3 | 1 | 2:5 | 2006-06-25 | 布尔联队|</p>
<p>| 4 | 2 | 1 | 3:2 | 2006-07-21 | 申花 |</p>
<p>+——+——+——+——+————+———-+</p>
<p><strong>2.再将查询出来的结果集当做是一张新的表对Team表再来一次内连接查询</strong><br><strong>mysql&gt; select m.*, t.tname as htname,t1.tname as gtname from m inner join t on m.hid = t.tid<br>    -&gt;inner join t as t1<br>**    **-&gt;on m.gid=t1.tid;</strong><br>+——+——+——+——+————+———-+———-+<br>| mid | hid | gid | mres | matime | htname | gtname |<br>+——+——+——+——+————+———-+———-+<br>| 1 | 1 | 2 | 2:0 | 2006-05-21 | 国安 | 申花 |<br>| 2 | 2 | 3 | 1:2 | 2006-06-21 | 申花 | 布尔联队|<br>| 3 | 3 | 1 | 2:5 | 2006-06-25 | 布尔联队 | 国安 |<br>| 4 | 2 | 1 | 3:2 | 2006-07-21 | 申花 | 国安 |<br>+——+——+——+——+————+———-+———-+<br>4 rows in set (0.00 sec)</p>
<p>==&gt;<strong>3.替换后结果如下：</strong><br><strong>mysql&gt; select hid,t1.tname as hname ,mres,gid,t2.tname as gname,matime<br>    -&gt; from<br>    -&gt; m left join t as t1<br>    -&gt; on m.hid = t1.tid<br>    -&gt; left join t as t2<br>**    **-&gt; on m.gid = t2.tid;</strong><br>+——+———-+——+——+———-+————+<br>| hid | hname | mres | gid | gname | matime |<br>+——+———-+——+——+———-+————+<br>| 1 | 国安 | 2:0 | 2 | 申花 | 2006-05-21 |<br>| 2 | 申花 | 1:2 | 3 | 传智联队 | 2006-06-21 |<br>| 3 | 传智联队 | 2:5 | 1 | 国安 | 2006-06-25 |<br>| 2 | 申花 | 3:2 | 1 | 国安 | 2006-07-21 |<br>+——+———-+——+——+———-+————+<br>4 rows in set (0.00 sec)</p>
<p><strong>==&gt;3.最终结果如下：</strong><br><strong>mysql&gt; select hid,t1.tname as hname ,mres,gid,t2.tname as gname,matime<br>    -&gt; from<br>    -&gt; m left join t as t1<br>    -&gt; on m.hid = t1.tid<br>    -&gt; left join t as t2<br>    -&gt; on m.gid = t2.tid<br>    -&gt; where matime between “2006-06-01” and “2006-07-01”;</strong></p>
<p>+——+———-+——+——+———-+————+<br>| hid | hname | mres | gid | gname | matime |<br>+——+———-+——+——+———-+————+<br>| 2 | 申花 | 1:2 | 3 | 布尔联队 | 2006-06-21 |<br>| 3 | 布尔联队 | 2:5 | 1 | 国安 | 2006-06-25 |<br>+——+———-+——+——+———-+————+<br>2 rows in set (0.00 sec)</p>
<hr>
<h3 id="union查询-将2条或多条SQL的查询结果合并成1个结果集"><a href="#union查询-将2条或多条SQL的查询结果合并成1个结果集" class="headerlink" title="union查询:将2条或多条SQL的查询结果合并成1个结果集"></a>union查询:将2条或多条SQL的查询结果合并成1个结果集</h3><p><strong>注意：</strong><br>1)取的两个表投影查找的字段列数要相同，列名可不一致(默认使用第一个表的列名)否则<br>2)如果碰到完全相同的行，将会被合并【合并是非常耗时的☛使用 union all 就不需要比较字段合并了】<br>3)union查询的内部子句中不用写order by子句，意义不大！但是可以对查询合并后id结果集进行排列</p>
<p><strong>1.同时查询goods表中cat_id为2和4的商品</strong></p>
<p><strong>select goods_id,cat_id,goods_name from goods where cat_id =2<br>union<br>select goods_id, cat_id,goods_name from goods where cat_id = 4 (order by )</strong></p>
<hr>
<h4 id="union查询面试题"><a href="#union查询面试题" class="headerlink" title="union查询面试题"></a>union查询面试题</h4><p><strong>将A、B表中id值相同的两个num值相加</strong></p>
<p><strong>A表:<br>+——+——+<br>| id | num |<br>+——+——+<br>| a | 5 |<br>| b | 10 |<br>| c | 15 |<br>| d | 10 |<br>+——+——+ B表:<br>+——+——+<br>| id | num |<br>+——+——+<br>| b | 5 |<br>| c | 15 |<br>| d | 20 |<br>| e | 99 |<br>+——+——+mysql&gt; # 合并 ,注意all的作用<br>mysql&gt; select * from ta<br>    -&gt; union all<br>    -&gt; select * from tb;<br>+——+——+<br>| id | num |<br>+——+——+<br>| a | 5 |<br>| b | 10 |<br>| c | 15 |<br>| d | 10 |<br>| b | 5 |<br>| c | 15 |<br>| d | 20 |<br>| e | 99 |<br>+——+——+</strong></p>
<p><strong>将上面查询的”结果集”当做是一个新表</strong></p>
<p><strong>参考答案:</strong></p>
<p><strong>mysql&gt; # sum,group求和</strong></p>
<p><strong>mysql&gt; select id,sum(num)</strong></p>
<p>​    <strong>-&gt;from</strong></p>
<p>​    <strong>-&gt;(select * from ta union all select * from tb) as tmp</strong></p>
<p>​    <strong>-&gt;group by id;</strong></p>
<p>+——+———-+</p>
<p>| id | sum(num) |</p>
<p>+——+———-+</p>
<p>| a | 5 |</p>
<p>| b | 15 |</p>
<p>| c | 25 |</p>
<p>| d | 30 |</p>
<p>| e | 99 |</p>
<p>+——+———-+</p>
<p>5 rows in set (0.00 sec)</p>
<hr>
<hr>
<h1 id="SQL语言之DDL部分-数据定义语言【建库、建表】–”总经理”"><a href="#SQL语言之DDL部分-数据定义语言【建库、建表】–”总经理”" class="headerlink" title="SQL语言之DDL部分@数据定义语言【建库、建表】–”总经理”"></a>SQL语言之DDL部分@数据定义语言【建库、建表】–”总经理”</h1><hr>
<hr>
<h2 id="1-创建表table"><a href="#1-创建表table" class="headerlink" title="1.创建表table"></a>1.创建表table</h2><p><strong>1)建”表”过程 ☛ 申明数据库中各个”列”的过程<br>☛ creat table_name ( 列名 列类型 [列属性 列默认值]) ENGINE = 存储引擎 default charset=字符集;<br>★★★<br>2)设计”表”结构☛对”列”的优化☛”列”选什么类型?列选什么属性最好?</strong></p>
<hr>
<h2 id="2-列类型知识"><a href="#2-列类型知识" class="headerlink" title="2.列类型知识:"></a>2.列类型知识:</h2><p><strong>数值型：整型、浮点型、定点型 字符串：char varchar text,… 日期时间：datetime, time,</strong></p>
<p><strong>一种类型，占得字节越多，存储越大，也越浪费</strong></p>
<h3 id="2-1-整型列"><a href="#2-1-整型列" class="headerlink" title="2_1:整型列"></a>2_1:整型列</h3><p><strong>bigint 8个字节<br>int 4个字节【1个字节=8位☛4个字节=32位–也就是”1”这个int型只占了32位中1个位】<br>mediumint 3个字节<br>smallint 2个字节<br>tinyint 1个字节 【8位==&gt; 0-255 或 -128 - 127】</strong></p>
<p><strong>1)像tinyint中，默认数值型都是对半正负分配的==&gt;即:正常情况下tinyint是不能存储大于128的数字的!</strong></p>
<p><strong>那么，如何让tinyint存储0-255之间的数呢？</strong><br>使用unsigned属性【无符号】修饰；<br>zerofill==&gt;用0填充至固定宽度【学号:1-&gt;0001;255 -&gt;0255】<br>M -&gt; 宽度 tinyint(5)–&gt;宽度为5;varchar(10)-&gt;宽度为10<br><strong>注意：</strong>①zerofill属性就已经代表了该类型为是unsigned属性了==&gt;负数不需要用0填充<br>②M属性只有和zerofill配合使用才有意义！宽度是指0填充的宽度，而不是指该列存储的宽度【如:tinyint(1) 可以存储111】</p>
<hr>
<h3 id="2-2-浮点列-float-doule-与定点列-decimal"><a href="#2-2-浮点列-float-doule-与定点列-decimal" class="headerlink" title="2_2.浮点列[float/doule]与定点列[decimal]"></a>2_2.浮点列[float/doule]与定点列[decimal]</h3><p><strong>浮点列:float/double (M,D) [UNSIGNED] [ZEROFILL] – M表示精度【总位数】,D表示小数点后面的位数</strong><br>如:float(3,2)–存10==&gt;错误:其实这里有4位了10.00;<br>float(3,2)==&gt;存9.99正确<br><strong>定点列decimal[整数部分和小数部分分开来存储的]<br>浮点数是有精度损失的！定点列更准确</strong></p>
<hr>
<h3 id="2-3字符型列-char-varchar"><a href="#2-3字符型列-char-varchar" class="headerlink" title="2_3字符型列[char/varchar]"></a>2_3字符型列[char/varchar]</h3><h4 id="①char-M-–定长；varchar-M-–-变长"><a href="#①char-M-–定长；varchar-M-–-变长" class="headerlink" title="①char(M)–定长；varchar(M) – 变长"></a>①char(M)–定长；varchar(M) – 变长</h4><p><strong>例如:<br>char(10) – 放10个字符长度,但是存放1个字符，在内存中依然是占10个字符长度<br>–char(M) 在磁盘上就占M个字节，磁盘空间利用率可能达到100%<br>varchar(10) – 放10个字符长度，但是存放1个字符，在内存中就占了1个字符长度的空格键<br>–varchar(M) 在内存表中存储时，在表头会增加1-2说明字节存储该字符串长度==&gt;那么内存寻址的时候就能准确找到每一行数据==&gt;实际varchar占M+[1/2]字节</strong></p>
<p><strong>小技巧：一般对于M较小的，都用char!</strong></p>
<p><strong>1).因为varchar的利用率是不可能达到100%！</strong></p>
<p><strong>2).内存的定长寻址会快很多<br>**</strong>3).char型，如果不够M个宽度，内存存储时候会用空格在字符右边补齐，取出时候把右侧空格删除**<br><strong>如果用char存储’ hello ‘，取出之后’ hello’；用varchar存，取出时候’ hello ‘</strong></p>
<h4 id="②text-–-大文本类型；blob-–-二进制类型"><a href="#②text-–-大文本类型；blob-–-二进制类型" class="headerlink" title="②text – 大文本类型；blob – 二进制类型"></a>②text – 大文本类型；blob – 二进制类型</h4><p><strong>例如：论文、博客…等大段文本text<br>图像、音频等二进制信息用blob类型来存储<br>意义：blob是使用二进制来存储信息的，因此不需要考虑字符集的问题！<br>例如0xFF这个字节，在ASCII字符集中被认为是非法的，在入库的时候就会被过滤掉！如果使用blob来存储则不会被过滤</strong></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="③enum-‘value1’-’value2’-…-–-枚举类型；set-‘value1’-’value2’-…-–-集合类型"><a href="#③enum-‘value1’-’value2’-…-–-枚举类型；set-‘value1’-’value2’-…-–-集合类型" class="headerlink" title="③enum(‘value1’,’value2’,…) – 枚举类型；set(‘value1’,’value2’,…) – 集合类型"></a>③enum(‘value1’,’value2’,…) – 枚举类型；set(‘value1’,’value2’,…) – 集合类型</h4><p><strong>例如：<br>enum(‘男’,’女’) ☛ 该列所存储的值就只能是’男’或’女’ ☛ 是个单选值存储<br>set(‘value1’,’value2’,…) ☛ 是个复选值存储，但值也只能在列举的元素中选取<br>注意：set()最多只能列举64个值！</strong></p>
<hr>
<h3 id="2-4日期时间型列-char-varchar"><a href="#2-4日期时间型列-char-varchar" class="headerlink" title="2_4日期时间型列[char/varchar]"></a>2_4日期时间型列[char/varchar]</h3><p><strong>year 年 [1个字节] 范围:[1901-2155] ☛ 在insert是，可以简写年后面对两位，但是这样不推荐<br>【00-69】+2000；【70-99】+1900 ☛ 填写两位，表示1970-2069年✘不要只写后面2个数字<br>Date 日期 1994-10-29<br>☛ 以’YYYY-MM-DD HH:MM:SS’格式检索和显示DATETIME值。支持的范围为’1000-01-01 00:00:00’到’9999-12-31 23:59:59’<br>time 时间 13:02:29<br>☛ 用’YYYY-MM-DD’格式检索和显示DATE值。支持的范围是’1000-01-01’到 ‘9999-12-31’<br>datetime 日期<br>☛ 以’YYYY-MM-DD HH:MM:SS’格式检索和显示DATETIME值。支持的范围为’1000-01-01 00:00:00’到’9999-12-31 23:59:59’<br>int unsigned 时间戳 1970-01-01 00:00:00 到当前的秒数<br>☛ 一般存注册时间，商品发布时间等，并不是用datetime，而是用时间戳存储，因为datetime存储虽然直观，但不便计算</strong></p>
<hr>
<h3 id="2-5-列属性-☛-默认值-default-amp-amp-not-null"><a href="#2-5-列属性-☛-默认值-default-amp-amp-not-null" class="headerlink" title="2_5 列属性 ☛ 默认值[ default ]&amp;&amp; not null"></a>2_5 列属性 ☛ 默认值[ default ]&amp;&amp; not null</h3><p><strong>1.NULL不便于查询【注意：空字数串,0都不是NULL–NULL是什么都没有，是不存在】<br>not null default xxxx</strong></p>
<h3 id="2-6-列属性-☛-主键-primary-key-amp-amp-自增-auto-increment"><a href="#2-6-列属性-☛-主键-primary-key-amp-amp-自增-auto-increment" class="headerlink" title="2_6 列属性 ☛ 主键[ primary key ] &amp;&amp; 自增[ auto_increment ]"></a>2_6 列属性 ☛ 主键[ primary key ] &amp;&amp; 自增[ auto_increment ]</h3><p><strong>1.此列不重复，能够区分每一行==&gt;列名 primary key auto_increment<br>一般主键和自增是一起使用的[int类型]，不一定一要一起使用！一张表中只能有一个自增的列！<br>小技巧：<br>1.很多时候都是用tinyint存储☛性别：0/1 –&gt; 男/女;体重：tinyint 【0-255】….<br>2.定长存储寻址快，效率高–常用的字段建议定长存储【对于一张表，只有一个变长大字段其他都是定长字段情况下，可考虑将变长单独分出来】<br>3.一般mysql的列名都用小写</strong></p>
<hr>
<h3 id="2-7-列的增add-删-改-☛-这是对表结构的修改"><a href="#2-7-列的增add-删-改-☛-这是对表结构的修改" class="headerlink" title="2_7 列的增add/删/改 ☛ 这是对表结构的修改"></a>2_7 列的增add/删/改 ☛ 这是对表结构的修改</h3><p><strong>增：alter table 表名 add 列名 列类型 [列属性] – 默认该列是存放在表最后的【使用 after 列名 –放在指定列】<br>删：alter table 表名 drop column 列名 列类型 [列属性]<br>改：alter table 表名 change 旧列名 新列名 [新列类型] [新列属性]<br>改：alter table 表名 modify 列名 [新列类型] [新列属性] –modify 不能修改列名</strong></p>
<hr>
<h2 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h2><h3 id="1-什么是视图？"><a href="#1-什么是视图？" class="headerlink" title="1).什么是视图？"></a>1).什么是视图？</h3><p><strong>view 又称虚拟表，view其实就一条查询SQL语句的结果集==&gt;将常用的SQL查询结果集虚拟为一张表存放在内存中<br>create view as 视图名 (查询SQL语句结果集);–当再次使用时:select * from 视图名</strong></p>
<h3 id="2-视图有什么用？【视图实际上存储的就是SQL语句】"><a href="#2-视图有什么用？【视图实际上存储的就是SQL语句】" class="headerlink" title="2).视图有什么用？【视图实际上存储的就是SQL语句】"></a>2).视图有什么用？【视图实际上存储的就是SQL语句】</h3><p><strong>①权限的控制!比如：某几个列允许用户查询，而其他列不允许，可以通过视图开放其中的一部分列，达到权限的控制<br>②简化复杂的查询!比如：查询每个栏目下的商品的平均价格并按平均价格排序，然后查出平均价格前3高的栏目<br>①create view v as select cat_id, avg(shop_price) as pj from goods group by cat_id<br>②select * from v order by pj limit 0,3</strong></p>
<h3 id="3-视图能不能更新删除修改"><a href="#3-视图能不能更新删除修改" class="headerlink" title="3).视图能不能更新删除修改"></a>3).视图能不能更新删除修改</h3><p><strong>①视图【虚拟表】☛ 是物理表的一个”投影”,两者是相互影响的☛更改物理表，虚拟表也会更改，同理，更改虚拟表，物理表也会更改！</strong></p>
<p><strong>但是：如果虚拟表中含有函数(经过计算…)，则不能修改!【即物理表和虚拟表的列能一一对应，则虚拟表中该列能修改–改一行影响一行】</strong></p>
<p><strong>①create view as v select cat_id, avg(shop_price) as pj from goods group by cat_id</strong></p>
<p><strong>②update v set pj = 80 where cat_id=11;–报错！因为修改结果不能正确映射回到goods表中所有shop_price中</strong></p>
<p><strong>同理：增加和删除操作也是和修改一样</strong></p>
<h3 id="4-视图放在什么地方？"><a href="#4-视图放在什么地方？" class="headerlink" title="4).视图放在什么地方？"></a>4).视图放在什么地方？</h3><p><strong>①对于VIEW存储的SQL语句是简单的select语句，所以当对视图查询时候就是对SQL语句的拼接==&gt;对物理表的间接拼接查询(合并：merge)<br>②对于VIEW存储的SQL语句已经是逻辑复杂的select语句了，这时对视图的拼接查询会更麻烦！<br>==&gt;这时候mysql会先执行视图的创建语句，把结果集形成一张临时表，再对临时表(temptable)进行操作<br>MySQL数据库中可以通过algorithm(算法)定义对视图的处理情况 create algorithm = merge/temptalbe view v_name as …<br>[不写该属性，则由MySQL自行判断]</strong></p>
<hr>
<h2 id="4-存储引擎-ENGINE"><a href="#4-存储引擎-ENGINE" class="headerlink" title="4. 存储引擎[ENGINE]"></a>4. 存储引擎[ENGINE]</h2><h3 id="1-什么是存储引擎？"><a href="#1-什么是存储引擎？" class="headerlink" title="1).什么是存储引擎？"></a>1).什么是存储引擎？</h3><p><strong>即：保存”数据”的形式【格式】<br>MYISAM:【处理快-相对不安全-不支持事务】<br>good.frm–说明书[声明表结构的表具体语句]<br>good.MYD–数据内容<br>goods.MYI–目录[索引文件]<br>InnoDB【安全-处理慢-支持事务】–只有.frm文件，其余表的其余全部内容存放在了一个文件中<br>Memory【存放在内存中–一关机就没有了】</strong></p>
<hr>
<h2 id="5-字符集与乱码问题"><a href="#5-字符集与乱码问题" class="headerlink" title="5.字符集与乱码问题"></a>5.字符集与乱码问题</h2><h3 id="1-什么是乱码？"><a href="#1-什么是乱码？" class="headerlink" title="1.什么是乱码？"></a>1.什么是乱码？</h3><p>对计算机来说，没有”乱码”，只有0/1==&gt;乱码：人看不懂！</p>
<h3 id="2-为什么会乱码？"><a href="#2-为什么会乱码？" class="headerlink" title="2.为什么会乱码？"></a>2.为什么会乱码？</h3><p>**①导致原因：文字本来的字符集与展示的字符集不一致<br>==&gt;一般统一utf8；<br>②服务器和客户端字符集不一致！<br>客户端[GBK提交数据]==&gt;连接器处理[转换为数据库字符集]==&gt;数据库[UTF8存放数据]【无论连接器转不转，最终存放到数据库中都是UTF8】<br>数据库[UTF8存放数据]==&gt;连接器处理[转换为客户端字符集]==&gt;客户端[GBK显示数据]</p>
<p>☛由于客户端和数据库字符集不同导致的乱码==&gt;在提交和显示数据的时候，要”说清楚”字符集<br>==&gt;”我”要什么字符集？==&gt;客户端：set character_set_client =gbk;【谁连接服务器谁就是客户端，客户端字符集是多变的】<br>==&gt;”你”接受什么字符集？==&gt;数据库：set character_set_results=utf8;<br>==&gt;”转换”用什么字符集？==&gt;连接器：set character_set_connection = gbk/utf8[都可以]**<br><strong>只需要将3者的字符集设置一致不会乱码了！==&gt;set names gbk/utf8 ==&gt; 1句好比3句强<br>UTF8:包含中文，韩文，日文，英语，繁体字…国际化<br>GBK:只有简体中文<br>**</strong>gbk2123:简体中文+英文**</p>
<h3 id="3-怎么能不乱码？"><a href="#3-怎么能不乱码？" class="headerlink" title="3.怎么能不乱码？"></a>3.怎么能不乱码？</h3><p><strong>①文件保存时是否保存为utf8格式<br>②HTML页面显示时候 ：<br>③创建数据表的时候： create table () charset utf8;<br>**</strong>④查询数据的时候：set names utf8;**</p>
<h3 id="4-什么是字符校对集？"><a href="#4-什么是字符校对集？" class="headerlink" title="4.什么是字符校对集？"></a>4.什么是字符校对集？</h3><p><strong>[utf8-bin==&gt;bin : 二进制排序]==&gt;校对集就是查询排序的标准</strong></p>
<h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><hr>
<h2 id="6-索引-index"><a href="#6-索引-index" class="headerlink" title="6. 索引[ index ]"></a>6. 索引[ index ]</h2><h3 id="1-查询方式？"><a href="#1-查询方式？" class="headerlink" title="1).查询方式？"></a>1).查询方式？</h3><p><strong>当表中有大量记录时，若要对表进行查询：<br>①全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录<br>☛消耗大量数据库系统时间，并造成大量磁盘I/O操作<br>**</strong>②第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录**</p>
<h3 id="2-什么是索引？"><a href="#2-什么是索引？" class="headerlink" title="2).什么是索引？"></a>2).什么是索引？</h3><p><strong>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息！</strong></p>
<p><strong>–相当于图书的”目录”,根据目录，迅速定位查找内容的位置</strong></p>
<h3 id="3-索引优-缺点？"><a href="#3-索引优-缺点？" class="headerlink" title="3).索引优/缺点？"></a>3).索引优/缺点？</h3><p><strong>优点：</strong><br><strong>①加快了查询时对数据的检索速度<br>②创建唯一性索引，保证数据库表中每一行数据的唯一性<br>③加速表和表之间的连接<br>**</strong>④在使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间**<br><strong>缺点：</strong><br>①索引是另外独立于数据外存放的一个二进制文件==&gt;需要占物理空间( .MYI )<br>②对表数据进行增、删和改的维护操作时，索引也要动态的变化==&gt;降低了数据增、删、改的维护速度<br>☛在创建索引之前，您必须确定要使用哪些列以及要创建的索引类型!<br>☛索引不是越多越好==&gt;一般在查询频率多、且重复度小的列上加!</p>
<p><strong>例如：性别和身份号都需要频繁查询,且表数据量大<br>==&gt;性别：就只有男和女，定位的时候有太多重复的了，添加索引反而是占用了空间！<br>**</strong>==&gt;身份证号：添加索引，身份证号是唯一的,只要快速找到索引就能快速定位**</p>
<h3 id="4-索引类型"><a href="#4-索引类型" class="headerlink" title="4).索引类型"></a>4).索引类型</h3><p><strong>①key 列名(索引名)==&gt; 普通索引==&gt;纯粹提高查询速度<br>②unique key 列名(索引名)==&gt; 唯一索引 ==&gt;提高速度，且约束数据唯一性<br>③primary key 列名 ==&gt; 主键索引==&gt;唯一主键<br>**</strong>④fulltext ==&gt; 全文索引 ==&gt; 在中文环境下，基本不起作用,要分词索引，一般用第三方解决方案(如：sphinx)** </p>
<h3 id="5-索引长度："><a href="#5-索引长度：" class="headerlink" title="5).索引长度："></a>5).索引长度：</h3><p><strong>[在建立索引时，对列中一部分字符进行索引]<br>①unique key / key 列名(索引名 (索引长度) )<br>**</strong>例如：对于唯一的Email,形式都是<a href="mailto:.....@qq.com">.....@qq.com</a>**</p>
<h3 id="6-多列索引："><a href="#6-多列索引：" class="headerlink" title="6).多列索引："></a>6).多列索引：</h3><p><strong>[在建立索引时，对2个或多个列进行索引]</strong></p>
<h3 id="7-冗余索引："><a href="#7-冗余索引：" class="headerlink" title="7).冗余索引："></a>7).冗余索引：</h3><p><strong>[索引存在覆盖]==&gt;冗余索引有时候在开发中是必要的</strong></p>
<h3 id="8-操作索引："><a href="#8-操作索引：" class="headerlink" title="8).操作索引："></a>8).操作索引：</h3><p><strong>①查看索引：show index table_name;<br>②添加索引：alter table table_name add index column( index_name )<br>③删除索引:alter table table_name<br>添加主键索引: alter table table_name add primary key column<br>删除主键索引: alter table table_name drop primary key;<br>1.explain select …. ==&gt;查看该语句执行信息==&gt;可以查看使用到的索引<br>2.索引有一个左前缀查找原则==&gt; “…….xxx”这样对xxx发挥不了作用</strong></p>
<hr>
<h2 id="7-常用九大类函数-gt-看一次就好！要用的时候至少知道"><a href="#7-常用九大类函数-gt-看一次就好！要用的时候至少知道" class="headerlink" title="7. 常用九大类函数==&gt;看一次就好！要用的时候至少知道"></a>7. 常用九大类函数==&gt;看一次就好！要用的时候至少知道</h2><p><strong>数据库是用来存储管理数据的，能够少用函数来处理尽量少用==&gt;效率慢</strong></p>
<h3 id="1-、数学函数"><a href="#1-、数学函数" class="headerlink" title="1)、数学函数"></a>1)、数学函数</h3><p>abs(x) 返回x的绝对值<br>bin(x) 返回x的二进制（oct返回八进制，hex返回十六进制）<br>ceiling(x) 返回大于x的最小整数值==&gt;向上取整<br>exp(x) 返回值e（自然对数的底）的x次方<br>floor(x) 返回小于x的最大整数值==&gt;向下取整<br>greatest(x1,x2,…,xn)返回集合中最大的值<br>least(x1,x2,…,xn) 返回集合中最小的值<br>ln(x) 返回x的自然对数<br>log(x,y)返回x的以y为底的对数<br>mod(x,y) 返回x/y的模（余数）<br>pi()返回pi的值（圆周率）<br>rand()返回０或１的随机值,可以通过提供一个参数(种子)使rand()生成器生成1.<br>round(x,y)返回参数x的四舍五入的有y位小数的值<br>sign(x) 返回代表数字x的符号的值<br>sqrt(x) 返回一个数的平方根<br>truncate(x,y) 返回数字x截短为y位小数的结果</p>
<hr>
<h3 id="2-、聚合函数-常用于group-by从句的select查询中"><a href="#2-、聚合函数-常用于group-by从句的select查询中" class="headerlink" title="2)、聚合函数(常用于group by从句的select查询中)"></a>2)、聚合函数(常用于group by从句的select查询中)</h3><p>avg(col)返回指定列的平均值<br>count(col)返回指定列中非null值的个数<br>min(col)返回指定列的最小值<br>max(col)返回指定列的最大值<br>sum(col)返回指定列的所有值之和<br>group_concat(col) 返回由属于一组的列值连接组合而成的结果</p>
<hr>
<h3 id="3-、字符串函数"><a href="#3-、字符串函数" class="headerlink" title="3)、字符串函数"></a>3)、字符串函数</h3><p>ascii(char)返回字符的ascii码值<br>bit_length(str)返回字符串的比特长度<br>concat(s1,s2…,sn)将s1,s2…,sn连接成字符串<br>concat_ws(sep,s1,s2…,sn)将s1,s2…,sn连接成字符串，并用sep字符间隔<br>insert(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果<br>find_in_set(str,list)分析逗号分隔的list列表，如果发现str，返回str在list中的位置<br>lcase(str)或lower(str) 返回将字符串str中所有字符改变为小写后的结果<br>left(str,x)返回字符串str中最左边的x个字符<br>length(s)返回字符串str中的字符数<br>ltrim(str) 从字符串str中切掉开头的空格<br>position(substr,str) 返回子串substr在字符串str中第一次出现的位置<br>quote(str) 用反斜杠转义str中的单引号<br>repeat(str,srchstr,rplcstr)返回字符串str重复x次的结果<br>reverse(str) 返回颠倒字符串str的结果<br>right(str,x) 返回字符串str中最右边的x个字符<br>rtrim(str) 返回字符串str尾部的空格<br>strcmp(s1,s2)比较字符串s1和s2<br>trim(str)去除字符串首部和尾部的所有空格<br>ucase(str)或upper(str) 返回将字符串str中所有字符转变为大写后的结果</p>
<hr>
<h3 id="4-、日期和时间函数"><a href="#4-、日期和时间函数" class="headerlink" title="4)、日期和时间函数"></a>4)、日期和时间函数</h3><p>curdate()或current_date() 返回当前的日期<br>curtime()或current_time() 返回当前的时间<br>date_add(date,interval int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：selectdate_add(current_date,interval 6 month);<br>date_format(date,fmt) 依照指定的fmt格式格式化日期date值<br>date_sub(date,interval int keyword)返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：selectdate_sub(current_date,interval 6 month);<br>dayofweek(date) 返回date所代表的一星期中的第几天(1<del>7)<br>dayofmonth(date) 返回date是一个月的第几天(1</del>31)<br>dayofyear(date) 返回date是一年的第几天(1<del>366)<br>dayname(date) 返回date的星期名，如：select dayname(current_date);<br>from_unixtime(ts,fmt) 根据指定的fmt格式，格式化unix时间戳ts<br>hour(time) 返回time的小时值(0</del>23)<br>minute(time) 返回time的分钟值(0<del>59)<br>month(date) 返回date的月份值(1</del>12)<br>monthname(date) 返回date的月份名，如：select monthname(current_date);<br>now() 返回当前的日期和时间<br>quarter(date) 返回date在一年中的季度(1<del>4)，如select quarter(current_date);<br>week(date) 返回日期date为一年中第几周(0</del>53)<br>year(date) 返回日期date的年份(1000~9999)<br>一些示例：<br>获取当前系统时间：select from_unixtime(unix_timestamp());<br>select extract(year_month from current_date);<br>select extract(day_second from current_date);<br>select extract(hour_minute from current_date);<br>返回两个日期值之间的差值(月数)：select period_diff(200302,199802);<br>在mysql中计算年龄：<br>select date_format(from_days(to_days(now())-to_days(birthday)),’%y’)+0 as age from employee;<br>这样，如果brithday是未来的年月日的话，计算结果为0。<br>下面的sql语句计算员工的绝对年龄，即当birthday是未来的日期时，将得到负值。<br>select date_format(now(), ‘%y’) - date_format(birthday, ‘%y’) -(date_format(now(), ‘00-%m-%d’) &lt; date_format(birthday, ‘00-%m-%d’)) as age from employee</p>
<hr>
<h3 id="5-、加密函数"><a href="#5-、加密函数" class="headerlink" title="5)、加密函数"></a>5)、加密函数</h3><p><strong>aes_encrypt(str,key) 返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用aes_encrypt的结果是一个二进制字符串，以blob类型存储<br>aes_decrypt(str,key) 返回用密钥key对字符串str利用高级加密标准算法解密后的结果<br>decode(str,key) 使用key作为密钥解密加密字符串str<br>encrypt(str,salt) 使用unixcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str<br>encode(str,key) 使用key作为密钥加密字符串str，调用encode()的结果是一个二进制字符串，它以blob类型存储<br>md5() 计算字符串str的md5校验和<br>password(str) 返回字符串str的加密版本，这个加密过程是不可逆转的，和unix密码加密过程使用不同的算法。<br>sha() 计算字符串str的安全散列算法(sha)校验和<br>示例：<br>select encrypt(‘root’,’salt’);<br>select encode(‘xufeng’,’key’);<br>select decode(encode(‘xufeng’,’key’),’key’);#加解密放在一起<br>select aes_encrypt(‘root’,’key’);<br>select aes_decrypt(aes_encrypt(‘root’,’key’),’key’);<br>select md5(‘123456’);<br>select sha(‘123456’);</strong></p>
<hr>
<h3 id="6-、控制流函数"><a href="#6-、控制流函数" class="headerlink" title="6)、控制流函数"></a>6)、控制流函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql有4个函数是用来进行条件操作的，这些函数可以实现sql的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</span><br><span class="line">mysql控制流函数：</span><br><span class="line">case when[test1] then [result1]...else [default] end如果testn是真，则返回resultn，否则返回default</span><br><span class="line">case [test] when[val1] then [result]...else [default]end  如果test和valn相等，则返回resultn，否则返回default</span><br><span class="line">if(test,t,f)   如果test是真，返回t；否则返回f</span><br><span class="line">ifnull(arg1,arg2) 如果arg1不是空，返回arg1，否则返回arg2</span><br><span class="line">nullif(arg1,arg2) 如果arg1&#x3D;arg2返回null；否则返回arg1</span><br><span class="line">这些函数的第一个是ifnull()，它有两个参数，并且对第一个参数进行判断。</span><br><span class="line">    &#x3D;&#x3D;&gt;如果第一个参数不是null，函数就会向调用者返回第一个参数；如果是null,将返回第二个参数。</span><br><span class="line">如：select ifnull(1,2), ifnull(null,10),ifnull(4*null,&#39;false&#39;);</span><br><span class="line">nullif()函数将会检验提供的两个参数是否相等，如果相等，则返回null，如果不相等，就返回第一个参数。</span><br><span class="line">如：select nullif(1,1),nullif(&#39;a&#39;,&#39;b&#39;),nullif(2+3,4+1);</span><br><span class="line">和许多脚本语言提供的if()函数一样，mysql的if()函数也可以建立一个简单的条件测试，这个函数有三个参数:</span><br><span class="line">    &#x3D;&#x3D;&gt;第一个是要被判断的表达式，如果表达式为真，if()将会返回第二个参数，如果为假，if()将会返回第三个参数。</span><br><span class="line">如：selectif(1&lt;10,2,3),if(56&gt;100,&#39;true&#39;,&#39;false&#39;);</span><br><span class="line">if()函数在只有两种可能结果时才适合使用。然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。</span><br><span class="line">   ---在这种情况下，mysql提供了case函数，它和php及perl语言的switch-case条件例程一样。</span><br><span class="line">case函数的格式有些复杂，通常如下所示：</span><br><span class="line">case [expression to be evaluated]</span><br><span class="line">when [val 1] then [result 1]</span><br><span class="line">when [val 2] then [result 2]</span><br><span class="line">when [val 3] then [result 3]</span><br><span class="line">......</span><br><span class="line">when [val n] then [result n]</span><br><span class="line">else [default result]</span><br><span class="line">end</span><br><span class="line">    这里，第一个参数是要被判断的值或表达式，接下来的是一系列的when-then块，每一块的第一个参数指定要比较的值，如果为真，就返回结果。</span><br><span class="line">    所有的when-then块将以else块结束，当end结束了所有外部的case块时</span><br><span class="line">    &#x3D;&#x3D;&gt;如果前面的每一个块都不匹配就会返回else块指定的默认结果。如果没有指定else块，而且所有的when-then比较都不是真，mysql将会返回null。</span><br><span class="line">case函数还有另外一种句法，有时使用起来非常方便，如下：</span><br><span class="line">case</span><br><span class="line">when [conditional test 1] then [result 1]</span><br><span class="line">when [conditional test 2] then [result 2]</span><br><span class="line">else [default result]</span><br><span class="line">end</span><br><span class="line">这种条件下，返回的结果取决于相应的条件测试是否为真。</span><br><span class="line">示例：</span><br><span class="line">mysql&gt;select case &#39;green&#39;</span><br><span class="line">     when &#39;red&#39; then &#39;stop&#39;</span><br><span class="line">     when &#39;green&#39; then &#39;go&#39; end;</span><br><span class="line">select case 9 when 1 then &#39;a&#39; when 2 then &#39;b&#39; else &#39;n&#x2F;a&#39; end;</span><br><span class="line">select case when (2+2)&#x3D;4 then &#39;ok&#39; when(2+2)&lt;&gt;4 then &#39;not ok&#39; end asstatus;</span><br><span class="line">select name,if((isactive &#x3D; 1),&#39;已激活&#39;,&#39;未激活&#39;) as result fromuserlogininfo;</span><br><span class="line">select fname,lname,(math+sci+lit) as total,</span><br><span class="line">case when (math+sci+lit) &lt; 50 then &#39;d&#39;</span><br><span class="line">when (math+sci+lit) between 50 and 150 then &#39;c&#39;</span><br><span class="line">when (math+sci+lit) between 151 and 250 then &#39;b&#39;</span><br><span class="line">else &#39;a&#39; end</span><br><span class="line">as grade from marks;</span><br><span class="line">select if(encrypt(&#39;sue&#39;,&#39;ts&#39;)&#x3D;upass,&#39;allow&#39;,&#39;deny&#39;) as loginresultfrom users where uname &#x3D; &#39;sue&#39;;#一个登陆验证</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="7-、格式化函数"><a href="#7-、格式化函数" class="headerlink" title="7)、格式化函数"></a>7)、格式化函数</h3><p>date_format(date,fmt) 依照字符串fmt格式化日期date值<br>format(x,y) 把x格式化为以逗号隔开的数字序列，y是结果的小数位数<br>inet_aton(ip) 返回ip地址的数字表示<br>inet_ntoa(num) 返回数字所代表的ip地址<br>time_format(time,fmt) 依照字符串fmt格式化时间time值<br>其中最简单的是format()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。<br>示例：<br>select format(34234.34323432,3);<br>select date_format(now(),’%w,%d %m %y %r’);<br>select date_format(now(),’%y-%m-%d’);<br>select date_format(19990330,’%y-%m-%d’);<br>select date_format(now(),’%h:%i %p’);<br>select inet_aton(‘10.122.89.47’);<br>select inet_ntoa(175790383);</p>
<hr>
<h3 id="8-、类型转化函数"><a href="#8-、类型转化函数" class="headerlink" title="8)、类型转化函数"></a>8)、类型转化函数</h3><p>为了进行数据类型转化，mysql提供了cast()函数，它可以把一个值转化为指定的数据类型。类型有：binary,char,date,time,datetime,signed,unsigned 示例：<br>select cast(now() as signed integer),curdate()+0;<br>select ‘f’=binary ‘f’,’f’=cast(‘f’ as binary);</p>
<hr>
<h3 id="9-、系统信息函数"><a href="#9-、系统信息函数" class="headerlink" title="9)、系统信息函数"></a>9)、系统信息函数</h3><p>database() 返回当前数据库名<br>benchmark(count,expr) 将表达式expr重复运行count次<br>connection_id() 返回当前客户的连接id<br>found_rows() 返回最后一个select查询进行检索的总行数<br>user()或system_user() 返回当前登陆用户名<br>version() 返回mysql服务器的版本<br>示例：<br>select database(),version(),user();<br>selectbenchmark(9999999,log(rand()<em>pi()));#该例中,mysql计算log(rand()</em>pi())表达式9999999次。</p>
<hr>
<h2 id="8-事务的概念"><a href="#8-事务的概念" class="headerlink" title="8. 事务的概念"></a>8. 事务的概念</h2><h3 id="1-什么是事务？"><a href="#1-什么是事务？" class="headerlink" title="1.什么是事务？"></a>1.什么是事务？</h3><p>将一个业务下的SQL语句作为一个单元统一操作==&gt;”同生共死”!【MyISAM不支持事务】<br>例如：A”打账”500给B，打完之后A减少500，B增加500！如果这两个动作有一个没完成则整个打账过程取消失败–[<strong>原子性</strong>]</p>
<h3 id="2-如何启用事务？"><a href="#2-如何启用事务？" class="headerlink" title="2.如何启用事务？"></a>2.如何启用事务？</h3><p><strong>start transaction;</strong></p>
<h3 id="3-如何结束事务？"><a href="#3-如何结束事务？" class="headerlink" title="3.如何结束事务？"></a>3.如何结束事务？</h3><p><strong>commit;</strong></p>
<h3 id="4-如何撤销事务？【回滚事务】"><a href="#4-如何撤销事务？【回滚事务】" class="headerlink" title="4.如何撤销事务？【回滚事务】"></a>4.如何撤销事务？【回滚事务】</h3><p><strong>rollback;</strong></p>
<p>事务的中间状态是不可见的–隔离性</p>
<p>事务发生结束了之后是不能恢复的–持久性</p>
<p>事务之前和之后它们的业务逻辑上要保持一致！两人总账额度9000，相互转帐后依然是9000 – 一致性</p>
<p><strong>对于MySQL索引优化，DCL…等部分，工作之后就会遇到！现在可以不必要学！**</strong>现在学了也不一定会，会了也不一定能用得上，用得上也不一定能记得！**</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库中的Date,DateTime,TimeStamp和Time类型</title>
    <url>/2020/11/18/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84Date-DateTime-TimeStamp%E5%92%8CTime%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><strong>DATETIME</strong>类型用在你需要同时包含日期和时间信息的值时。MySQL检索并且以’YYYY-MM-DD HH:MM:SS’格式显示DATETIME值，支持的范围是’1000-01-01 00:00:00’到’9999-12-31 23:59:59’。（“支持”意味着尽管更早的值可能工作，但不能保证他们可以。）</p>
<a id="more"></a>

<p><strong>DATE</strong>类型用在你仅需要日期值时，没有时间部分。MySQL检索并且以’YYYY-MM-DD’格式显示DATE值，支持的范围是’1000-01-01’到’9999-12-31’。</p>
<p><strong>TIMESTAMP</strong>列类型提供一种类型，你可以使用它自动地用当前的日期和时间标记INSERT或UPDATE的操作。</p>
<p><strong>TIME</strong>数据类型表示一天中的时间。MySQL检索并且以”HH:MM:SS”格式显示TIME值。支持的范围是’00:00:00’到’23:59:59’。</p>
<p>创建数据库表测试：</p>
<p><img src="/images/2020111501.png" alt="image-20201115191901682"></p>
<p><img src="http://www.linuxidc.com/upload/2012_08/120811102669351.jpg" alt="img"></p>
<p><strong>datetime和timestamp的区别：</strong><br>1.datetime 的日期范围比较大；如果有1970年以前的数据还是要用datetime.但是timestamp 所占存储空间比较小。<br>2.timestamp 类型的列还有个特性：默认情况下，在 insert, update 数据时，timestamp 列会自动以当前时间（CURRENT_TIMESTAMP）填充/更新。</p>
<p>3.timestamp比较受时区timezone的影响以及MYSQL版本和服务器的<strong>SQL</strong> MODE的影响.</p>
<p>使用一个常用的格式集的任何一个，你可以指定DATETIME、</p>
<p><strong>DATE和TIMESTAMP值：</strong><br>‘YYYY-MM-DD HH:MM:SS’或’YY-MM-DD HH:MM:SS’格式的一个字符串,允许一种”宽松”的语法:任何标点可用作在日期部分和时间部分之间的分隔符。例如，’98-12-31 11:30:45’、’98.12.31 11+30+45’、’98/12/31 11<em>30</em>45’和‘98@12@31 11^30^45’是等价的。</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL日期类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Mycat学习笔记</title>
    <url>/2021/01/12/Mycat%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>中间件</strong>：是介于应用系统和系统软件之间的一类软件</p>
<p><strong>数据库中间件</strong>：连接Java应用程序和数据库</p>
<a id="more"></a>

<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><blockquote>
<p>Mycat官方文档：<a href="https://github.com/MyCATApache/Mycat-Server/wiki" target="_blank" rel="noopener">https://github.com/MyCATApache/Mycat-Server/wiki</a></p>
<p>Mycat语雀官方文档：<a href="https://www.yuque.com/books/share/0576de75-ffc4-4c34-8586-952ae4636944" target="_blank" rel="noopener">https://www.yuque.com/books/share/0576de75-ffc4-4c34-8586-952ae4636944</a></p>
</blockquote>
<p>Mycat是一款流行的数据库中间件，由cobar演进而来</p>
<p>为什么使用Mycat</p>
<ul>
<li>java与数据库紧耦合</li>
<li>高访问量高并发对数据库压力较大</li>
<li>读写请求数据不一致</li>
</ul>
<p>Mycat作用</p>
<ul>
<li>读写分离</li>
</ul>
<p><img src="/images/2021011201.png" alt="image-20210125155408275"></p>
<ul>
<li>数据分片</li>
</ul>
<p>垂直拆分（分库）、水平拆分（分表）、垂直+水平拆分（分库分表）</p>
<p><img src="/images/2021011202.png" alt="image-20210125155436300"></p>
<ul>
<li>多数据源整合</li>
</ul>
<p><img src="/images/2021011203.png" alt="image-20210125155512988"></p>
<p>Mycat原理：</p>
<p>Mycat原理就两个字<strong>拦截</strong></p>
<p><img src="/images/2021011204.png" alt="image-20210125203845447"></p>
<h1 id="2-Mycat安装启动"><a href="#2-Mycat安装启动" class="headerlink" title="2 Mycat安装启动"></a>2 Mycat安装启动</h1><p>常见安装方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.rpm安装</span><br><span class="line">  .rpm安装包，安装顺序安装</span><br><span class="line">2.yum安装</span><br><span class="line">  需要联网安装</span><br><span class="line">3.Docker安装</span><br><span class="line">4.解压后即可使用</span><br><span class="line">5.解压后编译安装</span><br></pre></td></tr></table></figure>



<p>配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schema.xml：定义逻辑库，表、分片节点等内容</span><br><span class="line">rule.xml：定义分片规则</span><br><span class="line">server.xml：定义用户以及系统相关变量，如端口等</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>应用框架</category>
        <category>后端</category>
        <category>数据库</category>
        <category>分库分表</category>
      </categories>
      <tags>
        <tag>Mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback配置与使用</title>
    <url>/2018/10/31/Logback%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>配置模板：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 定义参数常量 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- logger.trace("msg") logger.debug... --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.level"</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.maxHistory"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.filePath"</span> <span class="attr">value</span>=<span class="string">"$&#123;catalina.base&#125;/logs/webapps"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.pattern"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n"</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 控制台设置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- DEBUG --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"debugAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/debug/debug.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line">			<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- INFO --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"infoAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/info/info.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line">			<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ERROR --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"errorAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.filePath&#125;/erorr.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件名称 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.filePath&#125;/error/error.%d&#123;yyyy-MM-dd&#125;.log.gz</span><br><span class="line">			<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 文件最大保存历史数量 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;log.maxHistory&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.liuurick.o2o"</span> <span class="attr">level</span>=<span class="string">"$&#123;log.level&#125;"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"debugAppender"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"infoAppender"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"errorAppender"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleAppender"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>PXC方案的一些改进</title>
    <url>/2020/11/09/PXC%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>之前MySQL集群搭建使用的是PXC方案，最后想想还是有很多地方需要改进：</p>
<p>主要分为两点：1.负载均衡的高可用方案  2.引入热备份数据</p>
<a id="more"></a>

<h3 id="1-负载均衡的高可用方案"><a href="#1-负载均衡的高可用方案" class="headerlink" title="1.负载均衡的高可用方案"></a>1.负载均衡的高可用方案</h3><p>虽然之前的MySQL集群也有负载均衡，但是haproxy是单节点的，不具备高可用。。。</p>
<h4 id="1-1-安装Keepalived"><a href="#1-1-安装Keepalived" class="headerlink" title="1.1 安装Keepalived"></a>1.1 安装Keepalived</h4><p>进入容器<br><code>docker exec -it h1 bash</code><br>在容器中安装<br><code>apt-get update</code><br><code>apt-get install keepalived</code></p>
<h4 id="1-2-Keepalived配置文件"><a href="#1-2-Keepalived配置文件" class="headerlink" title="1.2 Keepalived配置文件"></a>1.2 Keepalived配置文件</h4><p>在容器中<br><code>vim /etc/keepalived/keepalived.conf</code><br>如果容器没有安装vim，请输入命令：<code>apt-get install vim</code><br>然后在文件里贴上配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.10.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>state 是keepalived的身份（MASTER主服务，BACKUP备服务器）。主服务要抢占虚拟IP，备用服务器不会抢占IP</li>
<li>interface 网卡设备</li>
<li>virtual_router_id 虚拟路由标识，MASTER和BACKUP的虚拟路由标识必须一致。标识可以是 0 ～ 255</li>
<li>priority 权重</li>
<li>advert_int 心跳检测秒，MASTER与BACKUP节点间同步检查的时间间。主备之间必须一致。</li>
<li>authentication 主从服务器验证方式。主备必须使用相同的密码才能正常通信</li>
<li>virtual_ipaddress 虚拟IP地址，可以设置多个虚拟IP地址，每行一个</li>
</ul>
<h4 id="1-3-启动keepalived"><a href="#1-3-启动keepalived" class="headerlink" title="1.3 启动keepalived"></a>1.3 启动keepalived</h4><p>在容器里输入命令：<code>service keepalived start</code><br>因为不能直接停止容器，所以为了正常退出不关闭容器，使用Ctrl+P+Q进行退出容器<br>检验：在宿主机中，我们使用：ping 172.10.0.201，检测是否真正启动</p>
<p><img src="/images/2020110901.png" alt="image-20201109224438458"></p>
<p><img src="/images/2020110902.png" alt="image-20201109225321905"></p>
<h3 id="2-MySQL集群-热备份数据"><a href="#2-MySQL集群-热备份数据" class="headerlink" title="2.MySQL集群 热备份数据"></a>2.MySQL集群 热备份数据</h3><h4 id="2-1-冷备份："><a href="#2-1-冷备份：" class="headerlink" title="2.1 冷备份："></a>2.1 冷备份：</h4><p>冷备份是一种常见的备份方式，通常做法是先关闭数据库，然后在拷贝数据文件。</p>
<p>这种方式简单安全，mysqldump就是典型的冷备份技术。</p>
<p>冷备份的弊端也很大，比如大型网站无法做到关闭业务备份数据，所以冷备份不是最佳选择<br>当然在之前提到的PXC集群中，我们可以中断某个节点，单独备份数据，再上线。</p>
<h4 id="2-2-热备份："><a href="#2-2-热备份：" class="headerlink" title="2.2 热备份："></a>2.2 热备份：</h4><p>热备份是在系统运行的状态下备份数据，也是难度最大的备份，Mysql常见的热备份有LVM和XtraBackup两种方案。<br>这里我使用的是XtraBackup方案实现热备份，XtraBackup是一款基于InnoDB的在线热备工具，具有开源免费，支持在线热备，占用磁盘空间小，能够非常快速地备份与恢复Mysql数据库等特点</p>
<p><strong>优势：</strong></p>
<ul>
<li><p>备份过程中不锁表、快速可靠</p>
</li>
<li><p>备份过程中不会打断正在执行的事务</p>
</li>
<li><p>能够基于压缩等功能节约磁盘空间和流量</p>
</li>
</ul>
<p><strong>每天进行一次增量备份，每周进行一次全量备份</strong></p>
<p><strong>全量备份：</strong>备份全部数据。备份过程时间长，占用空间大</p>
<p><strong>增量备份：</strong>只备份变化的数据。备份时间短，占用空间小</p>
<h4 id="2-3-全量数据热备份"><a href="#2-3-全量数据热备份" class="headerlink" title="2.3 全量数据热备份"></a>2.3 全量数据热备份</h4><p>1.创建数据卷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create backup</span><br></pre></td></tr></table></figure>

<p>2.选择数据节点映射数据卷</p>
<p>​    先停止节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop node1</span><br></pre></td></tr></table></figure>

<p>​    删除node1重新创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm node1</span><br></pre></td></tr></table></figure>

<p>​    创建node1</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=<span class="number">123456</span> -v v1:/<span class="keyword">var</span>/lib/mysql -v backup:/<span class="keyword">data</span> --privileged -e CLUSTER_JOIN=node2 --name=node1 --net=net1 --ip <span class="number">172.10</span><span class="number">.0</span><span class="number">.2</span> pxc</span><br></pre></td></tr></table></figure>



<p><strong>PXC容器中安装XtraBackup，并执行备份</strong></p>
<p>进入节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it node1 bash</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> update</span><br><span class="line">apt-<span class="keyword">get</span> install percona-xtrabackup<span class="number">-24</span></span><br></pre></td></tr></table></figure>

<p>全量备份</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> /<span class="keyword">data</span>/backup/full</span><br></pre></td></tr></table></figure>

<p>容器内备份数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">退出容器</span><br><span class="line">exit</span><br><span class="line">查看数据卷目录</span><br><span class="line">docker inspect backup</span><br><span class="line">进入备份目录</span><br></pre></td></tr></table></figure>

<h4 id="2-4-全量数据冷还原"><a href="#2-4-全量数据冷还原" class="headerlink" title="2.4 全量数据冷还原"></a>2.4 全量数据冷还原</h4><p>数据库可以热备份，但是不能热还原。为了避免恢复过程中的数据同步。我们采用空白的MySQL还原数据，然后再建立PXC集群；还原数据前要将未提交的事务回滚，还原数据之后重启MySQL。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">rm -rf /<span class="keyword">var</span>/lib/mysql<span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<p>事务回滚</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> --apply-back /<span class="keyword">data</span>/backup/full/</span><br></pre></td></tr></table></figure>

<p>全量数据冷还原</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> --<span class="built_in">copy</span>-back /data/backup/full/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>数据库集群</category>
      </categories>
      <tags>
        <tag>MySQL集群</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>@NotBlank,@NotEmpty,@NotNull三种注解</title>
    <url>/2020/12/18/NotBlank-NotEmpty-NotNull%E4%B8%89%E7%A7%8D%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@NotBlank 用于 String 判断空格</span><br><span class="line">@NotEmpty 用于集合</span><br><span class="line">@NotNull 用在基本类型上</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装及其配置</title>
    <url>/2020/07/31/Nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-Nginx-介绍"><a href="#1-Nginx-介绍" class="headerlink" title="1 Nginx 介绍"></a>1 Nginx 介绍</h1><h2 id="1-什么是Nginx"><a href="#1-什么是Nginx" class="headerlink" title="1 什么是Nginx"></a>1 什么是Nginx</h2><p>Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>
<p>由俄罗斯的程序设计师Igor Sysoev所开发，官方测试Nginx能够支支撑5万并发链接，</p>
<p>并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
<h2 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2 应用场景"></a>2 应用场景</h2><p>1、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</p>
<p>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</p>
<p>3、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，</p>
<p>需要用多台服务器集群可以使用Nginx做反向代理。并且多台服务器可以平均分担负载，</p>
<p>不会因为某台服务器负载高宕机而某台服务器闲置的情况。</p>
<h1 id="2-Nginx安装"><a href="#2-Nginx安装" class="headerlink" title="2 Nginx安装"></a>2 Nginx安装</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h2><p>官方网址：<a href="http://Nginx.org/en/download.html" target="_blank" rel="noopener">http://Nginx.org/en/download.html</a></p>
<p>官网提供三种版本：</p>
<p>Nginx官网提供了三个类型的版本<br>Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版<br>Stable version：最新稳定版，生产环境上建议使用的版本<br>Legacy versions：遗留的老版本的稳定版</p>
<p><img src="/images/2020073101.png" alt="img"></p>
<p>我们这里下载的是Stable version下面的</p>
<p><img src="/images/2020073102.png" alt="img"></p>
<p>使用的版本是1.14.0.tar.gz.</p>
<h2 id="2-安装要求的环境"><a href="#2-安装要求的环境" class="headerlink" title="2 安装要求的环境"></a>2 安装要求的环境</h2><p>下面的环境需要视自己的系统情况而定，没有的环境安装以下就好。</p>
<p><strong>1.需要安装gcc环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p><strong>2.第三方的开发包</strong></p>
<p><strong>1 PERE</strong></p>
<p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。</p>
<p>Nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p>
<p><strong>注：pcre-devel是使用pcre开发的一个二次开发库。Nginx**</strong>也需要此库**。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<p><strong>2 zlib</strong></p>
<p>zlib库提供了很多种压缩和解压缩的方式，Nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<p><strong>3 openssl</strong></p>
<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，</p>
<p>并提供丰富的应用程序供测试或其它目的使用。</p>
<p>Nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre  pcre-devel zlib  zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h2 id="3-Nginx安装过程"><a href="#3-Nginx安装过程" class="headerlink" title="3 Nginx安装过程"></a>3 Nginx安装过程</h2><p><strong>1 把Nginx源码包上传到linux系统上</strong></p>
<p><img src="/images/2020073103.png" alt="img"></p>
<p><strong>2 解压到/usr/local下面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf Nginx-1.14.0.tar.gz -C &#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure>

<p><strong>3 使用cofigure命令创建一个makeFile文件</strong></p>
<p><strong>执行下面的命令的时候，一定要进入到Nginx-1.14.0目录里面去。</strong></p>
<p><img src="/images/2020073104.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Nginx \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;Nginx&#x2F;Nginx.pid \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;Nginx.lock \</span><br><span class="line">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;Nginx&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;Nginx&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;Nginx&#x2F;client \</span><br><span class="line">--http-proxy-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;Nginx&#x2F;proxy \</span><br><span class="line">--http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;Nginx&#x2F;fastcgi \</span><br><span class="line">--http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;Nginx&#x2F;uwsgi \</span><br><span class="line">--http-scgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;Nginx&#x2F;scgi \--with-http_stub_status_module \--with-http_ssl_module \--with-file-aio \--with-http_realip_module</span><br></pre></td></tr></table></figure>

<p>如果没有makeFile文件，编译的时候会报错</p>
<p><img src="/images/2020073105.png" alt="img"></p>
<p>\ 表示命令还没有输入完，换行的意思。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Nginx  表示软件安装到&#x2F;usr&#x2F;local&#x2F;Nginx下面。</span><br><span class="line">这个make install 的时候就不用在指定安装路径。</span><br><span class="line">执行完成后查看目录里面已经多了一个Makefile文件</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073106.png" alt="img"></p>
<p><strong>注意：启动Nginx之前，上边将临时文件目录指定为/var/temp/Nginx，</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要在&#x2F;var下创建temp及Nginx目</span><br></pre></td></tr></table></figure>

<p><strong>4 创建目录/var/temp/Nginx/</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;var&#x2F;temp&#x2F;Nginx -p</span><br></pre></td></tr></table></figure>

<p>-p 表示级联创建的意思</p>
<p><strong>5 进入Nginx-1.14.0里面执行make命令进行编译</strong></p>
<p> <img src="/images/2020073107.png" alt="img"></p>
<p><strong>6 进入Nginx-1.14.0里面执行make install 命令进行安装</strong></p>
<p> 这里不需要再次执行安装路径，创建makefile文件的时候已经指定了。</p>
<p><img src="/images/2020073108.png" alt="img"></p>
<p><strong>7 进入安装位置/usr/local/Nginx查看目录结构</strong></p>
<p><img src="/images/2020073109.png" alt="img"></p>
<p>其中html是里面首页html文件。conf里面是配置文件。sbin里面只执行文件。</p>
<h1 id="3-启动Nginx"><a href="#3-启动Nginx" class="headerlink" title="3 启动Nginx"></a>3 启动Nginx</h1><p>进入sbin目录，执行命令./Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<h1 id="4-查看Nginx是否启动"><a href="#4-查看Nginx是否启动" class="headerlink" title="4 查看Nginx是否启动"></a>4 查看Nginx是否启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# ps -aux | grep Nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073110.png" alt="img"></p>
<p><strong>ps命令</strong>用于报告当前系统的进程状态。</p>
<p>-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。</p>
<p>a：显示现行终端机下的所有程序，包括其他用户的程序。</p>
<p>u：以用户为主的格式来显示程序状况。</p>
<p>x：显示所有程序，不以终端机来区分。</p>
<h1 id="5-关闭Nginx"><a href="#5-关闭Nginx" class="headerlink" title="5 关闭Nginx"></a>5 关闭Nginx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]#  .&#x2F;Nginx -s stop</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;Nginx -s quit</span><br></pre></td></tr></table></figure>



<h1 id="6-重启Nginx"><a href="#6-重启Nginx" class="headerlink" title="6 重启Nginx"></a>6 重启Nginx</h1><p>先关闭，然后启动</p>
<h1 id="7-刷新配置文件"><a href="#7-刷新配置文件" class="headerlink" title="7 刷新配置文件"></a>7 刷新配置文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;Nginx -s reload</span><br></pre></td></tr></table></figure>



<h1 id="8-关闭防火墙，开启远程访问"><a href="#8-关闭防火墙，开启远程访问" class="headerlink" title="8 关闭防火墙，开启远程访问"></a>8 关闭防火墙，开启远程访问</h1><p>首先需要关闭防火墙：默认端口是80</p>
<p><strong>方法一：永久开放80端口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save</span><br></pre></td></tr></table></figure>

<p><strong>方法二：临时关闭系统防火墙</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service iptables stop</span><br></pre></td></tr></table></figure>

<p><strong>方法三：永久关闭修改配置开机不启动防火墙</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig iptables off</span><br></pre></td></tr></table></figure>

<p><strong>特殊：针对阿里云</strong></p>
<p>需要添加安全组规则</p>
<p><img src="/images/2020073111.png" alt="img"></p>
<h1 id="9-访问Nginx"><a href="#9-访问Nginx" class="headerlink" title="9 访问Nginx"></a>9 访问Nginx</h1><p><img src="/images/2020073112.png" alt="img"></p>
<h1 id="10-配置虚拟主机"><a href="#10-配置虚拟主机" class="headerlink" title="10 配置虚拟主机"></a>10 配置虚拟主机</h1><p>就是在一台服务器启动多个网站。</p>
<p>如何区分不同的网站：主要有以下两种方式</p>
<p>方式一：端口不同</p>
<p>方式二：域名不同</p>
<h1 id="11-通过端口区分不同的主机"><a href="#11-通过端口区分不同的主机" class="headerlink" title="11 通过端口区分不同的主机"></a>11 通过端口区分不同的主机</h1><p>Nginx配置文件的位置：/usr/local/Nginx/conf/Nginx.conf</p>
<p>原始配置文件的内容如下：</p>
<p><img src="/images/2020073113.png" alt="img"></p>
<p>我们可以通过配置多个server,从而配置多个虚拟机</p>
<p><img src="/images/2020073114.png" alt="img"></p>
<p>下面测试以下：复制原来的html目录，改名为html-81</p>
<p><img src="/images/2020073115.png" alt="img"></p>
<p>修改以下里面的index.html文件，方便区分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin Nginx]# vim html-81&#x2F;index.html</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073116.png" alt="img"></p>
<p>修改完成之后刷新以下配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;Nginx -s reload</span><br></pre></td></tr></table></figure>

<p>然后分别访问192.168.204.131:80 和192.168.204.131:81</p>
<p><img src="/images/2020073117.png" alt="img"></p>
<p><img src="/images/2020073118.png" alt="img"></p>
<h1 id="12-多个域名区分虚拟主机"><a href="#12-多个域名区分虚拟主机" class="headerlink" title="12 多个域名区分虚拟主机"></a>12 多个域名区分虚拟主机</h1><h2 id="1-什么是域名"><a href="#1-什么是域名" class="headerlink" title="1 什么是域名"></a>1 什么是域名</h2><p>域名就是网站：<a href="http://www.baidu.com就是域名" target="_blank" rel="noopener">www.baidu.com就是域名</a></p>
<p>DNS域名解析服务器，把域名解析为ip地址。保存的就是域名和ip地址的映射关系。</p>
<p>一级域名：baidu.com</p>
<p>二级域名：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p>三级域名：image.baidu.com</p>
<p>一个域名对应与一个ip地址，一个ip地址可以被多个域名绑定。</p>
<p>只需要买一个一级域名，后面的二级，三级域名你自己可以随便定义。</p>
<p>本地测试我们可以通过修改hosts配置文件来完成：</p>
<p>hosts文件的位置：C:\Windows\System32\drivers\etc</p>
<p>可以自己手动配置域名和ip的映射关系，如果hosts文件中配置了域名和ip的对应关系，不需要走DNS域名解析服务器。</p>
<p>因为拿到一个域名，首先是到hosts文件里面查找，没有才有去DNS域名解析器查找。</p>
<h2 id="2-Nginx配置"><a href="#2-Nginx配置" class="headerlink" title="2 Nginx配置"></a>2 Nginx配置</h2><p><img src="/images/2020073119.png" alt="img"></p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h2><p>1 修改本地hosts配置文件</p>
<p><img src="/images/2020073120.png" alt="img"></p>
<p>2 复制html目录，分别改名为html-taobao和html-baidu</p>
<p><img src="/images/2020073121.png" alt="img"></p>
<p>3 分别修改html-baidu和html-taobao里面的index.html文件，方便区分</p>
<p><img src="/images/2020073123.png" alt="img"></p>
<p><img src="/images/2020073122.png" alt="img"></p>
<p>4 刷新配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;Nginx -s reload</span><br></pre></td></tr></table></figure>

<p>5 然后使用浏览器分别访问：<a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a> 和 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<h1 id="13-正向代理"><a href="#13-正向代理" class="headerlink" title="13 正向代理"></a>13 正向代理</h1><p><img src="/images/2020073124.png" alt="img"></p>
<h1 id="14-反向代理"><a href="#14-反向代理" class="headerlink" title="14 反向代理"></a>14 反向代理</h1><p><img src="/images/2020073125.png" alt="img"></p>
<p>反向代理服务器决定那台服务器提供服务</p>
<h1 id="15-Nginx实现反向代理"><a href="#15-Nginx实现反向代理" class="headerlink" title="15 Nginx实现反向代理"></a>15 Nginx实现反向代理</h1><p>两个域名指向同一台Nginx服务器，用户访问不同的域名显示不同的网页内容。</p>
<p>两个域名是<a href="http://www.baidu.com和www.taobao.com" target="_blank" rel="noopener">www.baidu.com和www.taobao.com</a></p>
<p>Nginx代理服务器使用虚拟机192.168.204.131</p>
<p><img src="/images/2020073126.png" alt="img"></p>
<p>第一步：安装两个tomcat，分别运行在8080和8081端口。</p>
<p>第二步：启动两个tomcat。</p>
<p>第三步：反向代理服务器的配置</p>
<p> <img src="/images/020073127.png" alt="img"></p>
<p>第四步：Nginx重新加载配置文件</p>
<p>第五步：配置域名</p>
<p>在hosts文件中添加域名和ip的映射关系</p>
<p>192.168.204.131 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p>192.168.204.131 <a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a></p>
<h1 id="16-负载均衡"><a href="#16-负载均衡" class="headerlink" title="16 负载均衡"></a>16 负载均衡</h1><p>如果一个服务由多个服务器提供，需要把负载分配到不同的服务器处理，需要负载均衡。</p>
<p><img src="/images/2020073128.png" alt="img"></p>
<p>可以根据服务器的实际情况调整服务器权重。权重越高分配的请求越多，权重越低，请求越少。默认是都是1</p>
<p><img src="/images/2020073129.png" alt="img"></p>
<h1 id="17-设置Nginx开机自启动（centos6-5）"><a href="#17-设置Nginx开机自启动（centos6-5）" class="headerlink" title="17 设置Nginx开机自启动（centos6.5）"></a>17 设置Nginx开机自启动（centos6.5）</h1><p>每次启动Nginx服务都需要到安装目录下的/sbin下面，感觉挺麻烦的。</p>
<p>下面介绍一下如何在Linux(CentOS)系统上，设置Nginx开机自启动。</p>
<h2 id="1-用脚本管理Nginx服务"><a href="#1-用脚本管理Nginx服务" class="headerlink" title="1 用脚本管理Nginx服务"></a>1 用脚本管理Nginx服务</h2><p><strong>第一步：在/etc/init.d/目录下创建Nginx文件，命令如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># touch &#x2F;etc&#x2F;init.d&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p><strong>第二步：在创建的Nginx文件中加入下面的内容</strong></p>
<p>首先执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;init.d&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p>然后加下面的内容复制到Nginx配置文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">#</span><br><span class="line"># Nginx - this script starts and stops the Nginx daemon</span><br><span class="line">#</span><br><span class="line"># chkconfig:   - 85 15</span><br><span class="line"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="line">#               proxy and IMAP&#x2F;POP3 proxy server</span><br><span class="line"># processname: Nginx</span><br><span class="line"># config:      &#x2F;etc&#x2F;Nginx&#x2F;Nginx.conf</span><br><span class="line"># config:      &#x2F;etc&#x2F;sysconfig&#x2F;Nginx</span><br><span class="line"># pidfile:     &#x2F;var&#x2F;run&#x2F;Nginx.pid</span><br><span class="line"># Source function library.</span><br><span class="line">. &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions</span><br><span class="line"># Source networking configuration.</span><br><span class="line">. &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line"># Check that networking is up.</span><br><span class="line">[ &quot;$NETWORKING&quot; &#x3D; &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class="line">Nginx&#x3D;&quot;&#x2F;usr&#x2F;sbin&#x2F;Nginx&quot;</span><br><span class="line">prog&#x3D;$(basename $Nginx)</span><br><span class="line">NGINX_CONF_FILE&#x3D;&quot;&#x2F;etc&#x2F;Nginx&#x2F;Nginx.conf&quot;</span><br><span class="line">[ -f &#x2F;etc&#x2F;sysconfig&#x2F;Nginx ] &amp;&amp; . &#x2F;etc&#x2F;sysconfig&#x2F;Nginx</span><br><span class="line">lockfile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;Nginx</span><br><span class="line">make_dirs() &#123;</span><br><span class="line">   # make required directories</span><br><span class="line">   user&#x3D;&#96;$Nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &#39;s&#x2F;[^*]*--user&#x3D;\([^ ]*\).*&#x2F;\1&#x2F;g&#39; -&#96;</span><br><span class="line">   if [ -z &quot;&#96;grep $user &#x2F;etc&#x2F;passwd&#96;&quot; ]; then</span><br><span class="line">       useradd -M -s &#x2F;bin&#x2F;nologin $user</span><br><span class="line">   fi</span><br><span class="line">   options&#x3D;&#96;$Nginx -V 2&gt;&amp;1 | grep &#39;configure arguments:&#39;&#96;</span><br><span class="line">   for opt in $options; do</span><br><span class="line">       if [ &#96;echo $opt | grep &#39;.*-temp-path&#39;&#96; ]; then</span><br><span class="line">           value&#x3D;&#96;echo $opt | cut -d &quot;&#x3D;&quot; -f 2&#96;</span><br><span class="line">           if [ ! -d &quot;$value&quot; ]; then</span><br><span class="line">               # echo &quot;creating&quot; $value</span><br><span class="line">               mkdir -p $value &amp;&amp; chown -R $user $value</span><br><span class="line">           fi</span><br><span class="line">       fi</span><br><span class="line">   done</span><br><span class="line">&#125;</span><br><span class="line">start() &#123;</span><br><span class="line">    [ -x $Nginx ] || exit 5</span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</span><br><span class="line">    make_dirs</span><br><span class="line">    echo -n $&quot;Starting $prog: &quot;</span><br><span class="line">    daemon $Nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class="line">    killproc $Nginx -HUP</span><br><span class="line">    RETVAL&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line">configtest() &#123;</span><br><span class="line">  $Nginx -t -c $NGINX_CONF_FILE</span><br><span class="line">&#125;</span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<p>上面的脚本文件并不是自己写的，是Nginx官方提供的。</p>
<p>地址：<a href="http://wiki.Nginx.org/RedHatNginxInitScript" target="_blank" rel="noopener">http://wiki.Nginx.org/RedHatNginxInitScript</a></p>
<p>注意：如果是自定义安装的Nginx,修改根据实际情况修改安装路和配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx&#x3D;&quot;&#x2F;usr&#x2F;sbin&#x2F;Nginx&quot; 修改成你的Nginx执行程序的路径。比如我的是Nginx&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx&quot;</span><br><span class="line">NGINX_CONF_FILE&#x3D;&quot;&#x2F;etc&#x2F;Nginx&#x2F;Nginx.conf&quot; 修改成你的配置文件的路径</span><br><span class="line">例如：NGINX_CONF_FILE&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;Nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改完成后保存脚本文件，wq 保存并退出</p>
<p><strong>第三步：设置Nginx文件的权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod a+x &#x2F;etc&#x2F;init.d&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p>解释：a+x==&gt;all user can execute 所有用户可执行）的意思</p>
<p><strong>第四步：管理脚本</strong></p>
<p>到这里，我们就可以使用Nginx脚本对服务进行管理了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;Nginx start      启动服务</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;Nginx stop       停止服务  # &#x2F;etc&#x2F;init.d&#x2F;Nginx restart    重启服务</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;Nginx status     查看服务的状态# &#x2F;etc&#x2F;init.d&#x2F;Nginx reload     刷新配置文件</span><br></pre></td></tr></table></figure>

<h2 id="2-使用chkconfig管理"><a href="#2-使用chkconfig管理" class="headerlink" title="2 使用chkconfig管理"></a>2 使用chkconfig管理</h2><p>上面的方法完成了用脚本管理Nginx服务的功能，但是还是不太方便，比如要设置Nginx开机启动等。</p>
<p>这个时候我们可以使用chkconfig来进行管理。</p>
<p><strong>第一步：将Nginx服务加入chkconfig管理列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig --add &#x2F;etc&#x2F;init.d&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p><strong>第二步：使用service管理服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service Nginx start    启动服务</span><br><span class="line"># service Nginx stop     停止服务# service Nginx restart  重启服务# service Nginx status   查询服务的状态# service Nginx relaod   刷新配置文</span><br></pre></td></tr></table></figure>

<p><strong>第三步：设置终端模式开机启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig Nginx on</span><br></pre></td></tr></table></figure>



<h1 id="17-设置Nginx开机自启动（centos7-4）"><a href="#17-设置Nginx开机自启动（centos7-4）" class="headerlink" title="17 设置Nginx开机自启动（centos7.4）"></a>17 设置Nginx开机自启动（centos7.4）</h1><p> <strong>第一步：进入到/lib/systemd/system/目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iz2z init.d]# cd &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>第二步：创建Nginx.service文件，并编辑</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim Nginx.service</span><br></pre></td></tr></table></figure>

<p>内如如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx service</span><br><span class="line">After&#x3D;network.target </span><br><span class="line">   </span><br><span class="line">[Service] </span><br><span class="line">Type&#x3D;forking </span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx</span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx -s quit</span><br><span class="line">PrivateTmp&#x3D;true </span><br><span class="line">   </span><br><span class="line">[Install] </span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<p>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br><strong>注意</strong>：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p>
<p>保存退出。</p>
<p><strong>第三步：加入开机自启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl enable Nginx</span><br></pre></td></tr></table></figure>

<p>如果不想开机自启动了，可以使用下面的命令取消开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl disable Nginx</span><br></pre></td></tr></table></figure>

<p><strong>第四步：服务的启动/停止/刷新配置文件/查看状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl start Nginx.service　         启动Nginx服务</span><br><span class="line"># systemctl stop Nginx.service　          停止服务</span><br><span class="line"># systemctl restart Nginx.service　       重新启动服务</span><br><span class="line"># systemctl list-units --type&#x3D;service     查看所有已启动的服务</span><br><span class="line"># systemctl status Nginx.service          查看服务当前状态</span><br><span class="line"># systemctl enable Nginx.service          设置开机自启动</span><br><span class="line"># systemctl disable Nginx.service         停止开机自启动</span><br></pre></td></tr></table></figure>

<h2 id="一个常见的错误"><a href="#一个常见的错误" class="headerlink" title="一个常见的错误"></a><strong>一个常见的错误</strong></h2><h3 id="Warning-Nginx-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units"><a href="#Warning-Nginx-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units" class="headerlink" title="Warning: Nginx.service changed on disk. Run ‘systemctl daemon-reload’ to reload units."></a>Warning: Nginx.service changed on disk. Run ‘systemctl daemon-reload’ to reload units.</h3><p> 直接按照提示执行命令systemctl daemon-reload 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>



<h1 id="18-重启系统，再次启动Nginx报错"><a href="#18-重启系统，再次启动Nginx报错" class="headerlink" title="18 重启系统，再次启动Nginx报错"></a>18 重启系统，再次启动Nginx报错</h1><h2 id="1-故障现场"><a href="#1-故障现场" class="headerlink" title="1 故障现场"></a>1 故障现场</h2><p>之前在虚拟机centos6.5上面设置自启动之后，重新启动系统可以正常启动，也不会出错。</p>
<p>centos6.5的自启动设置见16部分知识点。</p>
<p>但是在centos7.4(阿里云上面），参照第17部分配置好了自启动。重启系统发现Nginx并没有自启动</p>
<p>使用命名systemctl status Nginx查看了一下状态，内容如下：</p>
<p><img src="/images/2020073130.png" alt="img"></p>
<p>然后我直接进入/usr/local/Nginx/sbin目录下面，执行./Nginx，出现了下面的错误提示：</p>
<p><img src="/images/2020073131.png" alt="img"></p>
<p>从这两个提示信息，可以大概看出告诉我们的就是找不到/var/run/Nginx/目录下面的Nginx.pid文件。</p>
<h2 id="2-故障解决"><a href="#2-故障解决" class="headerlink" title="2 故障解决"></a>2 故障解决</h2><p><strong>第一步：进入 cd /usr/local/Nginx/conf/ 目录，编辑配置文件Nginx.conf ；</strong></p>
<p>在配置文件中找到：#pid    logs/Nginx.pid;</p>
<p><img src="/images/2020073132.png" alt="img"></p>
<p>将其修改为：去掉注释，修改成自己的路径</p>
<p><img src="/images/2020073133.png" alt="img"></p>
<p>修改完成保存退出</p>
<p><strong>第二步：创建目录/var/run/Nginx/</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;var&#x2F;run&#x2F;Nginx -p</span><br></pre></td></tr></table></figure>

<p><strong>第三步：启动Nginx服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p>可以查看一下是否成功启动了</p>
<p><img src="/images/2020073134.png" alt="img"></p>
<h2 id="3-故障重现"><a href="#3-故障重现" class="headerlink" title="3 故障重现"></a>3 故障重现</h2><blockquote>
<p>[emerg] open() “/var/run/Nginx/Nginx.pid” failed (2: No such file or directory)处理</p>
</blockquote>
<p>测试发现，只要执行reboot命令重启，var/run/Nginx，Nginx这个文件夹都会被删除，</p>
<p>搞得每一次都要去建立Nginx这个文件夹，简直麻烦到了极点，实在受不了。下面</p>
<p>继续来解决这个问题。</p>
<p><strong>第一步：进入 cd /usr/local/Nginx/conf/ 目录，编辑配置文件Nginx.conf ；</strong></p>
<p><img src="/images/2020073135.png" alt="img"></p>
<p><strong>第二步：在/usr/local/Nginx目录下建立logs文件夹</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;logs</span><br></pre></td></tr></table></figure>

<p><strong><img src="/images/2020073136.png" alt="img"></strong></p>
<p><strong>第三步：把/var/run/Nginx/目录下的Nginx.pid这个文件拷贝到第二步创建的logs文件夹里面。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp Nginx.pid &#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;logs&#x2F;</span><br></pre></td></tr></table></figure>

<p> <img src="/images/2020073137.png" alt="img"></p>
<p><strong>第四步：把logs这个文件夹在conf下也拷贝一份</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp -r logs conf</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073138.png" alt="img"></p>
<p><strong>第五步：修改权限/usr/local/Nginx/logs/目录下面的Nginx.pid文件的权限。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iz2logs]# chmod 755 Nginx.pid</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073139.png" alt="img"></p>
<p><strong>第六步：重启reboot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure>

<p><strong>第六步：启动Nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073140.png" alt="img"></p>
<p>这次是终于成功解决了，一边安装一边解决问题，到这里Nginx总是算是可以自启动了，并且也不会重启后找不到Nginx.pid文件。真的太不容易了。</p>
<p><strong>解决的原理：就是让它去另外一个地方找Nginx.pid文件，</strong></p>
<p><strong>因为/var/run/Nginx/Nginx.pid这个文件总是重启就删除了</strong>。</p>
<h2 id="简单解决方案"><a href="#简单解决方案" class="headerlink" title="简单解决方案"></a>简单解决方案</h2><p>上面的过程有点繁琐了，实际可以直接按照下面的这个简单方法解决</p>
<p>修改Nginx.conf文件如下：</p>
<p><img src="/images/2020073141.png" alt="img"></p>
<p>在/usr/local/Nginx/目录下创建一个logs目录。</p>
<p>然后启动就可以了，并且重启也不会被删除。</p>
<p>这样下面的日志文件的配置也可以简化为去掉# error_log logs/error.log info; 前面的“#”就可以了</p>
<p>error_log logs/error.log info;</p>
<h1 id="19-配置日志文件的位置"><a href="#19-配置日志文件的位置" class="headerlink" title="19 配置日志文件的位置"></a>19 配置日志文件的位置</h1><p><strong>第一步：进入 cd /usr/local/Nginx/conf/ 目录，编辑配置文件Nginx.conf ；</strong></p>
<p><img src="/images/2020073142.png" alt="img"></p>
<p><strong>第二步：保证肯定有这个路径，可以直接创建一下这个配置的目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p &#x2F;var&#x2F;log&#x2F;Nginx&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：刷新配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;Nginx&#x2F;sbin&#x2F;Nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维知识</category>
        <category>Web服务器</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis应用场景</title>
    <url>/2019/12/18/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>Redis以高性能著称，了解与掌握redis常用操作很有必要</p>
<a id="more"></a>

<blockquote>
<p>Redis安装：<a href="https://www.runoob.com/docker/docker-install-redis.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-install-redis.html</a></p>
</blockquote>
<blockquote>
<p>Redis可视化软件：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
</blockquote>
<p>Redis常见场景主要有以下几种:</p>
<h4 id="1-缓存"><a href="#1-缓存" class="headerlink" title="1.缓存"></a>1.缓存</h4><p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p>
<h4 id="2-排行榜"><a href="#2-排行榜" class="headerlink" title="2.排行榜"></a>2.排行榜</h4><p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p>
<h4 id="3-计数器"><a href="#3-计数器" class="headerlink" title="3.计数器"></a>3.计数器</h4><p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>
<h4 id="4-分布式会话"><a href="#4-分布式会话" class="headerlink" title="4.分布式会话"></a>4.分布式会话</h4><p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p>
<h4 id="5-分布式锁"><a href="#5-分布式锁" class="headerlink" title="5.分布式锁"></a>5.分布式锁</h4><p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p>
<h4 id="6-社交网络"><a href="#6-社交网络" class="headerlink" title="6. 社交网络"></a>6. 社交网络</h4><p>点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p>
<h4 id="7-最新列表"><a href="#7-最新列表" class="headerlink" title="7.最新列表"></a>7.最新列表</h4><p>Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p>
<h4 id="8-消息系统"><a href="#8-消息系统" class="headerlink" title="8.消息系统"></a>8.消息系统</h4><p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PXC脚本命令</title>
    <url>/2020/12/13/PXC%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>通过Centos搭建PXC集群脚本命令</p>
<a id="more"></a>

<p>[TOC]</p>
<h1 id="一、安装Percona数据库"><a href="#一、安装Percona数据库" class="headerlink" title="一、安装Percona数据库"></a>一、安装Percona数据库</h1><h2 id="1-离线安装Percona"><a href="#1-离线安装Percona" class="headerlink" title="1. 离线安装Percona"></a>1. 离线安装Percona</h2><ul>
<li><p>进入RPM安装文件目录，执行下面的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl stop mysqld</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-在线安装Percona"><a href="#2-在线安装Percona" class="headerlink" title="2. 在线安装Percona"></a>2. 在线安装Percona</h2><ul>
<li><p>使用yum命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</span><br><span class="line">yum  install  Percona-Server-server-57</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-开放防火墙端口"><a href="#3-开放防火墙端口" class="headerlink" title="3. 开放防火墙端口"></a>3. 开放防火墙端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="4-修改MySQL配置文件"><a href="#4-修改MySQL配置文件" class="headerlink" title="4. 修改MySQL配置文件"></a>4. 修改MySQL配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character_set_server</span> = utf8</span><br><span class="line"><span class="attr">bind-address</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment">#跳过DNS解析</span></span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h2 id="5-禁止开机启动MySQL"><a href="#5-禁止开机启动MySQL" class="headerlink" title="5. 禁止开机启动MySQL"></a>5. 禁止开机启动MySQL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld off</span><br></pre></td></tr></table></figure>

<h2 id="6-初始化MySQL数据库"><a href="#6-初始化MySQL数据库" class="headerlink" title="6. 初始化MySQL数据库"></a>6. 初始化MySQL数据库</h2><ul>
<li><p>查看MySQL初始密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep "A temporary password"</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改MySQL密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建远程管理员账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'admin'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'Abc_123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="二、创建PXC集群"><a href="#二、创建PXC集群" class="headerlink" title="二、创建PXC集群"></a>二、创建PXC集群</h1><h2 id="1-删除MariaDB程序包"><a href="#1-删除MariaDB程序包" class="headerlink" title="1. 删除MariaDB程序包"></a>1. 删除MariaDB程序包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove mari*</span><br></pre></td></tr></table></figure>

<h2 id="2-开放防火墙端口"><a href="#2-开放防火墙端口" class="headerlink" title="2. 开放防火墙端口"></a>2. 开放防火墙端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4444/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4567/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent</span><br></pre></td></tr></table></figure>

<h2 id="3-关闭SELINUX"><a href="#3-关闭SELINUX" class="headerlink" title="3. 关闭SELINUX"></a>3. 关闭SELINUX</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p>把SELINUX属性值设置成disabled</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="4-离线安装PXC"><a href="#4-离线安装PXC" class="headerlink" title="4. 离线安装PXC"></a>4. 离线安装PXC</h2><ul>
<li><p>进入RPM文件目录，执行安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>参考第一章内容，修改MySQL配置文件、创建账户等操作</p>
</li>
</ul>
<h2 id="5-创建PXC集群"><a href="#5-创建PXC集群" class="headerlink" title="5. 创建PXC集群"></a>5. 创建PXC集群</h2><ul>
<li><p>停止MySQL服务</p>
</li>
<li><p>修改每个PXC节点的/etc/my.cnf文件（在不同节点上，注意调整文件内容）</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server-id</span>=<span class="number">1</span>  <span class="comment">#PXC集群中MySQL实例的唯一ID，不能重复，必须是数字</span></span><br><span class="line"><span class="attr">wsrep_provider</span>=/usr/lib64/galera3/libgalera_smm.so</span><br><span class="line"><span class="attr">wsrep_cluster_name</span>=pxc-cluster  <span class="comment">#PXC集群的名称</span></span><br><span class="line"><span class="attr">wsrep_cluster_address</span>=gcomm://<span class="number">192.168</span>.<span class="number">99.151</span>,<span class="number">192.168</span>.<span class="number">99.159</span>,<span class="number">192.168</span>.<span class="number">99.215</span></span><br><span class="line"><span class="attr">wsrep_node_name</span>=pxc1  <span class="comment">#当前节点的名称</span></span><br><span class="line"><span class="attr">wsrep_node_address</span>=<span class="number">192.168</span>.<span class="number">99.151</span>  <span class="comment">#当前节点的IP</span></span><br><span class="line"><span class="attr">wsrep_sst_method</span>=xtrabackup-v2  <span class="comment">#同步方法（mysqldump、rsync、xtrabackup）</span></span><br><span class="line"><span class="attr">wsrep_sst_auth</span>= admin:Abc_123456  <span class="comment">#同步使用的帐户</span></span><br><span class="line"><span class="attr">pxc_strict_mode</span>=ENFORCING  <span class="comment">#同步严厉模式</span></span><br><span class="line"><span class="attr">binlog_format</span>=ROW  <span class="comment">#基于ROW复制（安全可靠）</span></span><br><span class="line"><span class="attr">default_storage_engine</span>=InnoDB  <span class="comment">#默认引擎</span></span><br><span class="line"><span class="attr">innodb_autoinc_lock_mode</span>=<span class="number">2</span>  <span class="comment">#主键自增长不锁表</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主节点的管理命令（第一个启动的PXC节点）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysql@bootstrap.service</span><br><span class="line">systemctl stop mysql@bootstrap.service</span><br><span class="line">systemctl restart mysql@bootstrap.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>非主节点的管理命令（非第一个启动的PXC节点）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service start mysql</span><br><span class="line">service stop mysql</span><br><span class="line">service restart mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看PXC集群状态信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;wsrep_cluster%&#39; ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>按照上述配置方法，创建两组PXC集群</strong></p>
</li>
</ul>
<h2 id="6-PXC节点启动与关闭"><a href="#6-PXC节点启动与关闭" class="headerlink" title="6. PXC节点启动与关闭"></a>6. PXC节点启动与关闭</h2><ul>
<li>如果最后关闭的PXC节点是安全退出的，那么下次启动要最先启动这个节点，而且要以主节点启动</li>
<li>如果最后关闭的PXC节点不是安全退出的，那么要先修改<code>/var/lib/mysql/grastate.dat</code> 文件，把其中的<code>safe_to_bootstrap</code>属性值设置为1，再安装主节点启动</li>
</ul>
<h1 id="三、安装MyCat"><a href="#三、安装MyCat" class="headerlink" title="三、安装MyCat"></a>三、安装MyCat</h1><h2 id="1-JDK安装与配置"><a href="#1-JDK安装与配置" class="headerlink" title="1. JDK安装与配置"></a>1. JDK安装与配置</h2><ul>
<li><p>安装JDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索JDK版本</span></span><br><span class="line">yum search jdk </span><br><span class="line"><span class="meta">#</span><span class="bash">安装JDK1.8开发版</span></span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看JDK安装路径</span></span><br><span class="line">ls -lrt /etc/alternatives/java</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件结尾加上JDK路径，例如<span class="built_in">export</span>  JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.171-8.b10.el7_5.x86_64/</span></span><br><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2. 创建数据表"></a>2. 创建数据表</h2><ul>
<li><p>在两组PXC集群中分别创建t_user数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_user(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    username VARCHAR(200) NOT NULL,</span><br><span class="line">    password VARCHAR(2000) NOT NULL,</span><br><span class="line">    tel CHAR(11) NOT NULL,</span><br><span class="line">    locked TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">    INDEX idx_username(username) USING BTREE,</span><br><span class="line">    UNIQUE INDEX unq_username(username) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-MyCat安装与配置"><a href="#3-MyCat安装与配置" class="headerlink" title="3. MyCat安装与配置"></a>3. MyCat安装与配置</h2><ol>
<li><p>下载MyCat</p>
<p><a href="http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz" target="_blank" rel="noopener">http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.</a><a href="http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz" target="_blank" rel="noopener">gz</a></p>
</li>
<li><p>上传MyCat压缩包到虚拟机</p>
</li>
<li><p>安装unzip程序包，解压缩MyCat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install unzip</span><br><span class="line">unzip MyCAT压缩包名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放防火墙8066和9066端口，关闭SELINUX</p>
</li>
<li><p>修改MyCat的bin目录中所有.sh文件的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -R 777 .&#x2F;*.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyCat启动与关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> MyCat的bin目录</span></span><br><span class="line">./startup_nowrap.sh #启动MyCat</span><br><span class="line">ps -aux #查看系统进程</span><br><span class="line">kill -9 MyCat进程编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改server.xml文件，设置MyCat帐户和虚拟逻辑库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span><br><span class="line">&lt;mycat:server xmlns:mycat="http://io.mycat/"&gt;</span><br><span class="line">  	&lt;system&gt;</span><br><span class="line">  		&lt;property name="nonePasswordLogin"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useHandshakeV10"&gt;1&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useSqlStat"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useGlobleTableCheck"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="sequnceHandlerType"&gt;2&lt;/property&gt;</span><br><span class="line">  		&lt;property name="subqueryRelationshipCheck"&gt;false&lt;/property&gt;</span><br><span class="line">  		&lt;property name="processorBufferPoolType"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="handleDistributedTransactions"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useOffHeapForMerge"&gt;1&lt;/property&gt;</span><br><span class="line">      	&lt;property name="memoryPageSize"&gt;64k&lt;/property&gt;</span><br><span class="line">  		&lt;property name="spillsFileBufferSize"&gt;1k&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useStreamOutput"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="systemReserveMemorySize"&gt;384m&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useZKSwitch"&gt;false&lt;/property&gt;</span><br><span class="line">  	&lt;/system&gt;</span><br><span class="line">    &lt;!--这里是设置的admin用户和虚拟逻辑库--&gt;</span><br><span class="line">  	&lt;user name="admin" defaultAccount="true"&gt;</span><br><span class="line">  		&lt;property name="password"&gt;Abc_123456&lt;/property&gt;</span><br><span class="line">  		&lt;property name="schemas"&gt;test&lt;/property&gt;</span><br><span class="line">  	&lt;/user&gt;</span><br><span class="line">&lt;/mycat:server&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="8">
<li><p>修改schema.xml文件，设置数据库连接和虚拟数据表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;</span><br><span class="line">  	&lt;!--配置数据表--&gt;</span><br><span class="line">  	&lt;schema name="test" checkSQLschema="false" sqlMaxLimit="100"&gt;</span><br><span class="line">  		&lt;table name="t_user" dataNode="dn1,dn2" rule="mod-long" /&gt;</span><br><span class="line">  	&lt;/schema&gt;</span><br><span class="line">  	&lt;!--配置分片关系--&gt;</span><br><span class="line">  	&lt;dataNode name="dn1" dataHost="cluster1" database="test" /&gt;</span><br><span class="line">  	&lt;dataNode name="dn2" dataHost="cluster2" database="test" /&gt;</span><br><span class="line">  	&lt;!--配置连接信息--&gt;</span><br><span class="line">  	&lt;dataHost name="cluster1" maxCon="1000" minCon="10" balance="2" </span><br><span class="line">                writeType="1" dbType="mysql" dbDriver="native" switchType="1"  </span><br><span class="line">                slaveThreshold="100"&gt;</span><br><span class="line">  		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">  		&lt;writeHost host="W1" url="192.168.99.151:3306" user="admin" </span><br><span class="line">                     password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W1R1" url="192.168.99.159:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W1R2" url="192.168.99.215:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  		&lt;writeHost host="W2" url="192.168.99.159:3306" user="admin" </span><br><span class="line">                     password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W2R1" url="192.168.99.151:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W2R2" url="192.168.99.215:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  	&lt;/dataHost&gt;</span><br><span class="line">  	&lt;dataHost name="cluster2" maxCon="1000" minCon="10" balance="2" </span><br><span class="line">                writeType="1" dbType="mysql" dbDriver="native" switchType="1"  </span><br><span class="line">                slaveThreshold="100"&gt;</span><br><span class="line">  		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">  		&lt;writeHost host="W1" url="192.168.99.121:3306" user="admin"</span><br><span class="line">  				   password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W1R1" url="192.168.99.122:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W1R2" url="192.168.99.123:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  		&lt;writeHost host="W2" url="192.168.99.122:3306" user="admin"</span><br><span class="line">  				   password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W2R1" url="192.168.99.121:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W2R2" url="192.168.99.123:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  	&lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改rule.xml文件，把mod-long的count值修改成2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;function name="mod-long" class="io.mycat.route.function.PartitionByMod"&gt;</span><br><span class="line">	&lt;property name="count"&gt;2&lt;/property&gt;</span><br><span class="line">&lt;/function&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启MyCat</p>
</li>
<li><p>向t_user表写入数据，感受数据的切分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE test;</span><br><span class="line">#第一条记录被切分到第二个分片</span><br><span class="line">INSERT INTO t_user(id,username,password,tel,locked) VALUES(1,&quot;A&quot;,HEX(AES_ENCRYPT(&#39;123456&#39;,&#39;HelloWorld&#39;)));</span><br><span class="line">#第二条记录被切分到第一个分片</span><br><span class="line">INSERT INTO t_user(id,username,password,tel,locked) VALUES(2,&quot;B&quot;,HEX(AES_ENCRYPT(&#39;123456&#39;,&#39;HelloWorld&#39;)));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4-配置父子表"><a href="#4-配置父子表" class="headerlink" title="4. 配置父子表"></a>4. 配置父子表</h2><ol>
<li><p>在conf目录下创建<code>customer-hash-int</code>文件，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">101</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">102</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">103</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">104</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">105</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">106</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在rule.xml文件中加入自定义<function>和<tableRule></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"customer-hash-int"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"io.mycat.route.function.PartitionByFileMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>customer-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-customer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span>sharding_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>customer-hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改schema.xml文件，添加父子表定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_customer"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"sharding-customer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">"t_orders"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">joinKey</span>=<span class="string">"customer_id"</span> 	</span></span><br><span class="line"><span class="tag">                <span class="attr">parentKey</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyCat上执行如下SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE test;</span><br><span class="line">CREATE TABLE t_customer(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    username VARCHAR(200) NOT NULL,</span><br><span class="line">    sharding_id INT NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE t_orders(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    customer_id INT NOT NULL,</span><br><span class="line">    datetime TIMESTAMP DEFAULT CURRENT_TIMSTAMP</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向t_customer表和t_orders表写入数据，查看字表数据跟随父表切分到同一个分片</p>
</li>
</ol>
<h2 id="5-创建双机热备的MyCat集群"><a href="#5-创建双机热备的MyCat集群" class="headerlink" title="5. 创建双机热备的MyCat集群"></a>5. 创建双机热备的MyCat集群</h2><ol>
<li><p>用两个虚拟机实例，各自部署MyCat</p>
</li>
<li><p>用一个虚拟机实例部署Haproxy</p>
<ul>
<li><p>安装Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0&#x2F;8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">listen   admin_stats  </span><br><span class="line">    bind    0.0.0.0:4001</span><br><span class="line">    mode  http</span><br><span class="line">    stats uri       &#x2F;dbs</span><br><span class="line">    stats realm  Global\ statistics</span><br><span class="line">    stats auth    admin:abc123456</span><br><span class="line">listen   proxy-mysql</span><br><span class="line">    bind    0.0.0.0:3306  </span><br><span class="line">    mode  tcp </span><br><span class="line">    balance  roundrobin</span><br><span class="line">    option  tcplog       #日志格式</span><br><span class="line">    server   mycat_1  192.168.99.131:3306  check  port  8066  maxconn  2000  </span><br><span class="line">    server   mycat_2  192.168.99.132:3306  check  port  8066  maxconn  2000  </span><br><span class="line">    option  tcpka        #使用keepalive检测死链</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service haproxy start</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问Haproxy监控画面</p>
<p><a href="http://192.168.99.131:4001/dbs" target="_blank" rel="noopener">http://192.168.99.131:4001/dbs</a></p>
</li>
</ul>
</li>
<li><p>用另外一个虚拟机同样按照上述操作安装Haproxy</p>
</li>
<li><p>在某个Haproxy虚拟机实例上部署Keepalived</p>
<ul>
<li><p>开启防火墙的VRRP协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启VRRP</span></span><br><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --protocol  vrrp -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">应用设置</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  ens33</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.133</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure>
</li>
<li><p>ping 192.168.99.133</p>
</li>
</ul>
</li>
<li><p>在另外一个Haproxy虚拟机上，按照上述方法部署Keepalived</p>
</li>
<li><p>使用MySQL客户端连接192.168.99.133，执行增删改查数据</p>
</li>
</ol>
<h1 id="四、Sysbench基准测试"><a href="#四、Sysbench基准测试" class="headerlink" title="四、Sysbench基准测试"></a>四、Sysbench基准测试</h1><h2 id="1-安装Sysbench"><a href="#1-安装Sysbench" class="headerlink" title="1. 安装Sysbench"></a>1. 安装Sysbench</h2><ul>
<li><p>在线安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/</span><br><span class="line">repositories/akopytov/sysbench/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install sysbench</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地安装</p>
<ul>
<li><p>下载压缩文件</p>
<p><a href="https://codeload.github.com/akopytov/sysbench/zip/1.0" target="_blank" rel="noopener">https://</a><a href="https://codeload.github.com/akopytov/sysbench/zip/1.0" target="_blank" rel="noopener">codeload.github.com/akopytov/sysbench/zip/1.0</a></p>
</li>
<li><p>安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y automake libtool</span><br><span class="line">yum install -y mysql-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> sysbench</span></span><br><span class="line">./autogen.sh </span><br><span class="line">./configure </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">sysbench --version</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="2-执行测试"><a href="#2-执行测试" class="headerlink" title="2. 执行测试"></a>2. 执行测试</h2><ul>
<li><p>准备测试库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench  /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-tables-count=10 --oltp-table-size=100000 prepare</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench  /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-test-mode=complex --threads=10 --time=300 --report-interval=10 run &gt;&gt; /home/mysysbench.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-tables-count=10 cleanup</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="五、tpcc-mysql-压力测试"><a href="#五、tpcc-mysql-压力测试" class="headerlink" title="五、tpcc-mysql 压力测试"></a>五、tpcc-mysql 压力测试</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul>
<li><p>修改my.cnf配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>pxc_strict_mode=DISABLED</p>
</li>
<li><p>修改某个Haproxy的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server   mysql_1  192.168.99.151:3306  check  port  3306  weight  1  maxconn  2000</span><br><span class="line">server   mysql_2  192.168.99.159:3306  check  port  3306  weight  1  maxconn  2000</span><br><span class="line">server   mysql_3  192.168.99.215:3306  check  port  3306  weight  1  maxconn  2000</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动Haproxy</p>
</li>
<li><p>安装依赖程序包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc</span><br><span class="line">yum install -y mysql-devel</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-安装tpcc-mysql"><a href="#2-安装tpcc-mysql" class="headerlink" title="2. 安装tpcc-mysql"></a>2. 安装tpcc-mysql</h2><ul>
<li><p>下载压缩包</p>
<p><a href="https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/master" target="_blank" rel="noopener">https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/</a><a href="https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/master" target="_blank" rel="noopener">master</a></p>
</li>
<li><p>执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> tpcc的src目录</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>create_table.sql</code>和<code>add_fkey_idx.sql</code>两个文件</p>
</li>
<li><p>执行数据初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tpcc_load -h 192.168.99.131 -d tpcc -u admin -p Abc_123456 -w</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行压力测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tpcc_start -h 192.168.99.131 -d tpcc -u admin -p Abc_123456 -w 1 -c 5 -r 300 -l 600 -&gt;tpcc-output-log</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="六、导入数据"><a href="#六、导入数据" class="headerlink" title="六、导入数据"></a>六、导入数据</h1><h2 id="1-生成1000万条数据"><a href="#1-生成1000万条数据" class="headerlink" title="1. 生成1000万条数据"></a>1. 生成1000万条数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function">def <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> writer=<span class="keyword">new</span> FileWriter(<span class="string">"D:/data.txt"</span>)</span><br><span class="line">		<span class="keyword">var</span> buff=<span class="keyword">new</span> BufferedWriter(writer)</span><br><span class="line">		<span class="keyword">for</span>(i:<span class="number">1</span>..<span class="number">10000000</span>)&#123;</span><br><span class="line">			buff.write(i+<span class="string">",测试数据\n"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		buff.close</span><br><span class="line">		writer.close</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-执行文件切分"><a href="#2-执行文件切分" class="headerlink" title="2. 执行文件切分"></a>2. 执行文件切分</h2><ul>
<li><p>上传data.txt文件到linux</p>
</li>
<li><p>执行文件切分</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">split -l 1000000 -d data.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-准备数据库"><a href="#3-准备数据库" class="headerlink" title="3. 准备数据库"></a>3. 准备数据库</h2><ul>
<li><p>每个PXC分片只开启一个节点</p>
</li>
<li><p>修改PXC节点文件，然后重启PXC服务</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">innodb_flush_method</span> = O_DIRECT</span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">200</span>M</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建t_test数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_test(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    name VARCHAR(200) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MyCat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_test"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"cluster1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"W1"</span> <span class="attr">url</span>=<span class="string">"192.168.99.151:3306"</span> <span class="attr">user</span>=<span class="string">"admin"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">password</span>=<span class="string">"Abc_123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"cluster2"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"W1"</span> <span class="attr">url</span>=<span class="string">"192.168.99.121:3306"</span> <span class="attr">user</span>=<span class="string">"admin"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">password</span>=<span class="string">"Abc_123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="4-执行Java程序，多线程导入数据"><a href="#4-执行Java程序，多线程导入数据" class="headerlink" title="4. 执行Java程序，多线程导入数据"></a>4. 执行Java程序，多线程导入数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.xtend.lib.annotations.Accessors</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Accessors</span></span><br><span class="line">	File file;</span><br><span class="line">	</span><br><span class="line">	<span class="function">override <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> url=<span class="string">"jdbc:mysql://192.168.99.131:8066/test"</span></span><br><span class="line">		<span class="keyword">var</span> username=<span class="string">"admin"</span></span><br><span class="line">		<span class="keyword">var</span> password=<span class="string">"Abc_123456"</span></span><br><span class="line">		<span class="keyword">var</span> con=DriverManager.getConnection(url,username,password)</span><br><span class="line">		<span class="keyword">var</span> sql=<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">			load data local intfile '</span>/home/data/«file.name»<span class="string">' ignore into table t_test </span></span><br><span class="line"><span class="string">			character set '</span>utf8<span class="string">' </span></span><br><span class="line"><span class="string">			fields terminated by '</span>,<span class="string">' optionally enclosed by '</span>\<span class="string">"' </span></span><br><span class="line"><span class="string">			lines terminated by '\n' (id,name);</span></span><br><span class="line"><span class="string">		'''</span></span><br><span class="line"><span class="string">		var pst=con.prepareStatement(sql);</span></span><br><span class="line"><span class="string">		pst.execute</span></span><br><span class="line"><span class="string">		con.close</span></span><br><span class="line"><span class="string">		LoadData.updateNum();</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadData</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> <span class="keyword">int</span> end=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> pool=<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>,<span class="number">5</span>,<span class="number">60</span>,TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingQueue(<span class="number">200</span>))</span><br><span class="line">	<span class="function">def <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		DriverManager.registerDriver(<span class="keyword">new</span> Driver)</span><br><span class="line">		<span class="keyword">var</span> folder=<span class="keyword">new</span> File(<span class="string">"/home/data"</span>)</span><br><span class="line">		<span class="keyword">var</span> files=folder.listFiles</span><br><span class="line">		end=files.length <span class="comment">//线程池结束条件</span></span><br><span class="line">		files.forEach[one|</span><br><span class="line">			<span class="keyword">var</span> task=<span class="keyword">new</span> Task();</span><br><span class="line">			task.file=one;</span><br><span class="line">			pool.execute(task)</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> def <span class="keyword">static</span> <span class="title">updateNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">if</span>(num==end)&#123;</span><br><span class="line">			pool.shutdown();</span><br><span class="line">			println(<span class="string">"执行结束"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、大数据归档"><a href="#七、大数据归档" class="headerlink" title="七、大数据归档"></a>七、大数据归档</h1><h2 id="1-安装TokuDB"><a href="#1-安装TokuDB" class="headerlink" title="1. 安装TokuDB"></a>1. 安装TokuDB</h2><ul>
<li><p>安装jemlloc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y jemalloc</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="section">[mysqld_safe]</span></span><br><span class="line"><span class="attr">malloc-lib</span>=/usr/lib64/libjemalloc.so.<span class="number">1</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启MySQL</p>
</li>
<li><p>开启Linux大页内存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装TokuDB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y Percona-Server-tokudb-57.x86_64</span><br><span class="line">ps-admin --enable -uroot -p</span><br><span class="line">service mysql restart</span><br><span class="line">ps-admin --enable -uroot -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看安装结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-配置Replication集群"><a href="#2-配置Replication集群" class="headerlink" title="2. 配置Replication集群"></a>2. 配置Replication集群</h2><ul>
<li><p>在两个TokuDB数据库上创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;backup&#39;@&#39;%&#39; IDENTIFIED BY &#39;Abc_123456&#39; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT super, reload, replication slave ON *.* TO &#39;backup&#39;@&#39;%&#39; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH  PRIVILEGES ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改两个TokuDB的配置文件，如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server_id</span> = <span class="number">101</span></span><br><span class="line"><span class="attr">log_bin</span> = mysql_bin</span><br><span class="line"><span class="attr">relay_log</span> = relay_bin</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server_id</span> = <span class="number">102</span></span><br><span class="line"><span class="attr">log_bin</span> = mysql_bin</span><br><span class="line"><span class="attr">relay_log</span> = relay_bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动两个TokuDB节点</p>
</li>
<li><p>分别在两个TokuDB上执行下面4句SQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭同步服务</span><br><span class="line">stop slave;</span><br><span class="line">#设置同步的Master节点</span><br><span class="line">change master to master_host&#x3D;&quot;192.168.99.155&quot;,master_port&#x3D;3306,master_user&#x3D;&quot;backup&quot;,</span><br><span class="line">master_password&#x3D;&quot;Abc_123456&quot;;</span><br><span class="line">#启动同步服务</span><br><span class="line">start slave;</span><br><span class="line">#查看同步状态</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭同步服务</span><br><span class="line">stop slave;</span><br><span class="line">#设置同步的Master节点</span><br><span class="line">change master to master_host&#x3D;&quot;192.168.99.102&quot;,master_port&#x3D;3306,master_user&#x3D;&quot;backup&quot;,</span><br><span class="line">master_password&#x3D;&quot;Abc_123456&quot;;</span><br><span class="line">#启动同步服务</span><br><span class="line">start slave;</span><br><span class="line">#查看同步状态</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-创建归档表"><a href="#3-创建归档表" class="headerlink" title="3. 创建归档表"></a>3. 创建归档表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_purchase (</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">	purchase_price DECIMAL(10,2) NOT NULL,</span><br><span class="line">	purchase_num INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_sum DECIMAL (10,2) NOT NULL,</span><br><span class="line">	purchase_buyer INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	company_id INT UNSIGNED NOT NULL,</span><br><span class="line">	goods_id INT UNSIGNED NOT NULL,</span><br><span class="line">	KEY idx_company_id(company_id),</span><br><span class="line">	KEY idx_goods_id(goods_id)</span><br><span class="line">)engine&#x3D;TokuDB;</span><br></pre></td></tr></table></figure>

<h2 id="4-配置Haproxy-Keepalived双机热备"><a href="#4-配置Haproxy-Keepalived双机热备" class="headerlink" title="4. 配置Haproxy+Keepalived双机热备"></a>4. 配置Haproxy+Keepalived双机热备</h2><ul>
<li><p>在两个节点上安装Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">listen   admin_stats  </span><br><span class="line">    bind    0.0.0.0:4001</span><br><span class="line">    mode  http</span><br><span class="line">    stats uri       /dbs</span><br><span class="line">    stats realm  Global\ statistics</span><br><span class="line">    stats auth    admin:abc123456</span><br><span class="line">listen   proxy-mysql</span><br><span class="line">    bind    0.0.0.0:4002  </span><br><span class="line">    mode  tcp </span><br><span class="line">    balance  roundrobin</span><br><span class="line">    option  tcplog       #日志格式</span><br><span class="line">    server   backup_1  192.168.99.102:3306  check  port  3306  maxconn  2000  </span><br><span class="line">    server   backup_2  192.168.99.155:3306  check  port  3306  maxconn  2000  </span><br><span class="line">    option  tcpka        #使用keepalive检测死链</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Haproxy</p>
</li>
<li><p>开启防火墙的VRRP协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --protocol vrrp -j ACCEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>在两个节点上安装Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑Keepalived配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  ens33</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.211</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Keepalived</p>
</li>
</ul>
<h2 id="5-准备归档数据"><a href="#5-准备归档数据" class="headerlink" title="5. 准备归档数据"></a>5. 准备归档数据</h2><ul>
<li><p>在两个PXC分片上创建进货表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_purchase (</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">	purchase_price DECIMAL(10,2) NOT NULL,</span><br><span class="line">	purchase_num INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_sum DECIMAL (10,2) NOT NULL,</span><br><span class="line">	purchase_buyer INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	company_id INT UNSIGNED NOT NULL,</span><br><span class="line">	goods_id INT UNSIGNED NOT NULL,</span><br><span class="line">	KEY idx_company_id(company_id),</span><br><span class="line">	KEY idx_goods_id(goods_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MyCat的schema.xml文件，并重启MyCat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_purchase"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-执行数据归档"><a href="#6-执行数据归档" class="headerlink" title="6. 执行数据归档"></a>6. 执行数据归档</h2><ul>
<li><p>安装pt-archiver</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install percona-toolkit</span><br><span class="line">pt-archiver --version</span><br><span class="line">pt-archiver --help</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行数据归档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-archiver --source h=192.168.99.102,P=8066,u=admin,p=Abc_123456,D=test,t=t_purchase --dest h=192.168.99.102,P=3306,u=admin,p=Abc_123456,D=test,t=t_purchase --no-check-charset --where 'purchase_date&lt;"2018-09"' --progress 5000 --bulk-delete --bulk-insert --limit=10000 --statistics</span><br></pre></td></tr></table></figure>









</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>数据库集群</category>
      </categories>
      <tags>
        <tag>MySQL集群</tag>
        <tag>PXC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot前台页面get不到js,css文件</title>
    <url>/2020/09/28/SpringBoot%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2get%E4%B8%8D%E5%88%B0js%20css%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>今天遇到了一个让我很无语的问题，在导入css,js等静态文件之后，在前台获取不到相应的文件。。。。。为此调试了好几个小时。。。。。<br>没想到重启了idea之后问题就莫名好了。。。。暴风哭泣。。。。</p>
<p>下次一定要<br><strong>重启idea软件</strong><br><strong>重启idea软件</strong><br><strong>重启idea软件</strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot错误</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群搭建</title>
    <url>/2020/07/30/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>

<h3 id="1、Redis集群方案比较"><a href="#1、Redis集群方案比较" class="headerlink" title="1、Redis集群方案比较"></a>1、Redis集群方案比较</h3><ul>
<li><strong>哨兵模式</strong></li>
</ul>
<p><img src="/images/2020073001.jpg" alt="img"></p>
<p>在redis3.0以前的版本要实现集群一般是借助哨兵sentinel工具来监控master节点的状态，如果master节点异常，则会做主从切换，将某一台slave作为master，哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情况</p>
<ul>
<li><strong>高可用集群模式</strong></li>
</ul>
<p><img src="/images/2020073002.png" alt="img"></p>
<p>redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到1000节点。redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单。</p>
<h3 id="2、redis高可用集群搭建"><a href="#2、redis高可用集群搭建" class="headerlink" title="2、redis高可用集群搭建"></a>2、redis高可用集群搭建</h3><ul>
<li><strong>redis安装</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址：http:&#x2F;&#x2F;redis.io&#x2F;download</span><br><span class="line">安装步骤：</span><br><span class="line"># 安装gcc</span><br><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line"># 把下载好的redis-3.0.0-rc2.tar.gz放在&#x2F;usr&#x2F;local文件夹下，并解压</span><br><span class="line">tar -zxvf redis-3.0.0-rc2.tar.gz</span><br><span class="line"></span><br><span class="line"># 进入到解压好的redis-3.0.0目录下，进行编译</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 进入到redis-3.0.0&#x2F;src目录下进行安装，安装完成验证src目录下是否已经生成了redis-server 、redis-cil</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># 建立俩个文件夹存放redis命令和配置文件</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 把redis-3.0.0下的redis.conf复制到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc下</span><br><span class="line">cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;</span><br><span class="line"></span><br><span class="line"># 移动redis-3.0.0&#x2F;src里的几个文件到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下</span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 启动并指定配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf（注意要使用后台启动，所以修改redis.conf里的daemonize改为yes)</span><br><span class="line"></span><br><span class="line"># 验证启动是否成功</span><br><span class="line">ps -ef | grep redis </span><br><span class="line"></span><br><span class="line"># 查看是否有redis服务或者查看端口</span><br><span class="line">netstat -tunpl | grep 6379</span><br><span class="line"></span><br><span class="line"># 进入redis客户端 </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli </span><br><span class="line"></span><br><span class="line"># 退出客户端</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line"># 退出redis服务： </span><br><span class="line">（1）pkill redis-server </span><br><span class="line">（2）kill 进程号                       </span><br><span class="line">（3）&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>redis集群搭建</strong></li>
</ul>
<p>redis集群需要至少要三个master节点，我们这里搭建三个master节点，并且给每个master再搭建一个slave节点，总共6个redis节点，由于节点数较多，这里采用在一台机器上创建6个redis实例，并将这6个redis实例配置成集群模式，所以这里搭建的是伪分布式集群模式，当然真正的分布式集群的配置方法几乎一样，搭建伪分布式集群的步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：在&#x2F;usr&#x2F;local下创建文件夹redis-cluster，然后在其下面分别创建6个文件夾如下</span><br><span class="line">（1）mkdir -p &#x2F;usr&#x2F;local&#x2F;redis-cluster</span><br><span class="line">（2）mkdir 8001、 mkdir 8002、 mkdir 8003、 mkdir 8004、 mkdir 8005、 mkdir 8006</span><br><span class="line"></span><br><span class="line">第一步：把之前的redis.conf配置文件copy到8001下，修改如下内容：</span><br><span class="line">（1）daemonize yes</span><br><span class="line">（2）port 8001（分别对每个机器的端口号进行设置）</span><br><span class="line">（3）bind 192.168.0.61（必须要绑定当前机器的ip，这里方便redis集群定位机器，不绑定可能会出现循环查找集群节点机器的情况）</span><br><span class="line">（4）dir &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;8001&#x2F;（指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据）</span><br><span class="line">（5）cluster-enabled yes（启动集群模式）</span><br><span class="line">（6）cluster-config-file nodes-8001.conf（这里800x最好和port对应上）</span><br><span class="line">（7）cluster-node-timeout 5000</span><br><span class="line">（8）appendonly yes</span><br><span class="line"></span><br><span class="line">第三步：把修改后的配置文件，分别 copy到各个文夹下，注意每个文件要修改第2、4、6项里的端口号</span><br><span class="line">快捷复制命令：%s&#x2F;原目标&#x2F;目标地址&#x2F;g    </span><br><span class="line">第四步：由于 redis集群需要使用 ruby命令，所以我们需要安装 ruby</span><br><span class="line">（1）yum install ruby</span><br><span class="line">（2）yum install rubygems</span><br><span class="line">（3）gem install redis --version 3.0.0（安装redis和 ruby的接囗）</span><br><span class="line"></span><br><span class="line">第五步：分别启动6个redis实例，然后检查是否启动成功</span><br><span class="line">（1）&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;800*&#x2F;redis.conf</span><br><span class="line">（2）ps -ef | grep redis 查看是否启动成功</span><br><span class="line"></span><br><span class="line">第六步：在redis的安装目录下执行 redis-trib.rb命令</span><br><span class="line">（1）cd &#x2F;usr&#x2F;local&#x2F;redis-3.0.0&#x2F;src</span><br><span class="line">（2）.&#x2F;redis-trib.rb create --replicas 1 192.168.0.61:8001 192.168.0.61:8002 192.168.0.61:8003 192.168.0.61:8004 192.168.0.61:8005 192.168.0.61:8006</span><br><span class="line">新版本：redis-cli --cluster create 192.168.200.10:8001 192.168.200.10:8002  192.168.200.10:8003 192.168.200.10:8004 192.168.200.10:8005 192.168.200.10:8006  --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">第七步：验证集群：</span><br><span class="line">（1）连接任意一个客户端即可：.&#x2F;redis-cli -c -h -p (-c表示集群模式，指定ip地址和端口号）如：&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli -c -h 192.168.0.61 -p 800*</span><br><span class="line">（2）进行验证： cluster info（查看集群信息）、cluster nodes（查看节点列表）</span><br><span class="line">（3）进行数据操作验证</span><br><span class="line">（4）关闭集群则需要逐个进行关闭，使用命令：</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli -c -h 192.168.0.61 -p 800* shutdown</span><br><span class="line"></span><br><span class="line">PS：当出现集群无法启动时，删除redis的临时数据文件，再次重新启动每一个redis服务，然后重新构造集群环境。</span><br></pre></td></tr></table></figure>



<h3 id="3、Java操作redis集群"><a href="#3、Java操作redis集群" class="headerlink" title="3、Java操作redis集群"></a>3、Java操作redis集群</h3><p>借助redis的java客户端jedis可以操作以上集群，引用jedis版本的maven坐标如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>Java编写访问redis集群的代码非常简单，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.HostAndPort;</span><br><span class="line">import redis.clients.jedis.JedisCluster;</span><br><span class="line">import redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 访问redis集群</span><br><span class="line"> * @author aaron.rao</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RedisCluster </span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; jedisClusterNode &#x3D; new HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8001));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8002));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8003));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8004));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8005));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8006));</span><br><span class="line">        </span><br><span class="line">        JedisPoolConfig config &#x3D; new JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(100);</span><br><span class="line">        config.setMaxIdle(10);</span><br><span class="line">        config.setTestOnBorrow(true);</span><br><span class="line">        JedisCluster jedisCluster &#x3D; new JedisCluster(jedisClusterNode, 6000, 10, config);</span><br><span class="line">        System.out.println(jedisCluster.set(&quot;student&quot;, &quot;aaron&quot;));</span><br><span class="line">        System.out.println(jedisCluster.set(&quot;age&quot;, &quot;18&quot;));</span><br><span class="line">        </span><br><span class="line">        System.out.println(jedisCluster.get(&quot;student&quot;));</span><br><span class="line">        System.out.println(jedisCluster.get(&quot;age&quot;));</span><br><span class="line">        </span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行效果如下：</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">aaron</span><br><span class="line">18</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis集群</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot源码学习</title>
    <url>/2020/12/20/SpringBoot%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>SpringBoot上手非常简单，但是并不能停留在表面。这里开始从源码层面学习</p>
<a id="more"></a>

<h1 id="1-概览"><a href="#1-概览" class="headerlink" title="1 概览"></a>1 概览</h1><h1 id="2-走向自动配置"><a href="#2-走向自动配置" class="headerlink" title="2 走向自动配置"></a>2 走向自动配置</h1><h1 id="3-理解SpringApplication"><a href="#3-理解SpringApplication" class="headerlink" title="3 理解SpringApplication"></a>3 理解SpringApplication</h1><h1 id="4-WebMVC核心"><a href="#4-WebMVC核心" class="headerlink" title="4 WebMVC核心"></a>4 WebMVC核心</h1><h1 id="5-WebMVC视图应用"><a href="#5-WebMVC视图应用" class="headerlink" title="5 WebMVC视图应用"></a>5 WebMVC视图应用</h1><h1 id="6-WebMVC-REST应用"><a href="#6-WebMVC-REST应用" class="headerlink" title="6 WebMVC REST应用"></a>6 WebMVC REST应用</h1><h1 id="7-渐行渐远的Servlet"><a href="#7-渐行渐远的Servlet" class="headerlink" title="7 渐行渐远的Servlet"></a>7 渐行渐远的Servlet</h1><h1 id="8-从Reactive到WebFlux"><a href="#8-从Reactive到WebFlux" class="headerlink" title="8 从Reactive到WebFlux"></a>8 从Reactive到WebFlux</h1><h1 id="9-WebFlux核心"><a href="#9-WebFlux核心" class="headerlink" title="9 WebFlux核心"></a>9 WebFlux核心</h1><h1 id="10-超越外部化配置"><a href="#10-超越外部化配置" class="headerlink" title="10 超越外部化配置"></a>10 超越外部化配置</h1>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security + OAuth2学习笔记</title>
    <url>/2020/12/25/Spring-Security-OAuth2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<blockquote>
<p>学习文章：<a href="http://www.javaboy.org/2020/1102/es-bilibili.html" target="_blank" rel="noopener">http://www.javaboy.org/2020/1102/es-bilibili.html</a></p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>认证：你是谁</p>
<p>授权：你要干什么</p>
<h2 id="1-学习路线"><a href="#1-学习路线" class="headerlink" title="1.学习路线"></a>1.学习路线</h2><p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122501.png" alt="image-20210109154823729"></p>
<h2 id="2-章节概述"><a href="#2-章节概述" class="headerlink" title="2.章节概述"></a>2.章节概述</h2><p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122502.png" alt="image-20210109154856540"></p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122503.png" alt="image-20210109154916208"></p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122504.png" alt="image-20210109154927463"></p>
<h2 id="3-学习目的："><a href="#3-学习目的：" class="headerlink" title="3.学习目的："></a>3.学习目的：</h2><p>独立设计一个安全的单体应用</p>
<p>为微服务开发UAA或集成第三方</p>
<p>前后端配合时常见的问题处理</p>
<h2 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4.环境配置"></a>4.环境配置</h2><h3 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h3><ul>
<li>Node </li>
<li>NPM/CNPM </li>
<li>Vue CLI</li>
</ul>
<blockquote>
<p>安装node.js的目的是使用npm管理项目依赖的软件包，由于网络环境的原因，cnpm作为替代的包管理工具，使用Vue CLI使我们无须理会复杂的配置，更专注Vue.js</p>
</blockquote>
<h3 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h3><ul>
<li><p>Java SDK </p>
</li>
<li><p>Maven</p>
</li>
</ul>
<h3 id="IDEA的配置"><a href="#IDEA的配置" class="headerlink" title="IDEA的配置"></a>IDEA的配置</h3><ul>
<li>EnvFile：加载环境变量</li>
<li>Http Client</li>
<li>Lombok</li>
<li>IDEA的热启动配置</li>
</ul>
<h3 id="VSCode的配置"><a href="#VSCode的配置" class="headerlink" title="VSCode的配置"></a>VSCode的配置</h3><ul>
<li><p>Debugger for Chrome</p>
</li>
<li><p>Rest Client</p>
</li>
<li><p>Vue VS Code Extension Pack</p>
</li>
<li><p>Java Extension Pack</p>
</li>
</ul>
<h3 id="Chrome开发者工具"><a href="#Chrome开发者工具" class="headerlink" title="Chrome开发者工具"></a>Chrome开发者工具</h3><ul>
<li>样式调试</li>
<li>日志输出</li>
<li>Debug</li>
<li>网络抓包监控</li>
<li>性能和内存调试</li>
<li>本地存储调试</li>
<li>Chrome插件</li>
</ul>
<h3 id="Vue-DevTools插件"><a href="#Vue-DevTools插件" class="headerlink" title="Vue DevTools插件"></a>Vue DevTools插件</h3><h1 id="1-Spring-Security-入门"><a href="#1-Spring-Security-入门" class="headerlink" title="1 Spring Security 入门"></a>1 Spring Security 入门</h1><h2 id="1-1-认证和授权的概念"><a href="#1-1-认证和授权的概念" class="headerlink" title="1.1 认证和授权的概念"></a>1.1 认证和授权的概念</h2><h3 id="什么是认证"><a href="#什么是认证" class="headerlink" title="什么是认证"></a>什么是认证</h3><p>认证（Authentication）：认证解决“我是谁”的问题</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122505.png" alt="image-20210111150358296"></p>
<h3 id="什么是授权"><a href="#什么是授权" class="headerlink" title="什么是授权"></a>什么是授权</h3><p>授权（Authorization）：授权解决“我能做什么”的问题</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122506.png" alt="image-20210111142546362"></p>
<h2 id="1-2-过滤器和过滤器链"><a href="#1-2-过滤器和过滤器链" class="headerlink" title="1.2 过滤器和过滤器链"></a>1.2 过滤器和过滤器链</h2><p>Filter和FilterChain</p>
<h3 id="Spring-Filters"><a href="#Spring-Filters" class="headerlink" title="Spring Filters"></a>Spring Filters</h3><blockquote>
<p>任何Spring Web应用本质上只是一个servlet</p>
<p>Security Filter在HTTP请求到达你的Controller之前过滤每一个传入的HTTP请求</p>
</blockquote>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020122507.png" alt="image-20210122111146348"></p>
<p>过滤器示例：</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210116152805378.png" alt="image-20210116152805378"></p>
<h3 id="Filter-Chain"><a href="#Filter-Chain" class="headerlink" title="Filter Chain"></a>Filter Chain</h3><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210116152752055.png" alt="image-20210116152752055"></p>
<h3 id="常见的内建过滤器"><a href="#常见的内建过滤器" class="headerlink" title="常见的内建过滤器"></a>常见的内建过滤器</h3><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210122113200795.png" alt="image-20210122113200795"></p>
<h2 id="1-3-Http"><a href="#1-3-Http" class="headerlink" title="1.3 Http"></a>1.3 Http</h2><p>http请求</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210122113621694.png" alt="image-20210122113621694"></p>
<p>熟悉Http的请求/响应的结构</p>
<p>Filter和客户端交互（获取数据看，返回数据）是通过请求/响应中的字段完成的</p>
<blockquote>
<p>响应码：<a href="https://developer.mozilla.org/zh-cn/docs/web/http/status" target="_blank" rel="noopener">https://developer.mozilla.org/zh-cn/docs/web/http/status</a></p>
</blockquote>
<p>HTTP Basic Auth认证流程</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210122141938223.png" alt="image-20210122141938223"></p>
<h2 id="1-4-实战"><a href="#1-4-实战" class="headerlink" title="1.4 实战"></a>1.4 实战</h2><h3 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h3><h3 id="定制化登录页"><a href="#定制化登录页" class="headerlink" title="定制化登录页"></a>定制化登录页</h3><h3 id="CSRF攻击和保护"><a href="#CSRF攻击和保护" class="headerlink" title="CSRF攻击和保护"></a>CSRF攻击和保护</h3><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210122144325841.png" alt="image-20210122144325841"></p>
<p>防止受到CSRF攻击的方式</p>
<ul>
<li><p>CSRF Token</p>
</li>
<li><p>在响应中设置Cookie的SameSite属性</p>
</li>
</ul>
<p>logout</p>
<p>rememberMe</p>
<p>为解决session过期后用户的直接访问问题</p>
<h3 id="登录成功和失败后的处理"><a href="#登录成功和失败后的处理" class="headerlink" title="登录成功和失败后的处理"></a>登录成功和失败后的处理</h3><h1 id="2-密码的进化和验证"><a href="#2-密码的进化和验证" class="headerlink" title="2 密码的进化和验证"></a>2 密码的进化和验证</h1><h2 id="2-1-密码简史"><a href="#2-1-密码简史" class="headerlink" title="2.1 密码简史"></a>2.1 密码简史</h2><h3 id="密码的发展"><a href="#密码的发展" class="headerlink" title="密码的发展"></a>密码的发展</h3><p>简单密码/明文传输–》设定密码的长度–》密码组合–》二次验证（密码+手机验证码）–》无密码登录（指纹，Face ID）</p>
<h3 id="密码存储安全进化"><a href="#密码存储安全进化" class="headerlink" title="密码存储安全进化"></a>密码存储安全进化</h3><p>明文–》哈希–》加盐（密码哈希+另外随机生成的哈希值）–》自适应哈希函数（可以配置迭代次数（md5（md5（”plaintext“）））)</p>
<h3 id="密码编码器"><a href="#密码编码器" class="headerlink" title="密码编码器"></a>密码编码器</h3><h2 id="2-2-Spring-Security对密码哈希的算法支持"><a href="#2-2-Spring-Security对密码哈希的算法支持" class="headerlink" title="2.2 Spring Security对密码哈希的算法支持"></a>2.2 Spring Security对密码哈希的算法支持</h2><h2 id="2-3-密码的验证规则"><a href="#2-3-密码的验证规则" class="headerlink" title="2.3 密码的验证规则"></a>2.3 密码的验证规则</h2><h1 id="3-深入Spring-Security验证"><a href="#3-深入Spring-Security验证" class="headerlink" title="3 深入Spring Security验证"></a>3 深入Spring Security验证</h1><h1 id="4-构建基于JWT的认证"><a href="#4-构建基于JWT的认证" class="headerlink" title="4 构建基于JWT的认证"></a>4 构建基于JWT的认证</h1><h1 id="5-基于角色的用户权限"><a href="#5-基于角色的用户权限" class="headerlink" title="5 基于角色的用户权限"></a>5 基于角色的用户权限</h1><h1 id="6-基于数据库的-RBAC"><a href="#6-基于数据库的-RBAC" class="headerlink" title="6 基于数据库的 RBAC"></a>6 基于数据库的 RBAC</h1><h1 id="7-实现符合-OAuth-2-标准的授权服务器"><a href="#7-实现符合-OAuth-2-标准的授权服务器" class="headerlink" title="7 实现符合 OAuth 2 标准的授权服务器"></a>7 实现符合 OAuth 2 标准的授权服务器</h1><h1 id="8-关于Spring-Security你可以了解的更多"><a href="#8-关于Spring-Security你可以了解的更多" class="headerlink" title="8 关于Spring Security你可以了解的更多"></a>8 关于Spring Security你可以了解的更多</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>分布式/微服务</category>
        <category>认证和鉴权</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot启动时找不到或无法加载主类</title>
    <url>/2020/10/06/SpringBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>

<p>在启动SpringBoot项目时，控制台页面突然报出下列错误：</p>
<blockquote>
<p>找不到或无法加载主类 com.xxx.xxxx.xxxxApplication</p>
</blockquote>
<p>一开始以为是项目打包的问题，于是启动<code>mvn clean install</code>。。。无果<br>只得硬着头皮一步步排查，最后是在workspace.xml文件中找到问题所在,也就是SPRING_BOOT_MAIN_CLASS的value并没有设置正确</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;component name&#x3D;&quot;RunManager&quot; selected&#x3D;&quot;Spring Boot.DianpingApplication&quot;&gt;</span><br><span class="line">   &lt;configuration name&#x3D;&quot;DianpingApplication&quot; type&#x3D;&quot;SpringBootApplicationConfigurationType&quot; factoryName&#x3D;&quot;Spring Boot&quot;&gt;</span><br><span class="line">     &lt;module name&#x3D;&quot;dianping&quot; &#x2F;&gt;</span><br><span class="line">     &lt;option name&#x3D;&quot;SPRING_BOOT_MAIN_CLASS&quot; value&#x3D;&quot;com.liuurick.dianping.DianpingApplication&quot; &#x2F;&gt;</span><br><span class="line">     &lt;method v&#x3D;&quot;2&quot;&gt;</span><br><span class="line">       &lt;option name&#x3D;&quot;Make&quot; enabled&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;method&gt;</span><br><span class="line">   &lt;&#x2F;configuration&gt;</span><br><span class="line"> &lt;&#x2F;component&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot错误</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实现邮件发送功能</title>
    <url>/2020/08/13/SpringBoot%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>SpringBoot实现邮件发送功能</p>
<a id="more"></a>

<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="POP3协议是什么？"><a href="#POP3协议是什么？" class="headerlink" title="POP3协议是什么？"></a>POP3协议是什么？</h4><p>POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本,它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。它是因特网电子邮件的第一个离线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。</p>
<h4 id="SMTP协议是什么？"><a href="#SMTP协议是什么？" class="headerlink" title="SMTP协议是什么？"></a>SMTP协议是什么？</h4><p>SMTP 的全称是Simple Mail Transfer Protocol，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。增加 SMTP 认证的目的是为了使用户避免受到垃圾邮件的侵扰。</p>
<h4 id="IMAP协议是什么？"><a href="#IMAP协议是什么？" class="headerlink" title="IMAP协议是什么？"></a>IMAP协议是什么？</h4><p>IMAP全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的。</p>
<h4 id="IMAP和POP3协议有什么不同呢？"><a href="#IMAP和POP3协议有什么不同呢？" class="headerlink" title="IMAP和POP3协议有什么不同呢？"></a>IMAP和POP3协议有什么不同呢？</h4><p>POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。</p>
<p>而IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。</p>
<p>同时，IMAP像POP3那样提供了方便的邮件下载服务，让用户能进行离线阅读。IMAP提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。此外，IMAP 更好地支持了从多个不同设备中随时访问新邮件。<br><img src="/images/2020081401.png" alt=""><br>总之，IMAP 整体上为用户带来更为便捷和可靠的体验。POP3 更易丢失邮件或多次下载相同的邮件，但 IMAP 通过邮件客户端与webmail 之间的双向同步功能很好地避免了这些问题。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>对于邮箱功能，首先需要开启<code>POP3/SMTP服务</code>获取邮箱授权码。</p>
<p>在邮箱主页-&gt;设置-&gt;账户中可以看到</p>
<p><img src="/images/2020081402.png" alt=""></p>
<p>开启之后会获取一个授权码，用来第三方验证，具体的可以看官方教程。<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=1001256&&id=28" target="_blank" rel="noopener">官方教程</a></p>
<h4 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h4><p>创建一个springboot项目，引入下方依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p> 然后修改application.properties 配置信息，这里我使用的是application.yml文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    port: 587</span><br><span class="line">    username: 2826803629@qq.com</span><br><span class="line">    password: xxxxwwnddfh</span><br><span class="line">    default-encoding: UTF-8</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          socketFactoryClass: javax.net.ssl.SSLsocketFactory</span><br><span class="line">        debug: true</span><br></pre></td></tr></table></figure>

<p>配置完成之后进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   JavaMailSender javaMailSender;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       SimpleMailMessage msg = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">       <span class="comment">//邮件主题</span></span><br><span class="line">       msg.setSubject(<span class="string">"测试邮件"</span>);</span><br><span class="line">       <span class="comment">//邮件内容</span></span><br><span class="line">       msg.setText(<span class="string">"hhhhhhh"</span>);</span><br><span class="line">       <span class="comment">//邮件发送者</span></span><br><span class="line">       msg.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">       <span class="comment">//邮件接受者</span></span><br><span class="line">       msg.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">       <span class="comment">//发送邮件</span></span><br><span class="line">       javaMailSender.send(msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>有些同学可能会遇到下面的错误，这是授权码的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javax.mail.AuthenticationFailedException: 535 Login Fail. Please enter your authorization code to login. More information <span class="keyword">in</span> http://service.mail.qq.com/cgi-bin/<span class="built_in">help</span>?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span><br></pre></td></tr></table></figure>

<p>重新开启POP3/SMTP服务即可。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Undertow</title>
    <url>/2020/12/30/SpringBoot%E6%95%B4%E5%90%88Undertow/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-配置Undertow"><a href="#2-配置Undertow" class="headerlink" title="2.配置Undertow"></a>2.配置Undertow</h1><blockquote>
<p>Undertow基本配置:<a href="https://www.pianshen.com/article/7390262599/" target="_blank" rel="noopener">https://www.pianshen.com/article/7390262599/</a></p>
</blockquote>
<p>这里以application.properties示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 是否打开 undertow 日志，默认为 false</span><br><span class="line">server.undertow.accesslog.enabled&#x3D;false</span><br><span class="line"># 设置访问日志所在目录</span><br><span class="line">server.undertow.accesslog.dir&#x3D;logs</span><br><span class="line"># 指定工作者线程的 I&#x2F;0 线程数，默认为 2 或者 CPU 的个数</span><br><span class="line">server.undertow.io-threads&#x3D;</span><br><span class="line"># 指定工作者线程个数，默认为 I&#x2F;O 线程个数的 8 倍</span><br><span class="line">server.undertow.worker-threads&#x3D;</span><br><span class="line"># 设置 HTTP POST 内容的最大长度，默认不做限制</span><br><span class="line">server.undertow.max-http-post-size&#x3D;0</span><br></pre></td></tr></table></figure>





<h1 id="3-使用-Undertow-监听多个端口示例："><a href="#3-使用-Undertow-监听多个端口示例：" class="headerlink" title="3.使用 Undertow 监听多个端口示例："></a>3.使用 Undertow 监听多个端口示例：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">embeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UndertowEmbeddedServletContainerFactory factory = <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">    factory.addBuilderCustomizers(<span class="keyword">new</span> UndertowBuilderCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">            builder.addHttpListener(<span class="number">8080</span>, <span class="string">"0.0.0.0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维知识</category>
        <category>应用服务器</category>
      </categories>
      <tags>
        <tag>Undertow</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成MyBatis的分页插件PageHelper</title>
    <url>/2020/10/25/SpringBoot%E9%9B%86%E6%88%90MyBatis%E7%9A%84%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><a id="more"></a>

<p>首先说说MyBatis框架的PageHelper插件吧，它是一个非常好用的分页插件，通常我们的项目中如果集成了MyBatis的话，几乎都会用到它，因为分页的业务逻辑说复杂也不复杂，但是有插件我们何乐而不为？通常引入它们只需三步骤，不管是Spring集成还是SpringBoot集成都是老套路，这里就分开总结了。。。</p>
<h2 id="Spring集成PageHelper："><a href="#Spring集成PageHelper：" class="headerlink" title="Spring集成PageHelper："></a>Spring集成PageHelper：</h2><p><strong>第一步：pom文件引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis的分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：MyBatis的核心配置文件中引入配置项</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 【mybatis的核心配置文件】 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量设置别名(可以不配) 作用：就是在mapper.xml文件中直接写类名，也可以不用写全路径名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.liuurick.manager.po"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的分页插件PageHelper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库类型Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步：业务逻辑实现分页功能，我们只需将当前查询的页数page和每页显示的总条数rows传进去，然后Pagehelper已经帮我们分好数据了，只需在web层获取数据即可。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询商品列表：</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DatagridResult <span class="title">itemList</span><span class="params">(Integer page, Integer rows)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为了程序的严谨性，判断非空：</span></span><br><span class="line">    <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">        page = <span class="number">1</span>;   <span class="comment">//设置默认当前页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(page &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rows == <span class="keyword">null</span>)&#123;</span><br><span class="line">        rows = <span class="number">30</span>;    <span class="comment">//设置默认每页显示的商品数(因为jsp页面上默认写的就是30条)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、设置分页信息，包括当前页数和每页显示的总计数</span></span><br><span class="line">    PageHelper.startPage(page, rows);</span><br><span class="line">    <span class="comment">//2、执行查询</span></span><br><span class="line">    TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">    List&lt;TbItem&gt; list = tbItemMapper.selectByExample(example);</span><br><span class="line">    <span class="comment">//3、获取分页查询后的数据</span></span><br><span class="line">    PageInfo&lt;TbItem&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    <span class="comment">//4、封装需要返回的分页实体</span></span><br><span class="line">    DatagridResult result = <span class="keyword">new</span> DatagridResult();</span><br><span class="line">    <span class="comment">//设置获取到的总记录数total：</span></span><br><span class="line">    result.setTotal(pageInfo.getTotal());</span><br><span class="line">    <span class="comment">//设置数据集合rows：</span></span><br><span class="line">    result.setRows(list);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="springboot集成PageHelper："><a href="#springboot集成PageHelper：" class="headerlink" title="springboot集成PageHelper："></a>springboot集成PageHelper：</h2><p><strong>第一步：pom文件还是需要引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：这次直接是在项目的入口类application.java中直接设置PageHelper插件即可</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置mybatis的分页插件pageHelper</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"offsetAsPageNum"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"rowBoundsWithCount"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"reasonable"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"dialect"</span>,<span class="string">"mysql"</span>);    <span class="comment">//配置mysql数据库的方言</span></span><br><span class="line">    pageHelper.setProperties(properties);</span><br><span class="line">    <span class="keyword">return</span> pageHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：同理，使用插件实现分页功能，方式还是一样，只需将当前查询的页数和每页显示的条数穿进去即可，直接源码</strong></p>
<p>这是需要用到的分页实体，各位可以直接享用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.riemann.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 每页显示的总条数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalNum;</span><br><span class="line">    <span class="comment">// 是否有下一页</span></span><br><span class="line">    <span class="keyword">private</span> Integer isMore;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;</span><br><span class="line">    <span class="comment">// 开始索引</span></span><br><span class="line">    <span class="keyword">private</span> Integer startIndex;</span><br><span class="line">    <span class="comment">// 分页结果</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">(Integer currentPage, Integer pageSize, Integer totalNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="keyword">this</span>.totalNum = totalNum;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = (<span class="keyword">this</span>.totalNum+<span class="keyword">this</span>.pageSize-<span class="number">1</span>)/<span class="keyword">this</span>.pageSize;</span><br><span class="line">        <span class="keyword">this</span>.startIndex = (<span class="keyword">this</span>.currentPage-<span class="number">1</span>)*<span class="keyword">this</span>.pageSize;</span><br><span class="line">        <span class="keyword">this</span>.isMore = <span class="keyword">this</span>.currentPage &gt;= <span class="keyword">this</span>.totalPage?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(Integer currentPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(Integer pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalNum</span><span class="params">(Integer totalNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalNum = totalNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIsMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isMore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsMore</span><span class="params">(Integer isMore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isMore = isMore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Integer totalPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStartIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartIndex</span><span class="params">(Integer startIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页功能源码(web层和service层)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findItemByPage</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置分页信息，分别是当前页数和每页显示的总记录数【记住：必须在mapper接口中的方法执行之前设置该分页信息】</span></span><br><span class="line">    PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">    </span><br><span class="line">    List&lt;Item&gt; allItems = itemMapper.findAll();        <span class="comment">//全部商品</span></span><br><span class="line">    <span class="keyword">int</span> countNums = itemMapper.countItem();            <span class="comment">//总记录数</span></span><br><span class="line">    PageBean&lt;Item&gt; pageData = <span class="keyword">new</span> PageBean&lt;&gt;(currentPage, pageSize, countNums);</span><br><span class="line">    pageData.setItems(allItems);</span><br><span class="line">    <span class="keyword">return</span> pageData.getItems();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品分页功能(集成mybatis的分页插件pageHelper实现)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentPage    :当前页数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize        :每页显示的总记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemsPage"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">itemsPage</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> itemService.findItemByPage(currentPage, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>ORM框架</category>
      </categories>
      <tags>
        <tag>分页功能</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记</title>
    <url>/2020/08/15/SpringCloud%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><blockquote>
<p>Spring Boot:<a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/</a></p>
</blockquote>
<blockquote>
<p>Spring Cloud:<a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/</a></p>
<p>Spring Cloud中文文档:<a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></p>
</blockquote>
<h1 id="版本对应"><a href="#版本对应" class="headerlink" title="版本对应"></a>版本对应</h1><p>SpringCloud F</p>
<p>SpringBoot 2.2.2.RELEASE</p>
<p>SpringCloud Alibaba 2.1.0.RELEASE</p>
<p>JDK1.8</p>
<p>Maven 3.5及以上</p>
<p>mysql 5.7及以上</p>
<h1 id="SpringCloud笔记"><a href="#SpringCloud笔记" class="headerlink" title="SpringCloud笔记"></a>SpringCloud笔记</h1><h2 id="微服务理解"><a href="#微服务理解" class="headerlink" title="微服务理解"></a>微服务理解</h2><p><a href="https://liuurick.github.io/2021/01/08/微服务的理解/" target="_blank" rel="noopener">微服务的理解</a></p>
<h2 id="服务注册与发现（Eureka）"><a href="#服务注册与发现（Eureka）" class="headerlink" title="服务注册与发现（Eureka）"></a>服务注册与发现（Eureka）</h2><ul>
<li><p>Eureka Server</p>
</li>
<li><p>Eureka Client</p>
</li>
<li><p>Eureka高可用（两节点，三节点演示）</p>
<p>多个节点是两两注册</p>
</li>
<li><p>服务发现原理剖析</p>
</li>
</ul>
<h2 id="服务通信"><a href="#服务通信" class="headerlink" title="服务通信"></a>服务通信</h2><ul>
<li>通信机制剖析</li>
<li>Feign</li>
<li>Ribbon（带领分析源码，了解底层）</li>
<li>RestTemplate</li>
</ul>
<h2 id="分布式配置（Spring-Cloud-Config）"><a href="#分布式配置（Spring-Cloud-Config）" class="headerlink" title="分布式配置（Spring Cloud Config）"></a>分布式配置（Spring Cloud Config）</h2><ul>
<li>Config Server</li>
<li>Config Client</li>
<li>Git和Refresh</li>
<li>自动刷新</li>
<li>SpringCloud Bus（配合RabbitMQ）</li>
</ul>
<h2 id="网关（Zuul）"><a href="#网关（Zuul）" class="headerlink" title="网关（Zuul）"></a>网关（Zuul）</h2><ul>
<li>动态路由</li>
<li>Zuul高可用</li>
<li>异常网关统一处理</li>
<li>验证与安全</li>
</ul>
<h2 id="熔断-（Hystrix）"><a href="#熔断-（Hystrix）" class="headerlink" title="熔断 （Hystrix）"></a>熔断 （Hystrix）</h2><ul>
<li>Hystrix Dashboard</li>
<li>熔断机制</li>
<li>目的和重要性</li>
</ul>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>后端</category>
        <category>分布式/微服务</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目测试模板</title>
    <url>/2020/12/15/SpringBoot%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>在Application类中写好一个模板，其他测试类继承即可</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class XXXApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图及时序图入门</title>
    <url>/2020/12/07/UML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="UML学习"><a href="#UML学习" class="headerlink" title="UML学习"></a>UML学习</h1><h2 id="UML定义"><a href="#UML定义" class="headerlink" title="UML定义"></a>UML定义</h2><ul>
<li>统一建模语言（Unified Modeling Language）</li>
<li>非专利的第三代建模和规约语言</li>
</ul>
<h2 id="UML特点"><a href="#UML特点" class="headerlink" title="UML特点"></a>UML特点</h2><ul>
<li><p>UML是一种开发的方法</p>
</li>
<li><p>用于说明，可视化，构建和编写一个正在开发的面向对象的，软件密集系统的制品的开发方法</p>
</li>
<li><p>UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效</p>
</li>
</ul>
<h2 id="UML2-2分类"><a href="#UML2-2分类" class="headerlink" title="UML2.2分类"></a>UML2.2分类</h2><p>UML2.2中一共定义了14种图示，分类如下：</p>
<ul>
<li>结构式图形：强调的是系统式的建模</li>
<li>行为式图形：强调系统模型中触发的事件</li>
<li>交互式图形：属于行为式图形子集合，强调系统模型中资料流程</li>
</ul>
<h3 id="结构式图形"><a href="#结构式图形" class="headerlink" title="结构式图形"></a>结构式图形</h3><ul>
<li>静态图（类图，对象图，包图）</li>
<li>实现图（组件图，部署图）</li>
<li>剖面图</li>
<li>复合结构图</li>
</ul>
<h3 id="行为式图形"><a href="#行为式图形" class="headerlink" title="行为式图形"></a>行为式图形</h3><ul>
<li>活动图</li>
<li>状态图</li>
<li>用例图</li>
</ul>
<h3 id="交互式图形"><a href="#交互式图形" class="headerlink" title="交互式图形"></a>交互式图形</h3><ul>
<li>通信图</li>
<li>交互概述图（UML2.0）</li>
<li>时序图（UML2.0）</li>
<li>时间图（UML2.0）</li>
</ul>
<p>UML类图</p>
<ul>
<li><p>Class Diagram:用于表示类，接口，实例等之间相互的静态关系</p>
</li>
<li><p>虽然名字叫类图，但类图中并不只有类</p>
</li>
</ul>
<p>记忆技巧</p>
<ul>
<li>UML箭头方向：从子类指向父类</li>
<li>提示：可能会认为子类是以父类为基础的，箭头应从父类指向子类</li>
</ul>
<p>箭头方向：</p>
<ul>
<li>定义子类时需要通过extends关键字指向父类</li>
<li>子类一定是知道父类定义的，但父类并不知道子类的定义</li>
<li>只有知道对方信息时才能指向对方</li>
<li>所以箭头方向是从子类指向父类</li>
</ul>
<p>实线-继承|虚线-实现</p>
<ul>
<li>空心三角箭头：继承或实现</li>
<li>实线-继承，is a 关系，扩展目的，不虚，很结实</li>
<li>虚线-实现，虚线代表“虚”无实体</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>时序图</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码学习</title>
    <url>/2020/12/20/Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Spring学了很久了，但是一直没有深入到源码，希望在接下来的源码学习中有所收获。。。</p>
<a id="more"></a>

<h1 id="1-概览"><a href="#1-概览" class="headerlink" title="1 概览"></a>1 概览</h1><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2 环境准备"></a>2 环境准备</h1><h3 id="2-1-环境安装"><a href="#2-1-环境安装" class="headerlink" title="2.1 环境安装"></a>2.1 环境安装</h3><p>安装Idea，JDK，maven并完成相应的配置<br><img src="/images/2020101901.png" alt="image-20201019191945647"></p>
<p><strong>注意：</strong>当前官方Spring最新版本为5.3.0，文档要求JDK版本需要在 <code>JDK 8 update 262 or later</code>。</p>
<p>因为JDK官网只能下载到1.8_261，所以我使用的Spring-5.2.9</p>
<p><img src="/images/2020101902.png" alt="image-20201019192232952"></p>
<h3 id="2-2-下载和编译"><a href="#2-2-下载和编译" class="headerlink" title="2.2 下载和编译"></a>2.2 下载和编译</h3><h4 id="2-2-1-下载并解压"><a href="#2-2-1-下载并解压" class="headerlink" title="2.2.1 下载并解压"></a>2.2.1 下载并解压</h4><p><img src="/images/2020101903.png" alt="image-20201019192816197"></p>
<h4 id="2-2-2-修改build-gradle"><a href="#2-2-2-修改build-gradle" class="headerlink" title="2.2.2 修改build.gradle"></a>2.2.2 修改build.gradle</h4><p>在build.gradle添加阿里云的中央仓库地址，提高依赖文件的下载速度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">			maven &#123; url <span class="string">'https://maven.aliyun.com/repository/public'</span>&#125;</span><br><span class="line">			maven &#123; url <span class="string">'https://maven.aliyun.com/repository/public'</span>&#125;</span><br><span class="line">			mavenCentral()</span><br><span class="line">			maven &#123; url <span class="string">"https://repo.spring.io/libs-spring-framework-build"</span> &#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020101904.png" alt="image-20201019195803623"></p>
<p><strong>查看阿里云Maven中央仓库：</strong><a href="https://maven.aliyun.com/mvn/guide" target="_blank" rel="noopener">https://maven.aliyun.com/mvn/guide</a></p>
<h4 id="2-2-3-安装官方文档进行配置"><a href="#2-2-3-安装官方文档进行配置" class="headerlink" title="2.2.3 安装官方文档进行配置"></a>2.2.3 安装官方文档进行配置</h4><p><img src="/images/2020101906.png" alt="image-20201019200051103"></p>
<p>1.Precompile <code>spring-oxm</code> with <code>./gradlew :spring-oxm:compileTestJava</code></p>
<p><img src="/images/2020101907.png" alt="image-20201019201845436"></p>
<p>2.Import into IntelliJ (File -&gt; New -&gt; Project from Existing Sources -&gt; Navigate to directory -&gt; Select build.gradle)</p>
<p>导入项目</p>
<p><img src="/images/2020101908.png" alt="image-20201019211425497"></p>
<p>3.When prompted exclude the <code>spring-aspects</code> module (or after the import via File-&gt; Project Structure -&gt; Modules)</p>
<p>因为<code>spring-aspects</code>有自己的编译器(AJC)，AJC会影响JVM的加载，所以需要排除出去</p>
<p>这里右键项目–》Load/Unload Modules–》选择spring-aspects–》unload–》重新加载即可</p>
<p><img src="/images/2020101909.png" alt="image-20201019212036285"></p>
<p>4.Code away</p>
<p>到这里就完成Spring源码的下载与编译</p>
<h3 id="2-3-通过一个小demo来测试一下"><a href="#2-3-通过一个小demo来测试一下" class="headerlink" title="2.3 通过一个小demo来测试一下"></a>2.3 通过一个小demo来测试一下</h3><p><a href="https://github.com/liuurick/spring-learning/tree/master/01-spring-framework-5.2.9.RELEASE/spring-demo" target="_blank" rel="noopener">spring-demo代码链接</a></p>
<h3 id="2-4-简易自研框架的编写"><a href="#2-4-简易自研框架的编写" class="headerlink" title="2.4 简易自研框架的编写"></a>2.4 简易自研框架的编写</h3><p><a href="https://github.com/liuurick/spring-learning/tree/master/02-simpleframework" target="_blank" rel="noopener">02-simpleframework</a></p>
<p><img src="/images/2020101910.png" alt="image-20201220101456099"></p>
<p>jsp运行原理图：</p>
<p><img src="/images/2020101911.png" alt="image-20201220101615094"></p>
<h1 id="3-业务系统架子的构建"><a href="#3-业务系统架子的构建" class="headerlink" title="3 业务系统架子的构建"></a>3 业务系统架子的构建</h1><h1 id="4-自研框架IOC实现前奏"><a href="#4-自研框架IOC实现前奏" class="headerlink" title="4 自研框架IOC实现前奏"></a>4 自研框架IOC实现前奏</h1><h1 id="5-自研框架IOC容器的实现"><a href="#5-自研框架IOC容器的实现" class="headerlink" title="5 自研框架IOC容器的实现"></a>5 自研框架IOC容器的实现</h1><h1 id="6-SpringIOC容器源码解析"><a href="#6-SpringIOC容器源码解析" class="headerlink" title="6 SpringIOC容器源码解析"></a>6 SpringIOC容器源码解析</h1><h1 id="7-详解SpringIOC容器的初始化"><a href="#7-详解SpringIOC容器的初始化" class="headerlink" title="7 详解SpringIOC容器的初始化"></a>7 详解SpringIOC容器的初始化</h1><h1 id="8-SpringIOC容器的依赖注入"><a href="#8-SpringIOC容器的依赖注入" class="headerlink" title="8 SpringIOC容器的依赖注入"></a>8 SpringIOC容器的依赖注入</h1><h1 id="9-自研框架AOP的讲解与实现"><a href="#9-自研框架AOP的讲解与实现" class="headerlink" title="9 自研框架AOP的讲解与实现"></a>9 自研框架AOP的讲解与实现</h1><h1 id="10-SpringAOP的源码解析"><a href="#10-SpringAOP的源码解析" class="headerlink" title="10 SpringAOP的源码解析"></a>10 SpringAOP的源码解析</h1><h1 id="11-自研框架MVC的实现"><a href="#11-自研框架MVC的实现" class="headerlink" title="11 自研框架MVC的实现"></a>11 自研框架MVC的实现</h1><h1 id="12-SpringMVC流程分析"><a href="#12-SpringMVC流程分析" class="headerlink" title="12 SpringMVC流程分析"></a>12 SpringMVC流程分析</h1><h1 id="13-总结"><a href="#13-总结" class="headerlink" title="13 总结"></a>13 总结</h1>]]></content>
      <categories>
        <category>源码</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>.gitignore的使用</title>
    <url>/2021/01/20/gitignore%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>很长一段时间忽视了.gitignore的作用，果真还是自己太菜了。。。</p>
<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>官方文档：<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
</blockquote>
<h1 id="Java官方模板"><a href="#Java官方模板" class="headerlink" title="Java官方模板"></a>Java官方模板</h1><p>.gitignore文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp&#x2F;</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;download&#x2F;help&#x2F;error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br></pre></td></tr></table></figure>



<h1 id="个人常用模板"><a href="#个人常用模板" class="headerlink" title="个人常用模板"></a>个人常用模板</h1><p>.gitignore文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Compiled class file #</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Eclipse #</span><br><span class="line">.project</span><br><span class="line">.classpath</span><br><span class="line">.settings&#x2F;</span><br><span class="line"></span><br><span class="line"># Intellij #</span><br><span class="line">*.ipr</span><br><span class="line">*.iml</span><br><span class="line">*.iws</span><br><span class="line">.idea&#x2F;</span><br><span class="line"></span><br><span class="line"># Maven #</span><br><span class="line">target&#x2F;</span><br><span class="line"></span><br><span class="line"># Gradle #</span><br><span class="line">build</span><br><span class="line">.gradle</span><br><span class="line"></span><br><span class="line"># Log file #</span><br><span class="line">*.log</span><br><span class="line">log&#x2F;</span><br><span class="line"></span><br><span class="line"># out #</span><br><span class="line">**&#x2F;out&#x2F;</span><br><span class="line"></span><br><span class="line"># Mac #</span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"># others #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.zip</span><br><span class="line">*.tar</span><br><span class="line">*.tar.gz</span><br><span class="line">*.pid</span><br><span class="line">*.orig</span><br><span class="line">temp&#x2F;</span><br></pre></td></tr></table></figure>



<h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p>
<p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'update .gitignore'</span></span><br></pre></td></tr></table></figure>

<p>如果你确实想添加该文件，可以用-f强制添加到Git：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -f xxx.class</span><br></pre></td></tr></table></figure>

<p>或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，</p>
<p>可以用<code>git check-ignore</code>命令检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git check-ignore -v xxx.class</span><br><span class="line">.gitignore:3:*.class    xxx.class</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
        <category>代码管理工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>canal-adapter启动失败问题记录</title>
    <url>/2020/12/14/canal-adapter%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>canal:<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></p>
</blockquote>
<a id="more"></a>

<h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><p>canal-1.4 </p>
<p>elasticsearch-7.7.1</p>
<p>jdk1.8</p>
<p>mysql-5.7.30</p>
<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-12-13 09:39:06.006 [main] INFO  o.s.c.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@37efd131: startup date [Sun Dec 13 09:39:05 GMT+08:00 2020]; root of context hierarchy</span><br><span class="line">2020-12-13 09:39:06.521 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;configurationPropertiesRebinderAutoConfiguration&#39; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d7bfd1f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2020-12-13 09:39:06.852 [main] INFO  c.a.otter.canal.adapter.launcher.CanalAdapterApplication - No active profile set, falling back to default profiles: default</span><br><span class="line">2020-12-13 09:39:06.884 [main] INFO  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@796d3c9f: startup date [Sun Dec 13 09:39:06 GMT+08:00 2020]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@37efd131</span><br><span class="line">2020-12-13 09:39:07.640 [main] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id&#x3D;ba9c0aec-0105-3f1f-b89e-e85c68567039</span><br><span class="line">2020-12-13 09:39:07.724 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&#39; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d7bfd1f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2020-12-13 09:39:09.358 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8081 (http)</span><br><span class="line">2020-12-13 09:39:09.382 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler [&quot;http-nio-8081&quot;]</span><br><span class="line">2020-12-13 09:39:09.402 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]</span><br><span class="line">2020-12-13 09:39:09.404 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat&#x2F;8.5.29</span><br><span class="line">2020-12-13 09:39:09.421 [localhost-startStop-1] INFO  org.apache.catalina.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk-11.0.9\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;&quot;.;C:\Program Files\Java\jdk-11.0.9\\bin;E:\tomcat\apache-tomcat-8.5.59\bin;&quot;;C:\Program Files\VanDyke Software\Clients\;E:\Python\python3\Scripts\;E:\Python\python3\;E:\Java\maven\apache-maven-3.6.3\bin;E:\IDEA\gradle\gradle-5.4.1\bin;E:\app\admin\product\11.2.0\dbhome_1\bin;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin;C:\;rogram Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Microsoft SQL Server\90\Tools\binn\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;人网站\Git\bin;:\;人网站\Git\cmd;it;cmd;D:\;C:\WINDOWS\System32\OpenSSH\;&quot;E:\tomcat\apache-tomcat-8.5.59\bin;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\&quot;;E:\Coding\winhadoop\bin;E:\Git\cmd;E:\node\;C:\Program Files\MySQL\MySQL Server 5.7\bin;C:\Program Files (x86)\CADSeePlus;E:\tomcat\apache-tomcat-8.5.34\bin;C:\Program Files\Java\jdk1.8.0_261\bin;C:\Program Files\Java\jdk-11.0.9\bin;E:\Python\python3\Scripts\;E:\Python\python3\;C:\Program Files (x86)\Microsoft Visual Studio\Common\Tools\WinNT;C:\Program Files (x86)\Microsoft Visual Studio\Common\MSDev98\Bin;C:\Program Files (x86)\Microsoft Visual Studio\Common\Tools;C:\Program Files (x86)\Microsoft Visual Studio\VC98\bin;C:\Qt\Qt5.6.2\5.6\msvc2013\bin;C:\Users\admin\AppData\Local\Microsoft\WindowsApps;E:\个人网站\Git\bin;C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin;C:\Users\admin\AppData\Local\GitHubDesktop\bin;&quot;E:\IDEA\gradle\gradle-5.4.1\bin;&quot;;C:\Users\admin\AppData\Local\Microsoft\WindowsApps;E:\IDEA\IntelliJ IDEA 2019.3.4\bin;;C:\Users\admin\AppData\Local\Pandoc\;C:\Users\admin\AppData\Roaming\npm;E:\vscode\Microsoft VS Code\bin;C:\Program Files\MySQL\MySQL Server 5.7\bin;E:\WebStorm\WebStorm 2020.2\bin;;C:\Program Files\Bandizip\;C:\Program Files\JetBrains\PyCharm 2020.1.4\bin;;;.]</span><br><span class="line">2020-12-13 09:39:09.650 [localhost-startStop-1] INFO  o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[&#x2F;] - Initializing Spring embedded WebApplicationContext</span><br><span class="line">2020-12-13 09:39:09.650 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2766 ms</span><br><span class="line">2020-12-13 09:39:09.902 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Servlet dispatcherServlet mapped to [&#x2F;]</span><br><span class="line">2020-12-13 09:39:09.910 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;characterEncodingFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.913 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.914 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;httpPutFormContentFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.915 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;requestContextFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:10.094 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;applicationConfigMonitor&#39;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Config dir not found.</span><br><span class="line">2020-12-13 09:39:10.098 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]</span><br><span class="line">2020-12-13 09:39:10.321 [localhost-startStop-1] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.base@11.0.9&#x2F;java.lang.Object.wait(Native Method)</span><br><span class="line"> java.base@11.0.9&#x2F;java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)</span><br><span class="line"> app&#x2F;&#x2F;com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:43)</span><br><span class="line">2020-12-13 09:39:10.341 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLoggingListener - </span><br><span class="line"></span><br><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.</span><br><span class="line">2020-12-13 09:39:10.347 [main] ERROR org.springframework.boot.SpringApplication - Application run failed</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;applicationConfigMonitor&#39;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Config dir not found.</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:138)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:422)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1694)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:579)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)</span><br><span class="line">	at com.alibaba.otter.canal.adapter.launcher.CanalAdapterApplication.main(CanalAdapterApplication.java:19)</span><br><span class="line">Caused by: java.lang.RuntimeException: Config dir not found.</span><br><span class="line">	at com.alibaba.otter.canal.client.adapter.support.Util.getConfDirPath(Util.java:105)</span><br><span class="line">	at com.alibaba.otter.canal.client.adapter.support.Util.getConfDirPath(Util.java:85)</span><br><span class="line">	at com.alibaba.otter.canal.adapter.launcher.monitor.ApplicationConfigMonitor.init(ApplicationConfigMonitor.java:41)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:566)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:365)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:308)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:135)</span><br><span class="line">	... 16 common frames omitted</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>canal</category>
      </categories>
      <tags>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>canal中间件学习笔记</title>
    <url>/2020/12/09/canal%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>es准时性索引的构建</p>
<a id="more"></a>

<h1 id="增量索引构建的要求"><a href="#增量索引构建的要求" class="headerlink" title="增量索引构建的要求"></a>增量索引构建的要求</h1><ul>
<li>准实时；</li>
<li>性能；</li>
<li>编程简化；</li>
</ul>
<h1 id="canal-简介"><a href="#canal-简介" class="headerlink" title="canal 简介"></a>canal 简介</h1><blockquote>
<p>canal:<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></p>
<p>canal同步数据：<a href="https://mp.weixin.qq.com/s/zaV98KHVyXUW32DqypU1OQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zaV98KHVyXUW32DqypU1OQ</a></p>
</blockquote>
<ul>
<li>消息管道；</li>
<li>source 为 MySQL 数据库；</li>
<li>target 为其他存储，比如 ElasticSearch；</li>
<li>Canal 借鉴了MySQL主从复制的原理，伪装成一个 MySQL 主库的备库，感知 MySQL 中 binlog 的变化，并同步出来一个结构化的数据，交给 Canal 管道的消费端；</li>
</ul>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121201.png" alt="img"></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><h2 id="MySQL主备复制原理"><a href="#MySQL主备复制原理" class="headerlink" title="MySQL主备复制原理"></a>MySQL主备复制原理</h2><p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121202.png" alt="img"></p>
<ul>
<li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看)</li>
<li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</li>
<li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li>
</ul>
<h2 id="canal-工作原理"><a href="#canal-工作原理" class="headerlink" title="canal 工作原理"></a>canal 工作原理</h2><ul>
<li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li>
<li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>
<li>canal 解析 binary log 对象(原始为 byte 流)</li>
</ul>
<blockquote>
<p>canal快速启动：<a href="https://github.com/alibaba/canal/wiki/QuickStart" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/QuickStart</a></p>
</blockquote>
<h1 id="Linux下安装canal"><a href="#Linux下安装canal" class="headerlink" title="Linux下安装canal"></a>Linux下安装canal</h1><h2 id="开启-MySQL-的-binglog"><a href="#开启-MySQL-的-binglog" class="headerlink" title="开启 MySQL 的 binglog"></a>开启 MySQL 的 binglog</h2><h6 id="Ubuntu-用-APT-Repository-安装-MySQL-的安装位置"><a href="#Ubuntu-用-APT-Repository-安装-MySQL-的安装位置" class="headerlink" title="Ubuntu 用 APT Repository 安装 MySQL 的安装位置"></a>Ubuntu 用 APT Repository 安装 MySQL 的安装位置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mysql - 配置文件</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql - 数据存放的位置</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql - 启动命令</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;mysql -  插件</span><br></pre></td></tr></table></figure>



<h6 id="查看-MySQL-几个变量的值"><a href="#查看-MySQL-几个变量的值" class="headerlink" title="查看 MySQL 几个变量的值"></a>查看 MySQL 几个变量的值</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要保证 binlog 开启，并且格式是 ROW；</span><br><span class="line"></span><br><span class="line">如果不是上述配置的话，需要修改 &#96;&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf&#96;，然后还要给 MySQL 实例起个 &#96;server-id &#x3D; 1&#96;；MySQL 8 的话，两个参数默认就是这样的，然后 &#96;server-id&#96; 给个唯一值就行了；</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启 binlog</span></span><br><span class="line">show variables like <span class="string">'log_bin'</span>;</span><br><span class="line"><span class="comment"># binlog 的格式</span></span><br><span class="line">show variables like <span class="string">'binlog_format'</span>;</span><br></pre></td></tr></table></figure>



<h6 id="创建复制用户"><a href="#创建复制用户" class="headerlink" title="创建复制用户"></a>创建复制用户</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">create user <span class="string">'canal'</span>@<span class="string">'%'</span> identified <span class="keyword">by</span> <span class="string">'canal'</span>;</span><br><span class="line"></span><br><span class="line">grant replication slave <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">grant replication client <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">grant <span class="keyword">select</span> <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>



<h2 id="canal-配置-1-1-3"><a href="#canal-配置-1-1-3" class="headerlink" title="canal 配置 | 1.1.3"></a>canal 配置 | 1.1.3</h2><h6 id="修改-canal-properties"><a href="#修改-canal-properties" class="headerlink" title="修改 canal.properties"></a>修改 canal.properties</h6><ul>
<li>文件路径：<code>/canal/1.1.3/canal.deployer-1.1.3/conf</code>；</li>
<li>这一行注释掉；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml</span></span><br></pre></td></tr></table></figure>

<h6 id="修改-instance-properties"><a href="#修改-instance-properties" class="headerlink" title="修改 instance.properties"></a>修改 instance.properties</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置：&#x2F;canal&#x2F;1.1.3&#x2F;canal.deployer-1.1.3&#x2F;conf&#x2F;example&#x2F;instance.properties；</span><br></pre></td></tr></table></figure>

<p>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canal.instance.mysql.slaveId&#x3D;8</span><br><span class="line"></span><br><span class="line">canal.instance.dbUsername&#x3D;canal</span><br><span class="line">canal.instance.dbPassword&#x3D;canal</span><br></pre></td></tr></table></figure>

<h6 id="启动-canal"><a href="#启动-canal" class="headerlink" title="启动 canal"></a>启动 canal</h6><p>JDK 换成 8 才启动起来；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;startup.sh</span><br></pre></td></tr></table></figure>

<h2 id="canal-adapter-1-1-4"><a href="#canal-adapter-1-1-4" class="headerlink" title="canal.adapter | 1.1.4"></a>canal.adapter | 1.1.4</h2><h6 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 IDEA 中打开 client-adapter module；</span><br><span class="line"></span><br><span class="line">修改 &#x2F;canal-canal-1.1.4&#x2F;client-adapter&#x2F;elasticsearch&#x2F;pom.xml&#96; 中的 ElasticSearch 的依赖版本，改成 7.3.0；</span><br></pre></td></tr></table></figure>

<p>pom.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="在总-module-的目录下重新打包-canal"><a href="#在总-module-的目录下重新打包-canal" class="headerlink" title="在总 module 的目录下重新打包 canal"></a>在总 module 的目录下重新打包 canal</h6><ul>
<li>路径为：<code>canal-canal-1.1.4</code>；</li>
<li>打包命令：<code>mvn clean package -DskipTests</code>；</li>
<li>报错：<code>[ERROR] /canal-canal-1.1.4/client-adapter/elasticsearch/src/main/java/com/alibaba/otter/canal/client/adapter/es/support/ESConnection.java:[420,47] 无法将类 org.elasticsearch.client.RestHighLevelClient中的方法 bulk应用到给定类型;</code></li>
<li>找到指定的 ESConnection.java 的 420 行，解决问题：<code>return restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</code></li>
<li>重新打包：<code>mvn clean package -DskipTests</code>；</li>
<li>报错：<code>/canal-canal-1.1.4/client-adapter/elasticsearch/src/main/java/com/alibaba/otter/canal/client/adapter/es/ESAdapter.java:[225,56] 不兼容的类型: org.apache.lucene.search.TotalHits无法转换为long</code>；</li>
<li>找到指定的 ESAdapter.java 的 225 行，解决问题：<code>long rowCount = response.getHits().getTotalHits().value;</code>；</li>
<li>重新打包：<code>mvn clean package -DskipTests</code>，终于成功了；</li>
</ul>
<h6 id="进入编译后生成的目录"><a href="#进入编译后生成的目录" class="headerlink" title="进入编译后生成的目录"></a>进入编译后生成的目录</h6><ul>
<li><code>/canal-canal-1.1.4/client-adapter/launcher/target/canal-adapter</code>，里面的内容和直接从 Github 上下载二进制的包是一样的;</li>
<li>把这个目录拷到正经的目录下，并改个名字 <code>/canal/1.1.4/canal-adapter-es7</code>；</li>
</ul>
<h6 id="修改配置文件-application-yml"><a href="#修改配置文件-application-yml" class="headerlink" title="修改配置文件 application.yml"></a>修改配置文件 application.yml</h6><ul>
<li>文件路径：<code>/canal/1.1.4/canal-adapter-es7/conf/application.yml</code>；</li>
<li>这个配置主要是指明管道两端的 MySQL 和 ElasticSearch；</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">server:</span></span><br><span class="line">  <span class="symbol">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="symbol">spring:</span></span><br><span class="line">  <span class="symbol">jackson:</span></span><br><span class="line">    date-<span class="symbol">format:</span> yyyy-MM-dd <span class="symbol">HH:</span><span class="symbol">mm:</span>ss</span><br><span class="line">    time-<span class="symbol">zone:</span> GMT+<span class="number">8</span></span><br><span class="line">    default-property-<span class="symbol">inclusion:</span> non_null</span><br><span class="line"></span><br><span class="line">canal.<span class="symbol">conf:</span></span><br><span class="line">  <span class="symbol">mode:</span> tcp </span><br><span class="line">  <span class="symbol">canalServerHost:</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">11111</span></span><br><span class="line">  <span class="symbol">batchSize:</span> <span class="number">500</span></span><br><span class="line">  <span class="symbol">syncBatchSize:</span> <span class="number">1000</span></span><br><span class="line">  <span class="symbol">retries:</span> <span class="number">0</span></span><br><span class="line">  <span class="symbol">timeout:</span></span><br><span class="line">  <span class="symbol">accessKey:</span></span><br><span class="line">  <span class="symbol">secretKey:</span></span><br><span class="line">  <span class="symbol">srcDataSources:</span></span><br><span class="line">    <span class="symbol">defaultDS:</span></span><br><span class="line">      <span class="symbol">url:</span> <span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/127.0.0.1:3306/dianping</span>?useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line">      <span class="symbol">username:</span> canal</span><br><span class="line">      <span class="symbol">password:</span> canal</span><br><span class="line">  <span class="symbol">canalAdapters:</span></span><br><span class="line">  - <span class="symbol">instance:</span> example </span><br><span class="line">    <span class="symbol">groups:</span></span><br><span class="line">    - <span class="symbol">groupId:</span> g1</span><br><span class="line">      <span class="symbol">outerAdapters:</span></span><br><span class="line">      - <span class="symbol">name:</span> logger</span><br><span class="line">      - <span class="symbol">name:</span> es</span><br><span class="line">        <span class="symbol">hosts:</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9300</span></span><br><span class="line">        <span class="symbol">properties:</span></span><br><span class="line">          cluster.<span class="symbol">name:</span> dianping-app</span><br></pre></td></tr></table></figure>

<h6 id="创建文件-shop-yml"><a href="#创建文件-shop-yml" class="headerlink" title="创建文件 shop.yml"></a>创建文件 shop.yml</h6><ul>
<li>文件路径：<code>/canal/1.1.4/canal-adapter-es7/conf/es/shop.yml</code>；</li>
<li>其中 <code>defaultDS</code> 和   <code>example</code> 分别对应 application.yml 中的 <code>defaultDS</code> 和   <code>example</code>；</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: </span><br><span class="line">esMapping:</span><br><span class="line">  _index: shop</span><br><span class="line">  _type: _doc</span><br><span class="line">  _<span class="keyword">id</span>: <span class="keyword">id</span></span><br><span class="line">  upsert: <span class="literal">true</span></span><br><span class="line">  sql: <span class="string">"select a.id,a.name,a.tags,concat(a.latitude,',',a.longitude) as location,a.remark_score,a.price_per_man,a.category_id,b.name as category_name,a.seller_id,c.remark_score as seller_remark_score,c.disabled_flag as seller_disabled_flag from shop a inner join category b on a.category_id = b.id inner join seller c on c.id = a.seller_id"</span></span><br><span class="line">  commitBatch: <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h6 id="启动-canal-adapter-es7"><a href="#启动-canal-adapter-es7" class="headerlink" title="启动 canal-adapter-es7"></a>启动 canal-adapter-es7</h6><ul>
<li>MySQL 8 要把 <code>/canal/1.1.4/canal-adapter-es7/lib</code> 下的驱动换一下；</li>
<li>启动命令：<code>bin/startup.sh</code>；</li>
</ul>
<h6 id="启动编译好的-canal-deployer-es7"><a href="#启动编译好的-canal-deployer-es7" class="headerlink" title="启动编译好的 canal-deployer-es7"></a>启动编译好的 canal-deployer-es7</h6><ul>
<li>canal.adapter-1.1.4 和 canal.deployer-1.1.3 是不兼容的，所以要把之前启动的 canal.deployer-1.1.3 换成 Maven 编译好的 canal.deployer-1.1.4；</li>
<li>编译好的原路径：<code>/canal-canal-1.1.4/deployer/target/canal</code>，更改到新路径：<code>/canal/1.1.4/canal-deployer-es7</code>；</li>
<li>先关停 canal.deployer-1.1.3：<code>bin/stop.sh</code>；</li>
<li>把 canal.deployer-1.1.3 的 canal.properties 和 example/ 拷贝到 canal-deployer-es7 中；</li>
<li>启动 canal-deployer-es7：<code>bin/startup.sh</code>；</li>
</ul>
<h6 id="更新-MySQL-中-dianping-库的-shop-表"><a href="#更新-MySQL-中-dianping-库的-shop-表" class="headerlink" title="更新 MySQL 中 dianping 库的 shop 表"></a>更新 MySQL 中 dianping 库的 shop 表</h6><ul>
<li>日志文件 <code>canal-adapter-es7/logs/adapter/adapter.log</code> 立马可以感知到；</li>
<li>在 ElasticSearch 中查询，也可以立马感知到；</li>
</ul>
<h1 id="Windows下安装canal"><a href="#Windows下安装canal" class="headerlink" title="Windows下安装canal"></a>Windows下安装canal</h1><h2 id="开启-MySQL-的-binglog-1"><a href="#开启-MySQL-的-binglog-1" class="headerlink" title="开启 MySQL 的 binglog"></a>开启 MySQL 的 binglog</h2><p>1.查看mysql的<code>log_bin</code>是否开启。</p>
<p>因为canal是通过<code>log_bin</code>监听更新的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%log_bin%&#39;</span><br></pre></td></tr></table></figure>

<p>如果value为off需要修改my.ini文件</p>
<p><strong>注意</strong>：可能会出现MySQL目录下找不到 my.ini 的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在Windows窗口栏查看-》勾选隐藏的项目</span><br><span class="line">2.找到ProgramData目录</span><br><span class="line">3.在ProgramData目录中找到MySQL</span><br></pre></td></tr></table></figure>



<p>2.修改my.ini文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_id&#x3D;1 ###代表集群模式第一台机器</span><br><span class="line">binlog_format&#x3D;ROW ###行模式</span><br><span class="line">log_bin&#x3D;mysql_bin.log ###binlog的文件名称</span><br><span class="line">expire-logs-days&#x3D;14 ###失效日期为14天（可不配置）</span><br><span class="line">max-binlog-size&#x3D;500M ###最大存储500MB（可不配置）</span><br></pre></td></tr></table></figure>



<p>重启MySQL之后再次查询：</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121203.png" alt="image-20201212190859514"></p>
<h2 id="编译canal-adapter"><a href="#编译canal-adapter" class="headerlink" title="编译canal-adapter"></a>编译canal-adapter</h2><p>因为canal的es默认版本并不匹配,所以需要重新编译</p>
<p><strong>ESAdapter类中的类型错误</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long rowCount &#x3D; response.getHits().getTotalHits().value;</span><br></pre></td></tr></table></figure>

<p><strong>ESConnection</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BulkResponse bulk() &#123;</span><br><span class="line">            if (mode &#x3D;&#x3D; ESClientMode.TRANSPORT) &#123;</span><br><span class="line">                return bulkRequestBuilder.execute().actionGet();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    return restHighLevelClient.bulk(bulkRequest,RequestOptions.DEFAULT);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    throw new RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="安装canal-adapter"><a href="#安装canal-adapter" class="headerlink" title="安装canal-adapter"></a>安装canal-adapter</h2><p>1.修改conf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srcDataSources:</span><br><span class="line">    defaultDS:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;dianpingdb?useUnicode&#x3D;true</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- name: es</span><br><span class="line">        hosts: 127.0.0.1:9300 # 127.0.0.1:9200 for rest mode</span><br><span class="line">        properties:</span><br><span class="line">          mode: transport # or rest</span><br><span class="line">          # security.auth: test:123456 #  only used for rest mode</span><br><span class="line">          cluster.name: elasticsearch</span><br></pre></td></tr></table></figure>



<p>2.修改es目录下的文件</p>
<p>创建shop.yml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: </span><br><span class="line">esMapping:</span><br><span class="line">  _index: shop</span><br><span class="line">  _type: _doc</span><br><span class="line">  _id: id</span><br><span class="line">  upsert: true</span><br><span class="line">  sql: &quot;select a.id,a.name,a.tags,concat(a.latitude,&#39;,&#39;,a.longitude) as location,a.remark_score,a.price_per_man,a.category_id,b.name as category_name,a.seller_id,c.remark_score as seller_remark_score,c.disabled_flag as seller_disabled_flag from shop a inner join category b on a.category_id &#x3D; b.id inner join seller c on c.id &#x3D; a.seller_id&quot;</span><br><span class="line">  commitBatch: 3000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>canal</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper笔记</title>
    <url>/2020/03/24/Zookeeper%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Zookeeper知识点总结</p>
<a id="more"></a>

<h2 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h2><p>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。Zookeeper是基于分布式计算的核心概念而设计的，主要目的是给开发人员提供一套容易理解和开发的接口，从而简化分布式系统构建的服务。<br>Zookeeper是一个分布式协调服务的开源框架，它是由Google的Chubby开源实现。Zookeeper主要用来解决分布式集群中应用系统的一致性问题和单点故障问题，例如如何避免同时操作同一数据造成脏读的一致性问题等。<br>Zookeeper具有全局数据一致性、可靠性、顺序性、原子性以及实时性，可以说Zookeeper的其他特性都是为满足Zookeeper全局数据一致性这一特性。<br><strong>1.全局数据一致</strong><br>每个服务器都保存一份相同的数据副本，客户端无论连接到集群的任意节点上，看到的目录树都是一致的（也就是数据都是一致的），这也是Zookeeper最重要的特征。<br><strong>2.可靠性</strong><br>如果消息（对目录结构的增删改查）被其中一台服务器接收，那么将被所有的服务器接收。<br><strong>3.顺序性</strong><br>Zookeeper顺序性主要分为全局有序和偏序两种，其中全局有序是指如果在一台服务器上消息A在消息B前发布，则在所有服务器上消息A都将在消息B前被发布；偏序是指如果一个消息B在消息A后被同一个发送者发布，A必将排在B前面。无论全局有序还是偏序，其目的都是为了保证Zookeeper全局数据一致。<br><strong>4.数据更新原子性</strong><br>一次数据更新要么成功（半数以上节点成功），要么失败，不存在中间状态。<br><strong>5.实时性</strong><br>Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。<br>Zookeeper集群是一个主从集群，它一般是由一个Leader（领导者）和多个Follower（跟随者）组成。此外，针对访问量比较大的Zookeeper集群，还可新增Observer（观察者）。Zookeeper集群中的三种角色各司其职，共同完成分布式协调服务。<br>1.Leader它是Zookeeper集群工作的核心，卫是事务性请求（写操作）的唯一调度和处理者，它保证集群事务处理的顺序性，同时负责进行投票的发起和决议，以及更新系统状态。</p>
<p>2.Follower它负责处理客户端的非事务（读操作）请求，如果接收到客户端发来的事务性请求，则会转发给Leader，让Leader进行处理，同时还负责在Leader选举过程中参与投票。</p>
<p>3.Observer它负责观察Zookeeper集群的最新状态的变化，并且将这些状态进行同步。对于非事务性请求可以进行独立处理；对于事务性请求，则会转发给Leader服务器进行处理。它不会参与任何形式的投票，只提供非事务性的服务，通常用于在不影响集群事务处理能力的前提下，提升集群的非事务处理能力（提高集群读的能力，也降低了集群选主的复杂程度）。</p>
<h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p><img src="/images/2020032401.png" alt="image-20201204164651818"></p>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Zookeeper是由节点组成的树，树中的每个节点被称为—Znode。每个节点都可以拥有子节点。每一个Znode默认能够存储1MB的数据，每个Znode都可以通过其路径唯一标识，如图中第三层的第一个Znode,，它的路径是/app1/p_1。Zookeeper数据模型中每个Znode都是由三部分组成，分别是stat、data、children。</p>
<h3 id="Znode的类型"><a href="#Znode的类型" class="headerlink" title="Znode的类型"></a>Znode的类型</h3><p>Znode的类型在创建时被指定，一旦创建就无法改变。<br>Znode有两种类型，分别是<strong>临时节点</strong>和<strong>永久节点</strong>。</p>
<p><strong>临时节点：</strong>该生命周期依赖于创建它们的会话，一旦会话结束，临时节点将会被自动删除，也可以手动删除。虽然每个临时的Znode都会绑定一个客户端，但它们对所有的客户端还是可见的。需要注意的是临时节点不允许拥有子节点。<br><strong>永久节点：</strong>该生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，它们才能被删除。</p>
<h3 id="Znode的属性"><a href="#Znode的属性" class="headerlink" title="Znode的属性"></a>Znode的属性</h3><table>
<thead>
<tr>
<th><strong>属性名称</strong></th>
<th><strong>相关说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>czxid</td>
<td>节点被创建的时间</td>
</tr>
<tr>
<td>ctime</td>
<td>节点最后一次的修改的Zxid值</td>
</tr>
<tr>
<td>mzxid</td>
<td>节点最后一次的修改时间</td>
</tr>
<tr>
<td>mtime</td>
<td>与该节点的子节点最后一次修改的Zxid值</td>
</tr>
<tr>
<td>pZxid</td>
<td>子节点被修改的版本号</td>
</tr>
<tr>
<td>cversion</td>
<td>节点被创建的时间</td>
</tr>
<tr>
<td>dataVersion</td>
<td>数据版本号</td>
</tr>
<tr>
<td>aclVersion</td>
<td>ACL版本号</td>
</tr>
<tr>
<td>ephemeralOwner</td>
<td>如果此节点为临时节点，那么该值代表这个节点拥有者的会话ID；否则值为0</td>
</tr>
<tr>
<td>dataLength</td>
<td>节点数据域长度</td>
</tr>
<tr>
<td>numChildren</td>
<td>节点拥有的子节点个数</td>
</tr>
</tbody></table>
<h2 id="Zookeeper的Watcher机制"><a href="#Zookeeper的Watcher机制" class="headerlink" title="Zookeeper的Watcher机制"></a>Zookeeper的Watcher机制</h2><p>在ZooKeeper中，引入了Watch机制来实现这种分布式的通知功能。ZooKeeper允许客户端向服务端注册一个Watch监听，当服务端的一些事件触发了这个Watch，那么就会向指定客户端发送一个事件通知，来实现分布式的通知功能。</p>
<ul>
<li>一次性触发</li>
<li>事件封装</li>
<li>异步发送</li>
<li>先注册再触发</li>
</ul>
<table>
<thead>
<tr>
<th><strong>连接状态</strong></th>
<th><strong>状态含义</strong></th>
<th><strong>事件类型</strong></th>
<th><strong>事件含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Disconnected</td>
<td>连接失败</td>
<td>NodeCreated</td>
<td>节点被创建</td>
</tr>
<tr>
<td>SyncConnected</td>
<td>连接成功</td>
<td>NodeDataChanged</td>
<td>节点数据变更</td>
</tr>
<tr>
<td>AuthFailed</td>
<td>认证失败</td>
<td>NodeChildrentChanged</td>
<td>子节点数据变更</td>
</tr>
<tr>
<td>Expired</td>
<td>会话过期</td>
<td>NodeDeleted</td>
<td>节点被删除</td>
</tr>
</tbody></table>
<h2 id="Zookeeper的选举机制"><a href="#Zookeeper的选举机制" class="headerlink" title="Zookeeper的选举机制"></a>Zookeeper的选举机制</h2><p>Zookeeper为了保证各节点的协同工作，在工作时需要一个Leader角色，而Zookeeper默认采用FastLeaderElection算法，且投票数大于半数则胜出的机制。</p>
<ul>
<li>服务器ID：设置集群myid参数时，参数分别为服务器1、服务器2、服务器3，编号越大<br>FastLeaderElection算法中权重越大。</li>
<li>选举ID：选举过程中，Zookeeper服务器有四种状态，分别为竞选状态、随从状态、观察状态、领  导者状态。</li>
<li>逻辑时钟：逻辑时钟被称为投票次数，同一轮投票过程中逻辑时钟值相同，逻辑时钟起始值为0，   每投一次票，数据增加。与接收到其它服务器返回的投票信息中数值比较，根据不同值做出不同判  断。</li>
<li>数据ID：是服务器中存放的最新数据版本号，该值越大则说明数据越新，在选举过程中数据越新  权重越大</li>
</ul>
<p>Zookeeper选举机制有两种类型，分别为全新集群选举和非全新集群选举。全新集群选举是新搭建起来  的，没有数据ID和逻辑时钟的数据影响集群的选举；非全新集群选举时是优中选优，保证Leader是Zookeeper集群中数据最完整、最可靠的一台服务器。</p>
<p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没 有历史数据，在存放数据量这一点上，都是一样的。</p>
<p>假设这些服务器依序启动，来看看会发生什么</p>
<p><img src="/images/2020032402.png" alt="image-20201204170121824"></p>
<p>（1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3  票），选举无法完成，服务器1状态保持为LOOKING；<br>（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现  服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，  服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING<br>（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器<br>1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服  务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；<br>（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。  交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器    3，并更改状态为FOLLOWING；<br>（5）服务器5启动，同4一样当小弟。</p>
<h2 id="Zookeeper分布式集群部署"><a href="#Zookeeper分布式集群部署" class="headerlink" title="Zookeeper分布式集群部署"></a>Zookeeper分布式集群部署</h2><p>Zookeeper分布式集群部署指的是ZooKeeper分布式模式安装。Zookeeper集群搭建通常是由2n+1台 服务器组成，这是为了保证 Leader 选举（基于Paxos算法的实现）能够通过半数以上台服务器选举支持，因此ZooKeeper集群的数量一般为奇数台。</p>
<p>官网首页：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p>
<p>ZooKeeper下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/</a></p>
<p>1.上传Zookeeper安装包。将下载完毕的Zookeeper安装包上传至Linux系统/export/software/目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv ~&#x2F;apache-zookeeper-3.5.7-bin.tar.gz &#x2F;export&#x2F;software&#x2F;</span><br></pre></td></tr></table></figure>

<p>2.解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C &#x2F;export&#x2F;servers&#x2F;</span><br></pre></td></tr></table></figure>

<p>3.修改Zookeeper的配置文件。先将zoo_sample.cfg配置文件重命名为zoo.cfg</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020032403.png" alt="image-20201204170637531"></p>
<p> Zookeeper中的配置文件zoo.cfg中参数含义解读如下：</p>
<p>1.<strong>tickTime =2000：通信心跳数</strong>，Zookeeper服务器与客户端心跳时间，单位毫秒</p>
<p>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是</p>
<p>2.<strong>initLimit =10：LF初始通信时限</strong></p>
<p>集群中的Follower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime 的量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。</p>
<p>3.<strong>syncLimit =5：LF同步通信时限</strong></p>
<p>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。</p>
<p>4.<strong>dataDir：数据文件目录+数据持久化路径</strong></p>
<p>主要用于保存Zookeeper中的数据。</p>
<p>5.<strong>clientPort =2181：客户端连接端口监听客户端连接的端口。</strong></p>
<p>6.<strong>server.1=hadoop01:2888:3888</strong>：配置zK集群的服务器编号以及对应的主机名、选举端口号和通信端口号（心跳端口号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F;zkdata </span><br><span class="line">cd &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F;zkdata</span><br><span class="line">echo 1 &gt; myid </span><br><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020032404.png" alt="image-20201204171247218"></p>
<p><strong>分发</strong>:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;export&#x2F;servers&#x2F;apache-zookeeper-3.5.7-bin&#x2F; hadoop02:&#x2F;export&#x2F;servers&#x2F; scp -r &#x2F;export&#x2F;servers&#x2F;apache-zookeeper-3.5.7-bin&#x2F; hadoop03:&#x2F;export&#x2F;servers&#x2F; scp -r &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F; hadoop02:&#x2F;export&#x2F;data&#x2F;</span><br><span class="line">scp -r &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F; hadoop03:&#x2F;export&#x2F;data&#x2F; scp &#x2F;etc&#x2F;profile hadoop02:&#x2F;etc&#x2F;profile</span><br><span class="line">scp &#x2F;etc&#x2F;profile hadoop03:&#x2F;etc&#x2F;profile source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<p><strong>启动和关闭</strong>:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkServer.sh start </span><br><span class="line">zkServer.sh status</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure>

<p><strong>zkS.sh</strong>:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$#</span>==0))</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hadoop01 hadoop02 hadoop03</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> zk <span class="keyword">in</span> <span class="variable">$i</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">"source /etc/profile &amp;&amp; /export/servers/apache-zookeeper-3.5.7-</span></span><br><span class="line"><span class="string">bin/bin/</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/2020032405.png" alt="image-20201204171542304"></p>
<p><img src="/images/2020032406.png" alt="image-20201204171542304"></p>
<p><img src="/images/2020032407.png" alt="image-20201204171542304"></p>
<h2 id="Zookeeper的Shell操作"><a href="#Zookeeper的Shell操作" class="headerlink" title="Zookeeper的Shell操作"></a>Zookeeper的Shell操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th><strong>命令基本语法</strong></th>
<th><strong>功能描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>help</td>
<td>显示所有操作命令</td>
</tr>
<tr>
<td>ls path [watch]</td>
<td>使用 ls 命令来查看当前znode中所包含的内容</td>
</tr>
<tr>
<td>ls2 path [watch]</td>
<td>查看当前节点数据并能看到更新次数等数据</td>
</tr>
<tr>
<td>create</td>
<td>普通创建 -s 含有序列 -e 临时（重启或者超时消失）</td>
</tr>
<tr>
<td>get path [watch]</td>
<td>获得节点的值</td>
</tr>
<tr>
<td>set</td>
<td>设置节点的具体值</td>
</tr>
<tr>
<td>stat</td>
<td>查看节点状态</td>
</tr>
<tr>
<td>delete</td>
<td>删除节点</td>
</tr>
<tr>
<td>rmr</td>
<td>递归删除节点</td>
</tr>
</tbody></table>
<p>应用场景，HA、kafaka、HBase</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动客户端</span><br><span class="line">[root@hadoop01 ~]# zkCli.sh</span><br><span class="line">#显示所有操作命令</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] help</span><br><span class="line">#查看当前节点详细数据</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls -s &#x2F;</span><br><span class="line">#分别创建2个普通节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] create &#x2F;test test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] create &#x2F;test&#x2F;more more</span><br><span class="line">#获得节点的值</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get &#x2F;test</span><br><span class="line">#创建短暂节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] create -e &#x2F;test&#x2F;new new</span><br><span class="line">#在当前客户端是能查看到的</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls2 &#x2F;test</span><br><span class="line">#退出后重新进入查看</span><br><span class="line">#创建带序号的节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] create -s &#x2F;test&#x2F;one one</span><br><span class="line">#创建一个普通的节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create &#x2F;test&#x2F;two two</span><br><span class="line">#修改节点数据值</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] set &#x2F;test&#x2F;two three [zk: localhost:2181(CONNECTED) 4] get &#x2F;test&#x2F;two</span><br><span class="line">#在hadoop02主机上注册监听&#x2F;test节点数据变化</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] get -w &#x2F;test</span><br><span class="line">#在hadoop01主机上修改&#x2F;test节点的数据</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] set &#x2F;test tttt</span><br><span class="line">#观察hadoop02主机收到数据变化的监听[zk: localhost:2181(CONNECTED) 2] WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:&#x2F;test</span><br><span class="line">#在hadoop02主机上注册监听&#x2F;test节点的子节点变化</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] ls -w -s &#x2F;test</span><br><span class="line">#在hadoop01主机&#x2F;test节点上创建子节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] create &#x2F;test&#x2F;one one</span><br><span class="line">#观察hadoop02主机收到子节点变化的监听[zk: localhost:2181(CONNECTED) 6] WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeChildrenChanged path:&#x2F;test</span><br><span class="line">#删除节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] delete &#x2F;test&#x2F;one</span><br><span class="line">#递归删除节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] deleteall &#x2F;test</span><br></pre></td></tr></table></figure>



<h2 id="Zookeeper的API应用"><a href="#Zookeeper的API应用" class="headerlink" title="Zookeeper的API应用"></a>Zookeeper的API应用</h2><p>pom.xml中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com.test.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat; <span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before; <span class="keyword">import</span> org.junit.After;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	ZKC Tester.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*	<span class="doctag">@author</span> &lt;Authors name&gt;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;3月 3, 2020&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">*	<span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zookeeper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"hadoop01:2181,hadoop02:2181,hadoop03:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">        zookeeper =<span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123; </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">    		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 收到事件通知后的回调函数（用户的业务逻辑）</span></span><br><span class="line">                System.out.println(watchedEvent.getType() + <span class="string">"--"</span> + watchedEvent.getPath());</span><br><span class="line">                <span class="comment">// 再次启动监听</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                	zookeeper.getChildren(<span class="string">"/"</span>,<span class="keyword">true</span>);</span><br><span class="line">    			&#125; <span class="keyword">catch</span> (KeeperException e) &#123; e.printStackTrace();</span><br><span class="line">   				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();</span><br><span class="line">    				&#125;</span><br><span class="line">    			&#125;</span><br><span class="line">   		 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    	<span class="comment">// 参数1：要创建的节点的路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点的类型</span></span><br><span class="line">   	 	zookeeper.create(<span class="string">"/test"</span>,<span class="string">"test"</span>.getBytes(), 				ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>	<span class="keyword">void</span> <span class="title">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123; </span><br><span class="line">        List&lt;String&gt; children = zookeeper.getChildren(<span class="string">"/hadoop-ha"</span>,<span class="keyword">true</span>); <span class="keyword">for</span>(String child:children)&#123;</span><br><span class="line">    System.out.println(child);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断znode是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	    Stat stat = zookeeper.exists(<span class="string">"/idea"</span>, <span class="keyword">false</span>);</span><br><span class="line">	    System.out.println(stat == <span class="keyword">null</span> ? <span class="string">"not exist"</span> : <span class="string">"exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>Zookeeper集群</tag>
      </tags>
  </entry>
  <entry>
    <title>git常见错误</title>
    <url>/2019/07/15/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>记录git常见错误</p>
<a id="more"></a>

<p>一般是没有初始化git本地版本管理仓库，所以无法执行git命令 。</p>
<p>操作之前执行以下命令行: <code>git init</code><br>然后执行一下<code>git status</code>查看状态信息</p>
<p>1.git Could not read from remote repository</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:liuurick&#x2F;BlogBackup.git</span><br><span class="line">git remote -v</span><br><span class="line">git bash输出</span><br></pre></td></tr></table></figure>



<p>2.error: failed to push some refs to xxx</p>
<blockquote>
<p>! [rejected]        master -&gt; master (fetch first)<br>error: failed to push some refs to ‘git@github.com:liuurick/BlogBackup.git’<br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p>
</blockquote>
<p>查了几种解决方式都不太管用，最后发现是由于github中的README.md文件不在本地代码目录中</p>
<p>检查了一下果然如此！<br>这时候可以通过 <code>git pull --rebase origin master</code> 把README.md文件克隆到本地库。</p>
<p>git pull –rebase origin master<br>最后提交：<code>git push origin master</code></p>
<p><strong>下次遇到这样的问题，记得检查.gitignore和README.md文件</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常见错误</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令操作笔记</title>
    <url>/2019/12/25/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>git官网教程：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
<p>codesheep：<a href="https://mp.weixin.qq.com/s/DQVVYOWdOPuRsy3m0fg6Xg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DQVVYOWdOPuRsy3m0fg6Xg</a></p>
<p>图解Git：<a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">https://marklodato.github.io/visual-git-guide/index-zh-cn.html</a></p>
<p>Pro Git：<a href="https://bingohuang.gitbooks.io/progit2/content/" target="_blank" rel="noopener">https://bingohuang.gitbooks.io/progit2/content/</a></p>
</blockquote>
<p><img src="/images/2018062701.png" alt="image"></p>
<p>创建一个目录用于存放仓库，或在有内容的目录下操作。</p>
<p>然后切换到此目录下初始化：<code>git --bare init</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status 查看仓库状态</span><br><span class="line">branches 分支目录</span><br><span class="line">config 定义项目特有的配置选项</span><br><span class="line">description 仅供git web使用</span><br><span class="line">HEAD 当前分支</span><br><span class="line">hooks 包含git钩子文件</span><br><span class="line">info 包含一个全局排除文件</span><br><span class="line">objects 存放所有数据内容，有info、pack两个子文件夹</span><br><span class="line">refs 存放只想数据（分支）的提交对象的指针</span><br><span class="line">index 保存暂存区信息，在执行git 初始化的时候这个文件还不存在,git add 后生成</span><br><span class="line">工作目录 暂存区 本地仓库 远程仓库</span><br><span class="line">git add git commit git push</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add FILE 添加file到暂存区</span><br><span class="line">git add . 添加目录中所有改动过的文件到暂存区</span><br><span class="line">git rm --cached FILE 将暂存区的FILE 撤回到工作区</span><br><span class="line">git rm -f FILE 同时删除暂存区、工作区的FILE（即直接删除暂存区的文件）</span><br><span class="line">git commit -m "add newfile a" 添加到本地仓库（相当于做了一次快照，可根据引号中内容恢复）</span><br><span class="line">【真正意义上的通过版本控制系统管理文件：工作目录必须有代码文件，通过git add file添加到暂存区，通过git commit -m "输入的备注"添加到本地仓库】</span><br><span class="line">修改文件名两种方式：</span><br><span class="line">1.mv a a.txt 即先删除a 然后生成了a.txt，所以改名不用这个 （删除本地文件）</span><br><span class="line">git rm --cached a</span><br><span class="line">git add a.txt 然后git status 即可看到这两条命令即是rename （删除暂存区文件）</span><br><span class="line">git commit -m "modified a a.txt" a改名a.txt并提交</span><br><span class="line">2.git mv old new 直接更改文件名，改完直接git commit提交即可</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff 比对工作目录与缓存区有什么不同</span><br><span class="line">git diff --cached 比对暂存区与本地仓库有什么不同</span><br><span class="line"></span><br><span class="line">ls检查下当前目录下是否有仓库信息，</span><br><span class="line">git remote add origin git@10.0.0.227:web/control.git 创建远程仓库origin</span><br><span class="line">git remote 查看当前远程仓库的名称</span><br><span class="line">git remote remove origin 删除远程仓库origin</span><br></pre></td></tr></table></figure>

<h1 id="日志命令"><a href="#日志命令" class="headerlink" title="日志命令"></a>日志命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log 查看历史提交信息</span><br><span class="line">git log --online 查看历史提交信息的哈希值</span><br><span class="line">git log --online --decorate 历史提交信息并查看当前指针位置</span><br><span class="line">git log -p 展示具体变化内容</span><br><span class="line">git log -1 展示一条提交信息的内容</span><br><span class="line">git log -1 -p 展示详细具体的最后一条变更的信息内容</span><br></pre></td></tr></table></figure>

<h1 id="初始化命令"><a href="#初始化命令" class="headerlink" title="初始化命令"></a>初始化命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard xx 恢复到从前的位置</span><br><span class="line">git reflog 查看所有历史提交信息，包括回复到指定位置之前的</span><br><span class="line">git reset --hard xxx 前后都能回滚 来回滚</span><br></pre></td></tr></table></figure>

<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch 查看分支</span><br><span class="line">git branch fenzhi 创建分支fenzhi</span><br><span class="line">git checkout fenzhi 切换分支fenzhi</span><br><span class="line">git checkout -b testing 创建并切换到分支testing</span><br><span class="line">删除分支要先切换到master然后删除创建的testing ,删除也会给自动创建一个快照，可恢复</span><br><span class="line">git branch -d testing 删除分支testing</span><br><span class="line">git merge testing 合并分支</span><br><span class="line">冲突时，直接编辑冲突的文件，例如：vi aaa 然后去掉大于号、小于号、等于号，然后选择保留的代码，可都保留。</span><br></pre></td></tr></table></figure>

<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0 -m "hehe" 当前状态打标签为V1.0</span><br><span class="line">git tag -a V1.0 haxizhi -m "hehe" 把某个哈希状态的状态打标签</span><br><span class="line">git show v1.0 查看某个标签的信息</span><br><span class="line">git reset --hard v2.0 回滚数据到V2.0</span><br><span class="line">git tag -d v2.0 删除V2.0标签的数据</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常见命令</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客高级操作</title>
    <url>/2018/12/25/hexo%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>hexo next高级操作<a href="https://mp.weixin.qq.com/s/U7KPp3HsQQCCQz3z8o5q-Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/U7KPp3HsQQCCQz3z8o5q-Q</a></p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>人身保险购买指南</title>
    <url>/2021/01/29/%E4%BA%BA%E8%BA%AB%E4%BF%9D%E9%99%A9%E8%B4%AD%E4%B9%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>人身险：</p>
<ul>
<li>医疗险</li>
<li>重疾险</li>
<li>防癌险</li>
<li>意外险</li>
<li>寿险</li>
</ul>
<a id="more"></a>

<blockquote>
<p><a href="https://post.smzdm.com/p/752772/" target="_blank" rel="noopener">https://post.smzdm.com/p/752772/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>保险</category>
      </categories>
      <tags>
        <tag>保险</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装VMware Tools</title>
    <url>/2020/08/03/ubuntu%E5%AE%89%E8%A3%85VMware%20Tools/</url>
    <content><![CDATA[<p>VMware Tools罕见问题的记录</p>
<a id="more"></a>

<p>VMware的安装非常简单，就不详细阐述了，这里主要是记录一个罕见的问题。</p>
<blockquote>
<p>报错：在解压wmware tools时ubuntu报出没有足够的空间提取的错误</p>
</blockquote>
<p>这里需要通过归档管理器打开文件<br><img src="/images/2020080301.png" alt="解压"><br>然后在解压安装即可<br><img src="/images/2020080302.png" alt="解压"></p>
<p>解压完成之后即可运行安装文件安装wmware tools</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>人民日报给90后的理财计划</title>
    <url>/2020/10/25/%E4%BA%BA%E6%B0%91%E6%97%A5%E6%8A%A5%E7%BB%9990%E5%90%8E%E7%9A%84%E7%90%86%E8%B4%A2%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>人民日报给90后的理财计划</p>
<a id="more"></a>

<h3 id="1-学会记账"><a href="#1-学会记账" class="headerlink" title="1.学会记账"></a>1.学会记账</h3><p><img src="/images/2020102501.png" alt="image"></p>
<h3 id="2-控制消费"><a href="#2-控制消费" class="headerlink" title="2.控制消费"></a>2.控制消费</h3><p><img src="/images/2020102502.png" alt="image"></p>
<h3 id="3-选择投资项目"><a href="#3-选择投资项目" class="headerlink" title="3.选择投资项目"></a>3.选择投资项目</h3><p><img src="/images/2020102503.png" alt="image"></p>
<h3 id="4-“梦想”消费单"><a href="#4-“梦想”消费单" class="headerlink" title="4.“梦想”消费单"></a>4.“梦想”消费单</h3><p><img src="/images/2020102504.png" alt="image"></p>
<h3 id="5-投资自己"><a href="#5-投资自己" class="headerlink" title="5.投资自己"></a>5.投资自己</h3><p><img src="/images/2020102505.png" alt="image"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><img src="/images/2020102506.png" alt="image-20201227160018479"></p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表利器</title>
    <url>/2021/01/24/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%88%A9%E5%99%A8/</url>
    <content><![CDATA[<p>ShardingSphere</p>
<ul>
<li>ShardingSphere-JDBC</li>
<li>ShardingSphere-Proxy</li>
<li>ShardingSphere-Sidecar（TODO）</li>
</ul>
<a id="more"></a>

<h1 id="1-分库分表概述"><a href="#1-分库分表概述" class="headerlink" title="1 分库分表概述"></a>1 分库分表概述</h1><blockquote>
<p>阿里巴巴开发手册：单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p>
<p><strong>说明</strong>：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
</blockquote>
<h2 id="1-1-什么是分库分表"><a href="#1-1-什么是分库分表" class="headerlink" title="1.1 什么是分库分表"></a>1.1 什么是分库分表</h2><p>​        数据库数据量不可控的，随着时间和业务发展，造成表里面数据越来越多，如果再去对数据库表 curd 操作时候，造成性能问题。</p>
<p>对于问题的解决有两种方案：</p>
<ul>
<li>方案 1：提升硬件条件（成本过高）</li>
<li>方案 2：分库分表</li>
</ul>
<h2 id="1-2-分库分表的方式"><a href="#1-2-分库分表的方式" class="headerlink" title="1.2 分库分表的方式"></a>1.2 分库分表的方式</h2><h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分有垂直分表和垂直分库</p>
<p>对于<strong>垂直分表</strong>：</p>
<p>操作数据库中某张表，把这张表中一部分字段数据存到一张新表里面，再把这张表另一部分字段数据存到另外一张表里面。</p>
<p><img src="/images/2021012401.png" alt="image-20210124203050289"></p>
<p>对于<strong>垂直分库</strong>：把单一数据库按照业务进行划分，专库专表。</p>
<p><img src="/images/2021012402.png" alt="image-20210124203110120"></p>
<h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>水平切分有水平分表和水平分库</p>
<p>对于<strong>水平分库</strong>：创建相同结构的数据库</p>
<p>数据的插入可以根据<code>id</code>来插入。</p>
<p><img src="/images/2021012403.png" alt="image-20210124204155143"></p>
<p>对于<strong>水平分表</strong>：可以把一个表的数据(按数据行)分到多个同一个数据库的多张表中，每个表只有这个表的部分数据，这样做能小幅提升性能，它仅仅作为水平分库的一个补充优化。</p>
<p><img src="/images/2021012404.png" alt="image-20210128115212666"></p>
<p><strong>总结</strong>：</p>
<ul>
<li>垂直拆分，水平复制</li>
<li>一般来说，在系统设计阶段就应该根据业务耦合松紧来确定垂直分库，垂直分表方案，在数据量及访问压力不是特别大的情况，首先考虑缓存、读写分离、索引技术等方案。若数据量极大，且持续增长，再考虑水平分库水平分表方案。</li>
</ul>
<h2 id="1-3-分库分表应用和问题"><a href="#1-3-分库分表应用和问题" class="headerlink" title="1.3 分库分表应用和问题"></a>1.3 分库分表应用和问题</h2><p>1.应用</p>
<ul>
<li><p>在数据库设计时候考虑垂直分库和垂直分表</p>
</li>
<li><p>随着数据库数据量增加，不要马上考虑做水平切分，首先考虑缓存处理，读写分离，使用索引等等方式，如果这些方式不能根本解决问题了，再考虑做水平分库和水平分表</p>
</li>
</ul>
<p>2.分库分表问题</p>
<ul>
<li><p>跨节点连接查询问题（分页、排序）</p>
</li>
<li><p>多数据源管理问题</p>
</li>
</ul>
<h1 id="2-ShardingSphere概述"><a href="#2-ShardingSphere概述" class="headerlink" title="2 ShardingSphere概述"></a>2 ShardingSphere概述</h1><p>​        Apache ShardingSphere 是一款<strong>关系型数据库中间件</strong>，旨在充分合理地在<strong>分布式</strong>的场景下利用关系型数据库的计算和存储能力，而<strong>并非</strong>实现一个全新的关系型数据库。</p>
<p>​        ShardingSphere 有三个产品：ShardingSphere-JDBC，ShardingSphere-Proxy和ShardingSphere-Sidecar（TODO）</p>
<blockquote>
<p>官方文档：<a href="https://shardingsphere.apache.org/document/current/cn/overview/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/overview/</a></p>
</blockquote>
<h1 id="3-ShardingSphere入门"><a href="#3-ShardingSphere入门" class="headerlink" title="3 ShardingSphere入门"></a>3 ShardingSphere入门</h1><h2 id="3-1-sharding-jdbc"><a href="#3-1-sharding-jdbc" class="headerlink" title="3.1 sharding-jdbc"></a>3.1 sharding-jdbc</h2><h3 id="3-1-1-概述"><a href="#3-1-1-概述" class="headerlink" title="3.1.1 概述"></a>3.1.1 概述</h3><p>​        一个轻量级的Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p>
<p><strong>主要功能</strong>：数据分片和读写分离</p>
<p><strong>主要目的</strong>：简化对分库分表之后数据相关操作</p>
<h3 id="3-1-2-环境搭建"><a href="#3-1-2-环境搭建" class="headerlink" title="3.1.2 环境搭建"></a>3.1.2 环境搭建</h3><p>（1）SpringBoot+MyBatisPlus+Sharding-JDBC+Druid连接池 搭建环境</p>
<p>（2）创建SpringBoot项目</p>
<p>（3）引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liuurick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingjdbcdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>shardingjdbcdemo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">mybatis-plus-boot-starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sharding-jdbc.version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">sharding-jdbc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql-connector.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sharding-jdbc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（4）建表</p>
<p>​    按照<strong>水平分表</strong>的方式，创建数据库和数据库表</p>
<ol>
<li><p>创建数据库 course_db</p>
</li>
<li><p>在数据库创建两张表 course_1 和 course_2</p>
</li>
<li><p>约定规则：如果添加课程 id 是偶数把数据添加 course_1，如果奇数添加到 course_2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> course_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> course_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_1 (</span><br><span class="line">    cid <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span> ,</span><br><span class="line">    cname <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    user_id <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    <span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_2 (</span><br><span class="line">    cid <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span> ,</span><br><span class="line">    cname <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    user_id <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> ,</span><br><span class="line">    <span class="keyword">status</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>（5）编写代码实现对分库分表后数据的操作</p>
<h3 id="3-1-3-Sharding-JDBC实现水平分表"><a href="#3-1-3-Sharding-JDBC实现水平分表" class="headerlink" title="3.1.3  Sharding-JDBC实现水平分表"></a>3.1.3  <strong>Sharding-JDBC</strong>实现水平分表</h3><blockquote>
<p>官方文档：<a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/usage/sharding/spring-boot-starter/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/usage/sharding/spring-boot-starter/</a></p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sharding-jdbc 水平分表策略</span></span><br><span class="line"><span class="comment"># 配置数据源，给数据源起别名</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">m1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个实体类对应两张表，覆盖</span></span><br><span class="line"><span class="meta">spring.main.allow-bean-definition-overriding</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据源的具体内容，包含连接池，驱动，地址，用户名，密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.url</span>=<span class="string">jdbc:mysql://localhost:3306/course_db</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定course表分布的情况，配置表在哪个数据库里，表的名称都是什么 m1.course_1,m1.course_2</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.actual-data-nodes</span>=<span class="string">m1.course_$-&gt;&#123;1..2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.key-generator.column</span>=<span class="string">cid</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.key-generator.type</span>=<span class="string">SNOWFLAKE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column</span>=<span class="string">cid</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression</span>=<span class="string">course_$-&gt;&#123;cid % 2 + 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 sql 输出日志</span></span><br><span class="line"><span class="meta">spring.shardingsphere.props.sql.show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-Sharding-JDBC-实现水平分库"><a href="#3-1-4-Sharding-JDBC-实现水平分库" class="headerlink" title="3.1.4 Sharding-JDBC 实现水平分库"></a>3.1.4 Sharding-JDBC 实现水平分库</h3><p>1.需求分析</p>
<p><img src="/images/2021012405.png" alt="image-20210125122459274"></p>
<p>2.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> edu_db_1;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> edu_db_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> edu_db_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_1 (</span><br><span class="line">   <span class="string">`cid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span>,</span><br><span class="line">   <span class="string">`cname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_2 (</span><br><span class="line">   <span class="string">`cid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span>,</span><br><span class="line">   <span class="string">`cname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> edu_db_2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_1 (</span><br><span class="line">   <span class="string">`cid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span>,</span><br><span class="line">   <span class="string">`cname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course_2 (</span><br><span class="line">   <span class="string">`cid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) primary <span class="keyword">key</span>,</span><br><span class="line">   <span class="string">`cname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>3.在 SpringBoot 配置文件配置数据库分片规则</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sharding-jdbc 水平分库分表策略</span></span><br><span class="line"><span class="comment"># 配置数据源，给数据源起别名</span></span><br><span class="line"><span class="comment"># 水平分库需要配置多个数据库</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">m1,m2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个实体类对应两张表，覆盖</span></span><br><span class="line"><span class="meta">spring.main.allow-bean-definition-overriding</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.url</span>=<span class="string">jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置第二个数据源的具体内容，包含连接池，驱动，地址，用户名，密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.url</span>=<span class="string">jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据库分布的情况和数据表分布的情况</span></span><br><span class="line"><span class="comment"># m1 m2   course_1 course_2</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.actual-data-nodes</span>=<span class="string">m$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.key-generator.column</span>=<span class="string">cid</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.key-generator.type</span>=<span class="string">SNOWFLAKE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分库策略    约定 user_id 值偶数添加到 m1 库，如果 user_id 是奇数添加到 m2 库</span></span><br><span class="line"><span class="comment"># 默认写法（所有的表的user_id）</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$-&gt;&#123;user_id % 2 + 1&#125;</span></span><br><span class="line"><span class="comment"># 指定只有course表的user_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column</span>=<span class="string">user_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression</span>=<span class="string">m$-&gt;&#123;user_id % 2 + 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column</span>=<span class="string">cid</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression</span>=<span class="string">course_$-&gt;&#123;cid % 2 + 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 sql 输出日志</span></span><br><span class="line"><span class="meta">spring.shardingsphere.props.sql.show</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-5-Sharding-JDBC-实现垂直分库"><a href="#3-1-5-Sharding-JDBC-实现垂直分库" class="headerlink" title="3.1.5 Sharding-JDBC 实现垂直分库"></a>3.1.5 Sharding-JDBC 实现垂直分库</h3><p>1.需求分析</p>
<p><img src="/images/2021012406.png" alt="image-20210125124001781"></p>
<p>2.sql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database user_db;</span><br><span class="line"></span><br><span class="line">use user_db;</span><br><span class="line"></span><br><span class="line">create table t_user(</span><br><span class="line">   &#96;user_id&#96; bigint(20) primary key,</span><br><span class="line">   &#96;username&#96; varchar(100) not null,</span><br><span class="line">   &#96;status&#96; varchar(50) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>3.配置垂直分库策略</p>
<p>在 application.properties 进行配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shardingjdbc 垂直分库策略</span></span><br><span class="line"><span class="comment"># 配置数据源，给数据源起名称,</span></span><br><span class="line"><span class="comment"># 水平分库，配置两个数据源</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.names</span>=<span class="string">m1,m2,m0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个实体类对应两张表，覆盖</span></span><br><span class="line"><span class="meta">spring.main.allow-bean-definition-overriding</span>=<span class="string">true #配置第一个数据源具体内容，包含连接池，驱动，地址，用户名和密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.url</span>=<span class="string">jdbc:mysql://localhost:3306/edu_db_1?s</span></span><br><span class="line"><span class="attr">erverTimezone</span>=<span class="string">GMT%2B8 </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m1.password</span>=<span class="string">root #配置第二个数据源具体内容，包含连接池，驱动，地址，用户名和密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.url</span>=<span class="string">jdbc:mysql://localhost:3306/edu_db_2?s</span></span><br><span class="line"><span class="attr">erverTimezone</span>=<span class="string">GMT%2B8 </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m2.password</span>=<span class="string">root </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置第三个数据源具体内容，包含连接池，驱动，地址，用户名和密码</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m0.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m0.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m0.url</span>=<span class="string">jdbc:mysql://localhost:3306/user_db?se</span></span><br><span class="line"><span class="attr">rverTimezone</span>=<span class="string">GMT%2B8 </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m0.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.m0.password</span>=<span class="string">root </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 user_db 数据库里面 t_user 专库专表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.actual-data-nodes</span>=<span class="string">m$-&gt;&#123;0&#125;.t_user </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 course 表里面主键 cid 生成策略 SNOWFLAKE</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.key-generator.column</span>=<span class="string">user_id </span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.key-generator.type</span>=<span class="string">SNOWFLAKE </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定表分片策略 约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到</span></span><br><span class="line"><span class="attr">course_2</span> <span class="string">表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.shardingcolumn</span>=<span class="string">user_id </span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithmexpression</span>=<span class="string">t_user</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-6-Sharding-JDBC-公共表"><a href="#3-1-6-Sharding-JDBC-公共表" class="headerlink" title="3.1.6 Sharding-JDBC 公共表"></a>3.1.6 Sharding-JDBC 公共表</h3><p>1.公共表</p>
<p>（1）存储固定数据的表，表数据很少发生变化，查询时候经常进行关联</p>
<p>（2）在每个数据库中创建出相同结构公共表</p>
<p>2.在多个数据库都创建相同结构公共表</p>
<p><img src="/images/2021012407.png" alt="image-20210125124645278"></p>
<p>3.在项目配置文件 application.properties 进行公共表配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置公共表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.broadcast-tables</span>=<span class="string">t_udict </span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_udict.key-generator.column</span>=<span class="string">dictid </span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_udict.key-generator.type</span>=<span class="string">SNOWFLAKE</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-7-Sharding-JDBC-实现读写分离"><a href="#3-1-7-Sharding-JDBC-实现读写分离" class="headerlink" title="3.1.7 Sharding-JDBC 实现读写分离"></a>3.1.7 Sharding-JDBC 实现读写分离</h3><p>在业务场景中，数据库的读操作远远大于增，删，改操作，此时CRUD操作的分离是非常有必要的。</p>
<p><strong>主从复制</strong>：当主服务器有写入（insert/update/delete）语句时候，从服务器自动获取。</p>
<p><strong>读写分离</strong>：insert/update/delete语句操作一台服务器，select操作另一台服务器。</p>
<p>Sharding-JDBC 通过 sql 语句语义分析，实现读写分离过程，不会做数据同步。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_db 从服务器</span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.s0.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.s0.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.s0.url</span>=<span class="string">jdbc:mysql://localhost:3307/user_db?se</span></span><br><span class="line"><span class="attr">rverTimezone</span>=<span class="string">GMT%2B8 </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.s0.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.shardingsphere.datasource.s0.password</span>=<span class="string">root </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库从库逻辑数据源定义 ds0 为 user_db</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-sourcename</span>=<span class="string">m0 </span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-sourcenames</span>=<span class="string">s0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 user_db 数据库里面 t_user 专库专表</span></span><br><span class="line"><span class="comment">#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=m$-&gt;&#123;0&#125;.t_user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t_user 分表策略，固定分配至 ds0 的 t_user 真实表</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_user.actual-data-nodes</span>=<span class="string">ds0.t_user</span></span><br></pre></td></tr></table></figure>



<h2 id="3-2-sharding-proxy"><a href="#3-2-sharding-proxy" class="headerlink" title="3.2 sharding-proxy"></a>3.2 sharding-proxy</h2><p>3.2.1 概述</p>
<ul>
<li><p>sharding-proxy<strong>定位为透明的数据库代理端</strong></p>
</li>
<li><p><strong>Sharding-Proxy</strong> <strong>独立应用，需要安装服务，进行分库分表或者读写分离配置，启动</strong></p>
<p><strong>使用</strong></p>
</li>
</ul>
<blockquote>
<p>官方文档：<a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/</a></p>
</blockquote>
<p>3.2.2 安装与配置</p>
<blockquote>
<p><a href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/</a></p>
</blockquote>
<h2 id="3-3-sharding-sidercar"><a href="#3-3-sharding-sidercar" class="headerlink" title="3.3 sharding-sidercar"></a>3.3 sharding-sidercar</h2><p>ShardingSphere-Sidecar 是 ShardingSphere 的第三个产品，目前仍然在<code>规划中</code>。</p>
<p>ShardingSphere-Sidecar 的优势在于对 Kubernetes 和 Mesos 的云原生支持。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>分库分表</category>
      </categories>
      <tags>
        <tag>ShardingSphere</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s学习笔记</title>
    <url>/2021/01/11/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<p>1.k8s概念和架构</p>
<p>2.搭建k8s集群</p>
<ul>
<li>基于客户端工具kubeadm</li>
<li>基于二进制包方式</li>
</ul>
<p>3.k8s核心概念</p>
<ul>
<li>Pod</li>
<li>控制器 controller</li>
<li>Service</li>
<li>调度器 Ingress</li>
<li>安全机制 RABC</li>
<li>包管理工具 Helm</li>
<li>持久存储</li>
</ul>
<p>4.搭建集群监控平台系统</p>
<p>5.从零开始搭建高可用k8s集群</p>
<p>6.在集群环境部署项目</p>
<blockquote>
<p>Kubernetes官方文档：<a href="https://kubernetes.io/zh/docs/home/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/home/</a></p>
</blockquote>
<h1 id="1-k8s概述"><a href="#1-k8s概述" class="headerlink" title="1 k8s概述"></a>1 k8s概述</h1><p>特点：</p>
<p>轻量级：消耗资源小</p>
<p>开源</p>
<p>弹性伸缩</p>
<p>负载均衡</p>
<p>1.1 k8s概述和特性</p>
<p>1.2 k8s架构组件</p>
<p>1.3 k8s核心概念</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>分布式/微服务</category>
        <category>虚拟化/容器化</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式详解</title>
    <url>/2021/01/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><blockquote>
<p>定义：保证一个类仅有一个实例，并提供一个全局访问点</p>
<p>类型：创建型</p>
</blockquote>
<h1 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2 适用场景"></a>2 适用场景</h1><p>想确保任何情况下都绝对只有一个实例</p>
<h1 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3 优缺点"></a>3 优缺点</h1><p>优点：</p>
<ul>
<li><p>在内存中只有一个实例，减少了内存开销</p>
</li>
<li><p>可以避免对资源的多重占用</p>
</li>
<li><p>设计全局访问点，严格控制访问</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>没有接口，扩展困难</li>
</ul>
<p>单例-重点</p>
<p>私有构造器</p>
<p>线程安全</p>
<p>延迟加载</p>
<p>序列化与反序列化安全</p>
<p>反射</p>
]]></content>
      <categories>
        <category>软件工程</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>实体类的4种类型</title>
    <url>/2020/10/31/%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%844%E7%A7%8D%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>实体类的4种类型总结</p>
<a id="more"></a>

<p>领域模型中的实体类可细分为4种类型：<code>VO、DTO、DO、PO</code></p>
<p>PO（Persistment Object）：持久化对象，表示持久层的数据结构；</p>
<p>DO（Domain Object）：领域对象，即业务实体对象；</p>
<p>DTO（Data Transfer Object）：数据传输对象，原来的目的是为EJB的分布式应用提供粗粒度的数据实体，以降低分布式调用的次数，提高分布式调用的性能，后来一般泛指用于展示层与服务层之间的数据传输对象，因此可以将DTO看成一个组合版的DO；</p>
<p>VO（View Object）：视图对象，用于展示层视图状态对应的对象。</p>
<p>从分层角度来说，PO、DO/DTO、VO分别属于持久层、服务层和展示层。对于简单模块来说，有时PO、DO和VO并没有什么区别，这时就没有必要定义DO和VO了，直接服用PO即可。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>Domain Object</tag>
      </tags>
  </entry>
  <entry>
    <title>打新股和打新债</title>
    <url>/2021/01/24/%E6%89%93%E6%96%B0%E8%82%A1%E5%92%8C%E6%89%93%E6%96%B0%E5%80%BA/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="打新股"><a href="#打新股" class="headerlink" title="打新股"></a>打新股</h1><blockquote>
<p>打新股是什么：<a href="https://zhuanlan.zhihu.com/p/113203500" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/113203500</a></p>
<p>如何打新股：<a href="https://www.zhihu.com/question/28207862" target="_blank" rel="noopener">https://www.zhihu.com/question/28207862</a></p>
</blockquote>
<h1 id="打新债"><a href="#打新债" class="headerlink" title="打新债"></a>打新债</h1><blockquote>
<p>如何打新债：<a href="https://zhuanlan.zhihu.com/p/67077214" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/67077214</a></p>
</blockquote>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>打新股和打新债一样具备风险，投资一定要用自己的闲钱</p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>打新股</tag>
        <tag>打新债</tag>
      </tags>
  </entry>
  <entry>
    <title>快速构建Java Web项目的开发环境</title>
    <url>/2020/11/20/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAJava-Web%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Idea通过maven快速构建项目</p>
<a id="more"></a>

<h1 id="1-搭建CRM项目的开发环境"><a href="#1-搭建CRM项目的开发环境" class="headerlink" title="1.搭建CRM项目的开发环境"></a>1.搭建CRM项目的开发环境</h1><ul>
<li>设置字体</li>
<li>设置工作区的字符集为utf-8</li>
<li>设置basePath变量及base标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" +   <span class="attr">request.getServerPort</span>() + <span class="attr">request.getContextPath</span>() + "/";</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="2-创建Maven项目前的准备工作"><a href="#2-创建Maven项目前的准备工作" class="headerlink" title="2.创建Maven项目前的准备工作"></a>2.创建Maven项目前的准备工作</h1><p>使用settings引入本地仓库<img src="/images/2020112001.png" alt="image-20201120175318348"></p>
<p>打开settings.xml设置本地仓库位置</p>
<p><img src="/images/2020112002.png" alt=""></p>
<p>创建Maven web项目</p>
<p><img src="/images/2020112003.png" alt="image-20201120175508091"></p>
<p><img src="/images/2020112004.png" alt="image-20201120175542687"></p>
<p>新创建的Maven项目，目录结构如下：</p>
<p><img src="/images/2020112005.png" alt="image-20201120175616811"></p>
<p>将pom.xml中没有用的信息去除掉</p>
<p><strong>在main文件夹下建立java文件夹和resources文件夹</strong></p>
<p><strong>与main文件夹平级创建一个test文件夹</strong></p>
<p><strong>test文件夹下创建java文件夹和resources文件夹</strong></p>
<p><img src="/images/2020112006.png" alt="image-20201120175810912"></p>
<p><strong>注意：为文件夹赋予功能（颜色）后，文件夹才会生效</strong></p>
<p>将我们自己的web.xml模板导入</p>
<p>通过pom.xml导入我们需要的jar包</p>
<p>在pom.xml中加入构建资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击左侧Maven Projects，点击刷新</p>
<p><img src="/images/2020112007.png" alt="image-20201120180057366"></p>
<p>在resource路径下引入开发用的配置文件和属性文件</p>
<ul>
<li>jdbc.properties（修改数据库名）</li>
</ul>
<ul>
<li><p>log4j.properties</p>
</li>
<li><p>mybatis-config.xml</p>
</li>
<li><p>SqlMapper.xml（建立后台包结构后加入该文件）</p>
</li>
</ul>
<p>项目文件结构如下：</p>
<p><img src="/images/2020112008.png" alt="image-20201120180226721"></p>
<h1 id="3-创建一个数据库"><a href="#3-创建一个数据库" class="headerlink" title="3.创建一个数据库"></a>3.创建一个数据库</h1><p><img src="/images/2020112009.png" alt="image-20201120180410393"></p>
<ul>
<li><p>将项目原型拷贝到webapp目录下</p>
</li>
<li><p>启动Tomcat服务器，测试</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务的理解</title>
    <url>/2021/01/08/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>微服务架构是当下流行的软件架构风格。</p>
<blockquote>
<p>分布式定义：旨在支持应用程序和服务的开发，可以利用物理架构由<strong>多个自治的处理元素</strong>，<strong>不共享主内存</strong>，但<strong>通过</strong>网络发送<strong>消息</strong>合作。           —-Leslie Lamport （莱斯利·兰伯特）</p>
</blockquote>
<a id="more"></a>

<p>微服务是一种架构风格</p>
<ul>
<li>由一系列微小的服务共同组成</li>
<li>跑在自己的进程里</li>
<li>每个服务为独立的业务开发</li>
<li>独立部署</li>
<li>分布式的管理</li>
</ul>
<p>单体架构的优点：</p>
<ul>
<li>容易测试</li>
<li>容易部署</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>开发效率低</p>
</li>
<li><p>代码维护难</p>
</li>
<li><p>部署不灵活</p>
</li>
<li><p>稳定性不高</p>
</li>
<li><p>扩展性不够</p>
</li>
</ul>
<p>微服务架构的基础框架/组件</p>
<ul>
<li>服务注册发现</li>
<li>服务网关</li>
<li>后端通用服务（也称为中间层服务Middle Tier Service）</li>
<li>前端服务（也称边缘服务Edge Service）</li>
</ul>
<p>当下最流行的两大RPC框架分别为：</p>
<ul>
<li><p>Dubbo</p>
</li>
<li><p>Springcloud</p>
<p>Springcloud是一个开发工具集，含有多个子项目</p>
<ol>
<li>利用SpringBoot的开发遍历</li>
<li>主要是基于对Netflix开源组件的进一步封装</li>
<li>SpringCloud最大的作用是简化了分布式开发</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>后端</category>
        <category>分布式/微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>快速构建SSM开发环境</title>
    <url>/2020/12/01/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BASSM%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>记录一下SSM的搭建过程。</p>
<a id="more"></a>

<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>先准备好搭建项目的基本环境</p>
<p>Intellij IDEA：2020.1.1</p>
<p>JDK：1.8</p>
<p>Maven：3.6.3</p>
<p>Tomcat：8.0及以上</p>
<p>下载安装好软件后，在idea软件设置里做好JDK、Maven和Tomcat的相关环境配置，这方面网上的资料很多，本文就不介绍了。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>打开idea，点击New - Project</p>
<p>找到Maven一栏，选择要搭建的Maven项目</p>
<p><img src="/images/2020120101.png" alt="image-20201201205918326"></p>
<p>填写下图信息GroupId和ArtifactId后，一步步next，最后finish完成</p>
<p><img src="/images/2020120102.png" alt="image-20201201205949186"></p>
<p>跳转到该界面，检查信息无误后选择finish</p>
<p><img src="/images/2020120103.png" alt="image-20201201210101088"></p>
<p>创建成功后，可以看到项目是这样的目录结构</p>
<p><img src="/images/2020120104.png" alt="image-20201201210240195"></p>
<h2 id="项目初始配置"><a href="#项目初始配置" class="headerlink" title="项目初始配置"></a>项目初始配置</h2><p>除了配置相关依赖的pom.xml，目录中还有一个文件夹src，src的main目录提供了一个webapp文件夹，webapp文件夹下有一个WEB-INF文件夹，放置的是前端页面的文件，以及web.xml文件。</p>
<p>除了模版提供的目录结构，为了后面项目能成功运行，我们还需要添加一些文件夹，让项目的目录结构变成这样：</p>
<p><img src="/images/2020120105.png" alt="image-20201201210526932"></p>
<h2 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h2><p>简单创建一个user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号码'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf<span class="number">-8</span>;</span><br></pre></td></tr></table></figure>



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liuurick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssmdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssmdemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 用来设置版本号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">srping.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">srping.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 用到的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring框架包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring框架包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis框架包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis框架包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jstl标签类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- java编译插件,如果maven的设置里配置好jdk版本就不用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注：以下四个配置文件都是放置在resources文件夹下</strong></p>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#日志输出级别</span><br><span class="line">log4j.rootLogger=debug,stdout,D,E</span><br><span class="line"></span><br><span class="line">#设置stdout的日志输出控制台</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">#输出日志到控制台的方式，默认为System.out</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">#设置使用灵活布局</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#灵活定义输出格式</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; -[%p]  method:[%c (%rms)] - %m%n</span><br></pre></td></tr></table></figure>

<h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/myo2o?useSSL=false&amp;characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>



<h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><p>这是Spring的核心配置文件，包括Spring结合Mybatis和数据源的配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描model包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.model"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mapper动态代理开发，扫描dao接口包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描注解，这样com.liuurick包下的文件都能被扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.liuurick"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源默认servlet配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置返回视图的路径，以及识别后缀是jsp文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>该文件不是放在resources，而是webapp的WEB-INF文件夹下，文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>mvcDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目的欢迎页，项目运行起来后访问的页面--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 注册ServletContext监听器，创建容器对象，并且将ApplicationContext对象放到Application域中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定spring核心配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 解决乱码的过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定配置文件位置和名称 如果不设置,默认找/WEB-INF/&lt;servlet-name&gt;-servlet.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>上面的配置文件编写好之后，其实我们就可以尝试着启动项目了，<strong>启动项目前先把applicationContext.xml的内容都注释了</strong>，然后就可以创建运行环境了。</p>
<p>点击idea右上角的 Edit Configurations…</p>
<p><img src="/images/2020120106.png" alt="img"></p>
<p>选择Tomcat Server - Local，</p>
<p><img src="/images/2020120107.png" alt="img"></p>
<p>编辑好项目的启动信息，包括项目名，jdk版本，tomcat以及端口</p>
<p><img src="/images/2020120108.png" alt="img"></p>
<p>选择Deployment，添加Atifact，选择第二项，否则Tomcat运行会报错</p>
<p><img src="/images/2020120109.png" alt="img"></p>
<p>保存后，启动项目，成功后在浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080</a>，返回结果如下：<br><img src="/images/2020120110.png" alt="img"></p>
<p>这是index.jsp文件中的内容，因为index.jsp是启动页，所以项目启动后返回的结果是启动页的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成与持续部署</title>
    <url>/2020/12/28/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>Jenkins+Docker+Gitlab三剑客实现自动化服务部署</p>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>持续集成流程：</strong></p>
<p><img src="/images/2021010601.png" alt="图片"></p>
<p>DevOps</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/58702398" target="_blank" rel="noopener">https://www.zhihu.com/question/58702398</a></p>
</blockquote>
<p>DevOps是一种思想或方法论，它涵盖开发，测试，运维的整个流程，DevOps强调软件开发人员与软件测试，软件运维，质量保障（QA）部门之间有效的沟通与协作，强调通过自动化的方法管理软件变更、软件集成，使软件从构建到测试、发布更加快捷、可靠，最终按时交付软件。</p>
<p><img src="/images/2021010602.png" alt="image-20210105223530449"></p>
<h1 id="1-安装启动Docker"><a href="#1-安装启动Docker" class="headerlink" title="1.安装启动Docker"></a>1.安装启动Docker</h1><h2 id="1-1-安装docker"><a href="#1-1-安装docker" class="headerlink" title="1.1 安装docker"></a>1.1 安装docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.yum包更新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.安装docker，出现输入的界面都按 Y</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.查看docker版本，验证是否成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>



<h2 id="1-2-配置镜像加速"><a href="#1-2-配置镜像加速" class="headerlink" title="1.2 配置镜像加速"></a>1.2 配置镜像加速</h2><p><a href="https://liuurick.github.io/2019/12/17/Centos7上安装docker/" target="_blank" rel="noopener">https://liuurick.github.io/2019/12/17/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</a></p>
<h2 id="1-3-安装私有仓库"><a href="#1-3-安装私有仓库" class="headerlink" title="1.3 安装私有仓库"></a>1.3 安装私有仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索镜像</span></span><br><span class="line">docker search registry</span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器</span></span><br><span class="line">docker run -d -p 5000:5000 registry</span><br><span class="line"><span class="meta">#</span><span class="bash">配置私有仓库地址</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">	"insecure-registries": [xxx.xxx.xxx.xxx:xxx]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动本地仓库容器</span></span><br><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure>



<h2 id="1-4-访问私有仓库"><a href="#1-4-访问私有仓库" class="headerlink" title="1.4 访问私有仓库"></a>1.4 访问私有仓库</h2><p><a href="http://192.168.60.129:5000/v2/_catalog" target="_blank" rel="noopener">http://192.168.60.129:5000/v2/_catalog</a></p>
<p><strong>注意：</strong>如果访问不到，关闭防火墙，或者开放端口</p>
<p><a href="https://liuurick.github.io/2019/01/11/防火墙管理/" target="_blank" rel="noopener">https://liuurick.github.io/2019/01/11/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86/</a></p>
<h1 id="2-Docker下gitlab安装配置使用"><a href="#2-Docker下gitlab安装配置使用" class="headerlink" title="2.Docker下gitlab安装配置使用"></a>2.Docker下gitlab安装配置使用</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.查找gitlab镜像</span></span><br><span class="line">docker search gitlab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.gitlab镜像拉取</span></span><br><span class="line">docker pull gitlab/gitlab-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.查看本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.本机建立的3个目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了gitlab容器通过挂载本机目录启动后可以映射到本机，然后后续就可以直接在本机查看和编辑了，不用再进行容器操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.配置文件</span></span><br><span class="line">mkdir -p /home/gitlab/etc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.数据文件</span></span><br><span class="line">mkdir -p /home/gitlab/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.日志文件</span></span><br><span class="line">mkdir -p /home/gitlab/logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker run --name='gitlab' -d \</span><br><span class="line">	--publish 4443:443 --publish 8888:80 \</span><br><span class="line">	-v /home/gitlab/etc:/etc/gitlab \</span><br><span class="line">	-v /home/gitlab/data:/var/opt/gitlab \</span><br><span class="line">	-v /home/gitlab/logs:/var/log/gitlab \</span><br><span class="line">	gitlab/gitlab-ce:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动日志</span></span><br><span class="line">docker logs -f gitlab</span><br></pre></td></tr></table></figure>



<h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><blockquote>
<p>按上面的方式，gitlab容器运行没问题，但在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机路径：/home/github/config/gitlab.rb）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置域名或IP</span><br><span class="line"></span><br><span class="line">#配置gitlab.rb</span><br><span class="line">cd &#x2F;home&#x2F;gitlab&#x2F;etc</span><br><span class="line">vim gitlab.rb</span><br><span class="line"></span><br><span class="line">#配置http协议所使用的访问地址，不加端口号默认为80</span><br><span class="line">external_url &#39;http:&#x2F;&#x2F;192.168.60.129&#39;</span><br><span class="line"></span><br><span class="line">#配置gitlab.yml</span><br><span class="line">cd &#x2F;home&#x2F;gitlab&#x2F;data&#x2F;gitlab-rails&#x2F;etc</span><br><span class="line">vim gitlab.yml</span><br><span class="line"></span><br><span class="line">gitlab:</span><br><span class="line">	host: 192.168.60.129</span><br><span class="line">	port: 8888</span><br><span class="line">	https: false</span><br></pre></td></tr></table></figure>





<h2 id="2-3-初始化密码"><a href="#2-3-初始化密码" class="headerlink" title="2.3 初始化密码"></a>2.3 初始化密码</h2><p>gitlab默认管理用户是root</p>
<p><strong>登录：</strong><a href="http://192.168.60.129:8888登录修改root的密码">http://192.168.60.129:8888登录修改root的密码</a></p>
<p><img src="/images/2021010603.png" alt="image-20210106154349786"></p>
<h2 id="2-4-登录"><a href="#2-4-登录" class="headerlink" title="2.4 登录"></a>2.4 登录</h2><p>用户名密码</p>
<h2 id="2-5-创建项目"><a href="#2-5-创建项目" class="headerlink" title="2.5 创建项目"></a>2.5 创建项目</h2><p>http-demo</p>
<h1 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3.安装git"></a>3.安装git</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yum install -y git</span><br><span class="line"># 查看版本</span><br><span class="line">git version</span><br></pre></td></tr></table></figure>



<h1 id="4-使用git管理项目"><a href="#4-使用git管理项目" class="headerlink" title="4.使用git管理项目"></a>4.使用git管理项目</h1><h2 id="4-1-使用IDEA从Gitlab检出空项目"><a href="#4-1-使用IDEA从Gitlab检出空项目" class="headerlink" title="4.1 使用IDEA从Gitlab检出空项目"></a>4.1 使用IDEA从Gitlab检出空项目</h2><p>项目地址：<a href="http://192.168.60.129:8888/root/http-demo.git" target="_blank" rel="noopener">http://192.168.60.129:8888/root/http-demo.git</a></p>
<h2 id="4-2-复制项目并允许"><a href="#4-2-复制项目并允许" class="headerlink" title="4.2 复制项目并允许"></a>4.2 复制项目并允许</h2><p>IDEA中运行项目并访问：<a href="http://127.0.0.1:10000/user/1" target="_blank" rel="noopener">http://127.0.0.1:10000/user/1</a></p>
<p><img src="/images/2021010604.png" alt="image-20210106170848265"></p>
<p><strong>注意：</strong>记得开放防火墙端口</p>
<h2 id="4-3-提交代码到gitlab"><a href="#4-3-提交代码到gitlab" class="headerlink" title="4.3 提交代码到gitlab"></a>4.3 提交代码到gitlab</h2><p>在工程根目录创建<code>.gitignore</code>，忽略掉无用的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.idea&#x2F;</span><br><span class="line">target&#x2F;</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010605.png" alt="image-20210106165440198"></p>
<h1 id="5-SpringBoot工程制作镜像"><a href="#5-SpringBoot工程制作镜像" class="headerlink" title="5.SpringBoot工程制作镜像"></a>5.SpringBoot工程制作镜像</h1><h2 id="5-1-通过jar包构建镜像"><a href="#5-1-通过jar包构建镜像" class="headerlink" title="5.1 通过jar包构建镜像"></a>5.1 通过jar包构建镜像</h2><h3 id="5-1-1-SpringBoot项目打成jar包"><a href="#5-1-1-SpringBoot项目打成jar包" class="headerlink" title="5.1.1 SpringBoot项目打成jar包"></a>5.1.1 SpringBoot项目打成jar包</h3><ul>
<li><p>打包配置pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>使用maven打包并运行、访问工程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">maven install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-1-2-创建Docker镜像"><a href="#5-1-2-创建Docker镜像" class="headerlink" title="5.1.2 创建Docker镜像"></a>5.1.2 创建Docker镜像</h3><p>在linux上新建一个目录，将上一步的jar包拷贝到Linux服务器，准备创建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">mkdir icoding</span><br></pre></td></tr></table></figure>

<p>测试jar包是否可以运行，执行:java -jar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar http-demo-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010606.png" alt="image-20210106165935824"></p>
<p>访问：<a href="http://192.168.60.129:10000/get/user/1" target="_blank" rel="noopener">http://192.168.60.129:10000/get/user/1</a></p>
<p>在http-demo-1.0-SNAPSHOT.jar所在文件夹位置编写Dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line">FROM java:8</span><br><span class="line"><span class="meta">#</span><span class="bash">VOLUME 指定了临时文件目录/tmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash">其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line">VOLUME /tmp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line">ADD http-demo-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">运行jar包</span></span><br><span class="line">RUN bash -c 'touch /app.jar'</span><br><span class="line">ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]</span><br></pre></td></tr></table></figure>

<p>在Dockerfile文件所在目录创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t http-demo-0.0.1-snapshot .</span><br></pre></td></tr></table></figure>

<p>查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010607.png" alt="image-20210106172228684"></p>
<p>再次运行项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10000:10000 http-demo-0.0.1-snapshot</span><br></pre></td></tr></table></figure>



<h3 id="5-1-3-创建启动容器"><a href="#5-1-3-创建启动容器" class="headerlink" title="5.1.3 创建启动容器"></a>5.1.3 创建启动容器</h3><h3 id="5-1-4访问界面"><a href="#5-1-4访问界面" class="headerlink" title="5.1.4访问界面"></a>5.1.4访问界面</h3><h3 id="5-1-5-停止与删除"><a href="#5-1-5-停止与删除" class="headerlink" title="5.1.5 停止与删除"></a>5.1.5 停止与删除</h3><h2 id="5-2-使用maven构建镜像"><a href="#5-2-使用maven构建镜像" class="headerlink" title="5.2 使用maven构建镜像"></a>5.2 使用maven构建镜像</h2><p>第二种方法通过maven的<code>docker-maven-plugin</code>插件可完成从打包到构建镜像，构建容器等过程</p>
<h3 id="5-2-1-编写pom-docker-xml"><a href="#5-2-1-编写pom-docker-xml" class="headerlink" title="5.2.1 编写pom_docker.xml"></a>5.2.1 编写pom_docker.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--docker镜像相关的配置信息--&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--镜像名，这里使用工程名--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--Dockerfile文件所在目录--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span> <span class="comment">&lt;!-- 指定 Dockerfile 路径--&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--TAG，这里用工程版本号--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--构建镜像的配置信息--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-2-拷贝Dockerfile文件"><a href="#5-2-2-拷贝Dockerfile文件" class="headerlink" title="5.2.2 拷贝Dockerfile文件"></a>5.2.2 拷贝Dockerfile文件</h3><h3 id="5-2-3-在IDEA中提交修改的文件"><a href="#5-2-3-在IDEA中提交修改的文件" class="headerlink" title="5.2.3 在IDEA中提交修改的文件"></a>5.2.3 在IDEA中提交修改的文件</h3><h3 id="5-2-4-clone最新项目"><a href="#5-2-4-clone最新项目" class="headerlink" title="5.2.4 clone最新项目"></a>5.2.4 clone最新项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://192.168.60.129:8888/root/http-demo.git</span><br></pre></td></tr></table></figure>

<h3 id="5-2-5-打包构建镜像"><a href="#5-2-5-打包构建镜像" class="headerlink" title="5.2.5 打包构建镜像"></a>5.2.5 打包构建镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入工程目录</span></span><br><span class="line">cd http-demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包构建镜像</span></span><br><span class="line">mvn -f pom.xml clean package -DeskipTests docker:build</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010608.png" alt="image-20210106181643885"></p>
<p><strong>注意：</strong></p>
<ul>
<li><p>建议还是一个pom文件吧</p>
</li>
<li><p>这里需要安装一下maven</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install maven -y</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010609.png" alt="image-20210106175745867"></p>
<h3 id="5-2-6-创建启动容器"><a href="#5-2-6-创建启动容器" class="headerlink" title="5.2.6 创建启动容器"></a>5.2.6 创建启动容器</h3><p>基于http-demo:1.0-SNAPSHOT镜像创建容器，容器名称为http-demo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10000:10000 http-demo:1.0-SNAPSHOT</span><br></pre></td></tr></table></figure>

<p>容器创建成功，可以通过<code>docker ps -a</code>命令查看</p>
<h3 id="5-2-7-访问界面"><a href="#5-2-7-访问界面" class="headerlink" title="5.2.7 访问界面"></a>5.2.7 访问界面</h3><h1 id="6-持续集成概述"><a href="#6-持续集成概述" class="headerlink" title="6.持续集成概述"></a>6.持续集成概述</h1><blockquote>
<p>持续集成是什么？:<a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a></p>
</blockquote>
<p><strong>传统的软件开发流程如下：</strong></p>
<ol>
<li>项目经理分配模块给开发人员</li>
<li>每个模块的开发人员并行开发，并进行单元测试</li>
<li>开发完毕，将代码集成部署到测试服务器，测试人员进行测试</li>
<li>测试人员发现bug，提交bug，开发人员修改bug</li>
<li>bug修改完毕再次集成、测试</li>
</ol>
<p><strong>问题描述：</strong></p>
<ol>
<li>模块直接依赖关系复杂，在集成时发现大量bug</li>
<li>测试人员等待测试时间过长</li>
<li>软件交付无法保障</li>
</ol>
<p><strong>解决上述问题思考：</strong></p>
<ol>
<li>能否集成测试时间提前？</li>
<li>能否使用自动化工具代替人工集成部署的过程？</li>
</ol>
<p>持续集成：</p>
<blockquote>
<p>持续集成（Continuous integration，简称CI），持续集成的思想是每天要多次将代码合并到主干，并进行集成，测试，这样就可以提早发现错误，进行修正。持久集成也属于DevOps</p>
</blockquote>
<p>持续集成的好处：</p>
<ol>
<li>自动化集成部署，提高了集成效率</li>
<li>更快的修复问题</li>
<li>更快的进行交付</li>
<li>提高了产品质量</li>
</ol>
<h1 id="7-Jenkins安装配置使用"><a href="#7-Jenkins安装配置使用" class="headerlink" title="7.Jenkins安装配置使用"></a>7.Jenkins安装配置使用</h1><p>Jenkins一个领先自动化服务器的安装与配置</p>
<blockquote>
<p><a href="https://www.jenkins.io/" target="_blank" rel="noopener">https://www.jenkins.io/</a></p>
</blockquote>
<h2 id="7-1-安装"><a href="#7-1-安装" class="headerlink" title="7.1 安装"></a>7.1 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索镜像</span></span><br><span class="line">docker search jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="meta">#</span><span class="bash">创建容器</span></span><br><span class="line">docker run --name=jenkins\</span><br><span class="line">  -u root \</span><br><span class="line">  --rm \</span><br><span class="line">  -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">  -v /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64:/usr/java/jdk1.8.0_181 \</span><br><span class="line">  -v /usr/local/maven3:/usr/local/maven \</span><br><span class="line">  -v /usr/local/maven_repository:/usr/local/maven_repository \</span><br><span class="line">  -v /home/jenkins-data:/var/jenkins_home \</span><br><span class="line">  jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>

<h2 id="7-2-解锁Jenkins"><a href="#7-2-解锁Jenkins" class="headerlink" title="7.2 解锁Jenkins"></a>7.2 解锁Jenkins</h2><p><a href="http://192.168.60.129:8080/" target="_blank" rel="noopener">http://192.168.60.129:8080/</a>  首次登录需要解锁Jenkins</p>
<p><img src="/images/2021010610.png" alt="image-20210106193016306"></p>
<p>进入容器内部docker exec -it jenkins bash</p>
<p>/home/jenkins-data:/var/jenkins_home/secrets/initialAdminPassword，得到密码并粘贴过去</p>
<p>然后是自动配置，配置了好久。。。。。。。。</p>
<p><img src="/images/2021010611.png" alt="image-20210106201608652"></p>
<h2 id="7-3登录"><a href="#7-3登录" class="headerlink" title="7.3登录"></a>7.3登录</h2><h1 id="8-持续集成的实现"><a href="#8-持续集成的实现" class="headerlink" title="8.持续集成的实现"></a>8.持续集成的实现</h1><h2 id="8-1-编写pom-xml文件"><a href="#8-1-编写pom-xml文件" class="headerlink" title="8.1 编写pom.xml文件"></a>8.1 编写pom.xml文件</h2><p>使用Jenkins进行构建，在http-demo工程根目录编写pom_docker_registry.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liuurick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>http-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>http-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">registryUrl</span>&gt;</span>192.168.60.129:5000<span class="tag">&lt;/<span class="name">registryUrl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pushImage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">pushImage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.60.129:5000/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交 gitlab仓库</p>
<h2 id="8-2-创建持续集成任务"><a href="#8-2-创建持续集成任务" class="headerlink" title="8.2.创建持续集成任务"></a>8.2.创建持续集成任务</h2><h3 id="8-2-1-创建构建任务"><a href="#8-2-1-创建构建任务" class="headerlink" title="8.2.1 创建构建任务"></a>8.2.1 创建构建任务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-demo</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010612.png" alt="image-20210106202915087"></p>
<h3 id="8-2-2-配置git仓库"><a href="#8-2-2-配置git仓库" class="headerlink" title="8.2.2 配置git仓库"></a>8.2.2 配置git仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Repository URL：http://192.168.60.129:8888/root/http-demo.git</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010613.png" alt="image-20210106203306714"></p>
<h3 id="8-2-3-maven构建配置"><a href="#8-2-3-maven构建配置" class="headerlink" title="8.2.3 maven构建配置"></a>8.2.3 maven构建配置</h3><p>使用shell脚本停止容器、删除容器、删除镜像,shell脚本如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">result=$(docker ps | grep "192.168.60.129:5000/http-demo")</span><br><span class="line">if [[ "$result" != "" ]]</span><br><span class="line">then</span><br><span class="line">echo "stop http-demo"</span><br><span class="line">docker stop http-demo</span><br><span class="line">fi</span><br><span class="line">result1=$(docker ps -a | grep "192.168.60.129:5000/http-demo")</span><br><span class="line">if [[ "$result1" != "" ]]</span><br><span class="line">then</span><br><span class="line">echo "rm http-demo"</span><br><span class="line">docker rm http-demo</span><br><span class="line">fi</span><br><span class="line">result2=$(docker images | grep "192.168.60.129:5000/http-demo")</span><br><span class="line">if [[ "$result2" != "" ]]</span><br><span class="line">then</span><br><span class="line">echo "192.168.60.129:5000/http-demohttp-demo:0.0.2-SNAPSHOT"</span><br><span class="line">docker rmi 192.168.60.129:5000/http-demo-0.0.1-SNAPSHOT</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>执行maven构建</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean package -f pom_docker_registry.xml  -DskipTests docker:build</span><br></pre></td></tr></table></figure>

<p><strong>拉取镜像，创建容器，启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name http-demo -p 10000:10000 -idt 192.168.60.129:5000/http-demo-0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010614.png" alt="image-20210106204110819"></p>
<h2 id="8-4-执行任务"><a href="#8-4-执行任务" class="headerlink" title="8.4  执行任务"></a>8.4  执行任务</h2><p>修改代码内容自动构建</p>
<p><strong>注意：</strong>可能会遇到容器端口号冲突的问题，docker stop即可</p>
<h2 id="8-5-自动构建"><a href="#8-5-自动构建" class="headerlink" title="8.5 自动构建"></a><strong>8.5 自动构建</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jenkins中拿到钩子地址：**Build Triggers**</span><br><span class="line"></span><br><span class="line">gitlab中配置钩子地址：http://192.168.60.129:8080/project/http-demo</span><br></pre></td></tr></table></figure>

<p><img src="/images/2021010615.png" alt="image-20210106211347397"></p>
<p><img src="/images/2021010616.png" alt="image-20210106211501350"></p>
<p><strong>添加成功后</strong>：Test–》Push events测试一下</p>
<p><strong>注意：</strong></p>
<ul>
<li><p>URL is blocked Requests to the local network are not allowed</p>
<p>Admin area–&gt;Settings–&gt;Network–&gt;勾选</p>
</li>
</ul>
<p><img src="/images/2021010617.png" alt="image-20210106212334409"></p>
<ul>
<li>通过用户名密码构建的不需要配置gitlab</li>
</ul>
]]></content>
      <categories>
        <category>运维知识</category>
        <category>持续集成/持续发布</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐系统算法整理</title>
    <url>/2020/12/08/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>推荐系统算法整理</p>
<a id="more"></a>

<h1 id="个性化推荐"><a href="#个性化推荐" class="headerlink" title="个性化推荐"></a>个性化推荐</h1><p>场景决定推荐规则</p>
<h1 id="推荐分类"><a href="#推荐分类" class="headerlink" title="推荐分类"></a>推荐分类</h1><h2 id="1-基于规则的推荐"><a href="#1-基于规则的推荐" class="headerlink" title="1.基于规则的推荐"></a>1.基于规则的推荐</h2><p>规则模型：规则定义，简单的算术公式</p>
<h2 id="2-基于传统机器学习的推荐"><a href="#2-基于传统机器学习的推荐" class="headerlink" title="2.基于传统机器学习的推荐"></a>2.基于传统机器学习的推荐</h2><p>个性化召回als算法原理：</p>
<blockquote>
<p><a href="https://github.com/huangyueranbbc/Spark_ALS" target="_blank" rel="noopener">https://github.com/huangyueranbbc/Spark_ALS</a></p>
</blockquote>
<p>个性化排序lr算法原理</p>
<blockquote>
<p><a href="https://github.com/wuxinping1992/cf_gbdt_lr" target="_blank" rel="noopener">https://github.com/wuxinping1992/cf_gbdt_lr</a></p>
</blockquote>
<p>点击率预估模型算法</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/63973457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63973457</a></p>
</blockquote>
<p>推荐算法的好坏取决于用户历史数据</p>
<h2 id="3-基于深度学习的推荐"><a href="#3-基于深度学习的推荐" class="headerlink" title="3.基于深度学习的推荐"></a>3.基于深度学习的推荐</h2><p>深度学习是机器学习的升级版，也是基于神经网络的进化，可以更深层次的发现用户的需求，但是对数据的真实性要求更高</p>
<h1 id="推荐模型"><a href="#推荐模型" class="headerlink" title="推荐模型"></a>推荐模型</h1><p><strong>规则模型：</strong>规则定义，简单的算术公式</p>
<p><strong>机器学习模型训练：</strong>数据训练后的算术公式</p>
<blockquote>
<p>通过历史行为的数据，去训练出算术公式，训练出来的算术公式可以用来做机器学习模型预测</p>
</blockquote>
<p><strong>机器学习模型预测：</strong>待预测数据经过训练模型算术公式后的结果</p>
<h1 id="模型评价指标"><a href="#模型评价指标" class="headerlink" title="模型评价指标"></a>模型评价指标</h1><p><strong>离线指标：</strong>查全率，差准率，auc等</p>
<blockquote>
<p>80%的数据用做模型训练得出算术公式，然后用剩下20%的数据用做模型预测，得到的结果和真正的结果作比较，这样可以衡量算法公式的优劣</p>
</blockquote>
<p><strong>在线指标：</strong>点击率，交易转化率等</p>
<blockquote>
<p>在线指标远比离线指标重要</p>
</blockquote>
<p><strong>A/B测试：</strong>简单来说，就是为同一个目标制定两个方案（比如两个页面），让一部分用户使用 A 方案，另一部分用户使用 B 方案，记录下用户的使用情况，看哪个方案更符合设计目标。</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/20045543" target="_blank" rel="noopener">https://www.zhihu.com/question/20045543</a></p>
</blockquote>
<h1 id="推荐系统架构"><a href="#推荐系统架构" class="headerlink" title="推荐系统架构"></a>推荐系统架构</h1><p><img src="/images/2020120801.png" alt="image-20201222155116005"></p>
<h1 id="个性化召回算法ALS"><a href="#个性化召回算法ALS" class="headerlink" title="个性化召回算法ALS"></a>个性化召回算法ALS</h1><blockquote>
<p>ALS（Alternating Least Squares,）:最小二乘法，利用矩阵分解的结果无限逼近现有数据，得到隐含特征，最后利用隐含特征预测其余结果</p>
<p><a href="https://blog.csdn.net/qq_37142346/article/details/80472088" target="_blank" rel="noopener">https://blog.csdn.net/qq_37142346/article/details/80472088</a></p>
</blockquote>
<p><strong>演算步骤：</strong></p>
<p><img src="/images/2020120802.png" alt="image-20201222164538730"></p>
<p>User 4行  Product  3列</p>
<blockquote>
<p>游览行为—1分</p>
<p>游览+购买行为—3分</p>
</blockquote>
<p><strong>预测空白区域：</strong></p>
<p><img src="/images/2020120803.png" alt="image-20201222163717605"></p>
<p>User 4行 5列隐式特征</p>
<p><img src="/images/2020120804.png" alt="image-20201222163132072"></p>
<p>Product 3行   5列隐式特征</p>
<p>User矩阵*Product的转置矩阵，也就是User的f乘Product，获取无限逼近于真实数据的分数，同时预测其余节点的分数，排序后输出</p>
<p><img src="/images/2020120805.png" alt="image-20201222163145278"></p>
<h1 id="个性化排序算法LR"><a href="#个性化排序算法LR" class="headerlink" title="个性化排序算法LR"></a>个性化排序算法LR</h1><blockquote>
<p>逻辑回归(Logistic Regression, <em>LR</em>)又称为逻辑回归分析,是分类和预测算法中的一种</p>
<p>Y=ax1+bx2+cx3+dx4+…..   x为特征，a,b,c,d为权重  </p>
<p>排序的问题在某些意义上也可以看成是点击率预估，公式中x1x2x3这些可以看成是用户的特征，例如x1是年龄，x2是性别等等，在公式中，每个特征都有一个权重a，b，c，d，e等，结果会得到一个Y，越趋近1代表点击概率越大。这是个预测的过程。</p>
</blockquote>
<p><img src="/images/2020120806.png" alt="img"></p>
<p>LR算法也就是要算出a，b，c，d，e，在大数据平台会采集Y的样本，可能是1也可能是0，</p>
<p>在上面中，<strong>蓝色</strong>为正样本，<strong>紫色</strong>为负样本，也LR需要推算出红线，等学习出红线以后，就可以做预测了，新进来一个x点，可以根据红线来推算这个点是正样本的概率大还是负样本的概率大。这就是比较简单的逻辑回归的排序算法原理。</p>
<h1 id="决策树算法"><a href="#决策树算法" class="headerlink" title="决策树算法"></a>决策树算法</h1><blockquote>
<p>决策树算法，事实上是一个多重分类选择器组合承德结果，也就是输入一个参数，根据这个参数返回1/0，举个例子的话，可以想象成以前杂志上的那种心理测试题。通过多个选择，获得一个结果。</p>
</blockquote>
<p>那么如何定义决策树的每个节点的特征呢？原则上越能分出绝大部分特征的越往上。</p>
<p>如何衡量？数学上有一个名词叫做信息熵，来衡量信息量的大小，也就是对随机变量不确定的一个衡量，熵越大，不确定性越大。</p>
<p>例如：天气有晴天、多云、雨天，温度有冷、热、适中，湿度有高、中等，风有有风、无风，最后有个结果，是否出去玩。</p>
<p>那么我们如何构建这个抉择树？我们选取熵大的节点放在上面，依次往下。离散特征直接按照分类选择器，连续特征可以用二分、三分等分类方式进，例如小20岁，20-40等等。</p>
<p><strong>决策树的缺点</strong>：样本特征过多时，树的高度太高。样本特征本身有问题时，如果过拟合，会对预测产生偏差。</p>
<p>为了避免决策树的缺点，我们对决策树衍生出了两种算法：<strong>随机森林法</strong>和<strong>GBDT</strong></p>
<p><strong>随机森林：</strong>通过随机的选择样本（放回抽样），也就是随机选择几个样本，几个特征，生成一个决策树，放回去再随机选择样本生成决策树，这样就可以生成随机森林。最后在测试阶段，把所有决策树的结果汇总到一起取平均数。当然，随机的缺点也就是不确定性，既是优势、又是劣势。</p>
<p>基于这个，衍生出了另一种算法：GBDT</p>
<p>顺序为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.从初始训练集中得到一个基准学习器。</span><br><span class="line">2.用基准学习器预测训练样本并调整做错样本属性的权重。</span><br><span class="line">3.反复迭代生成T个学习器</span><br><span class="line">4.T个学习期串行预测加权结合</span><br></pre></td></tr></table></figure>

<p>对于GBDT，它是以第一棵树作为基准，逐步调整，所以这样出来的树也就更准确了。</p>
<h1 id="机器学习模型实战"><a href="#机器学习模型实战" class="headerlink" title="机器学习模型实战"></a>机器学习模型实战</h1><h2 id="Spark原理"><a href="#Spark原理" class="headerlink" title="Spark原理"></a>Spark原理</h2><blockquote>
<p>Spark是为大规模数据处理而设计的快速通用的计算引擎。</p>
<p>他有很多的库，例如Spark core、Spark Sql、Spark on Hive、Spark Streaming等。还有机器学习库例如</p>
<p>Spark mllib：机器学习库。</p>
<p><a href="https://www.cnblogs.com/xuliangxing/p/7279662.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliangxing/p/7279662.html</a></p>
</blockquote>
<p><strong>Map Reduce概念：</strong></p>
<p>现在有一个场景，有一个list，里面存的是商品实体，现在需要将这些实体中的id提取到另一个list中，现有阶段就是遍历然后把id提取出来，不管是for还是lambda还是别的方式。但是如果这个list里面的数量非常巨大，那么在jvm内存中做这些事情是不现实的，因此，有了Spark core的Map Reduce，可以将复杂的操作封装成RDD的操作，使我们可以很轻易的进行数据转换。</p>
<p>那么它的原理也很简单，假如有十万条数据，那么spark会拆分成若干条，然后分发给对应的机器，map以后再把所有的数据合并，进行计算如max、min、avg等，然后把结果发给目标机器。</p>
<p>那么对于数据库来说，假如分了三个库，每个库里面都有100w条数据，spark有一个spark sql的库，可以根据很简单的语句 例如：select sum(price) from shop来去获取三个库的数据并返回结果。</p>
<p>Spark Streaming是指假如有个数据采集的系统，数据是以流式byte[]的形式发送给spark，定义4个为一个数字，那么spark就可以通过流式处理的方案处理数据运算。</p>
]]></content>
  </entry>
  <entry>
    <title>浅析Java平台无关性的实现</title>
    <url>/2020/10/22/%E6%B5%85%E6%9E%90Java%E5%B9%B3%E5%8F%B0%E6%97%A0%E5%85%B3%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>    

<p>​    平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p>
<p>​    简而言之，Java是通过<code>javac</code>将java代码编译成字节码文件，这也是java跨平台的基础，接着虚拟机将class文件翻译成机器可识别的机器码。这也就实现了java的跨平台性。</p>
<h3 id="通过代码来理解"><a href="#通过代码来理解" class="headerlink" title="通过代码来理解"></a>通过代码来理解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bytecode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">        ++j;</span><br><span class="line">        System.out.println(<span class="string">"i="</span>+i+<span class="string">"-----j="</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反编译之后：</p>
<p>可以看到JVM帮我们做了很多事情</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bytecode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">bytecode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> var1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> var2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var3 = var1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var4 = var2 + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + var3 + <span class="string">"-----j="</span> + var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程基础</category>
        <category>Java语言</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器软件盘点</title>
    <url>/2020/12/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%9B%98%E7%82%B9/</url>
    <content><![CDATA[<p>静态服务：主要提供静态资源，不同用户访问到的资源相同。本博客就是典型的静态服务（Hexo+Next）<br>动态服务：提供动态服务，不同用户访问到的资源不同，涉及到数据之类的。例如类似<a href="https://github.com/halo-dev/halo" target="_blank" rel="noopener">halo</a> </p>
<a id="more"></a>

<blockquote>
<p>服务器软件大盘点！:<a href="https://zhuanlan.zhihu.com/p/122252011" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/122252011</a></p>
</blockquote>
<p>服务器软件主要分为以下几类：</p>
<ul>
<li>Web服务器:广义上来说，就是响应用户的需求，提供服务，当下所有的服务器软件都可以称之为web服务器软件</li>
<li>HTTP服务器(静态服务)：使用HTTP协议传输资源，提供服务</li>
<li>应用服务器(动态服务)：一个特定应用的承载容器</li>
</ul>
<p><strong>常见的轻量级服务器软件：</strong><br>    1.Nginx：典型的静态服务器，可做反向代理、负载均衡，一般放在最前面直面用户，和后端Tomcat打配合；纯C写的，性能贼高、内存消耗极少、稳定性也相当好，互联网公司重度使用。<br>    2.Tengine：阿里出品，基于Nginx服务器做的改造(加强和封装)，对大流量场景做了很多高级功能，性能、稳定性优秀。<br>    3.Apache http server：也是静态服务器，但是不如Nginx。</p>
<p>​    4.IIS：微软开发，不开源，只能用在Windows下，具有应用服务器能力的http服务器。</p>
<p>​    5.Tomcat：Apache出品，典型的应用服务器软件，符合Servlet标准的应用容器，也可以提供http服务，但一般不会作为http服务器；是Spring Boot框架默认的内置服务器。<br>​    6.Jetty：跟Tomcat是一个性质的东西，符合Servlet标准的应用容器，也是Spring Boot框架支持的服务器，但不是默认的。Jetty比Tomcat要轻量一些，配置也更简单一些而已。<br>​    7.Undertow：红帽出品，跟Tomcat、Jetty一样也是Spring Boot框架支持的服务器，但不是默认的；在并发量不高的情况下 , Undertow与Tomcat、Jetty的性能区别不大 ，但在高并发时性能优于Tomcat、Jetty。<br><strong>几款商用重量级的服务器软件：</strong><br>​    1.JBoss(从8版开始更名为WildFly)：不仅是Servlet应用容器，更是EJB的应用容器，整套JavaEE框架部署的解决方案。<br>​    2.WebLogic：Oracle公司出品，用于部署企业级JavaEE应用，全能型，几乎支持JavaEE所有的应用规范。<br>​    3.WebSphere：IBM公司出品，支持更多JavaEE的应用规范的综合应用服务器。</p>
<p><strong>对比：</strong></p>
<blockquote>
<p>严格意义上Web服务器只负责处理HTTP协议，只能发送静态页面的内容。而JSP，ASP，PHP等动态内容需要通过CGI、FastCGI、ISAPI等接口交给其他程序去处理。这个其他程序就是应用服务器。<br>比如Web服务器包括Nginx，Apache，IIS等。而应用服务器包括WebLogic，JBoss等。应用服务器一般也支持HTTP协议，因此界限没这么清晰。但是应用服务器的HTTP协议部分仅仅是支持，一般不会做特别优化，所以很少有见Tomcat直接暴露给外面，而是和Nginx、Apache等配合，只让Tomcat处理JSP和Servlet部分</p>
</blockquote>
]]></content>
      <categories>
        <category>运维知识</category>
      </categories>
      <tags>
        <tag>服务器软件</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记本换电池防坑记</title>
    <url>/2020/10/20/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8D%A2%E7%94%B5%E6%B1%A0%E9%98%B2%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<p>​        电脑近几天在启动的时候总是弹出电量不足的警告，想必是电池的使用周期已经到了。。。随即淘宝购置一块，说实话，心里还是有点警觉的，因为电脑型号已经停产，能买到原装的几率很小，只能硬着头皮上了，哈哈</p>
<a id="more"></a>        

<p>​        拆卸电脑装完电池之后，没想到运行良好，，，太感谢淘宝的卖家了！！！</p>
<p>为了防止买到劣质/二手的电池，可以通过cmd命令检查。。。</p>
<p>常用电池检查指令：</p>
<p>Windows Power shell（管理员）—–》<code>Powercfg /batteryreport</code></p>
<p><img src="/images/2020102002.png" alt="img"></p>
]]></content>
      <categories>
        <category>电脑维修</category>
      </categories>
      <tags>
        <tag>电脑维修</tag>
      </tags>
  </entry>
  <entry>
    <title>自学感悟</title>
    <url>/2020/12/27/%E8%87%AA%E5%AD%A6%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>自学Java这么久，总感觉哪里不得劲，明明什么都学了，却感觉啥都不会，哎。。。。希望如达克效应认知曲线所说的一样，自己处于第三阶段？</p>
<a id="more"></a>

<p><img src="/images/2020122702.png" alt="img"></p>
<p><strong>附上Java后端学习路线：</strong></p>
<blockquote>
<p>Java后端学习路线：<a href="https://juejin.cn/post/6844904093429792775" target="_blank" rel="noopener">https://juejin.cn/post/6844904093429792775</a></p>
</blockquote>
<p><img src="/images/2020122701.png" alt="image-20201227155519341"></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>添加系统调用</title>
    <url>/2019/08/18/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>操作系统课设</p>
<a id="more"></a>

<h4 id="1-下载一个内核"><a href="#1-下载一个内核" class="headerlink" title="1.下载一个内核"></a>1.下载一个内核</h4><p>将内核文件下载到/usr/src路径下</p>
<p>官方下载地址：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/</a></p>
<p>为了能够下载快一点，这里我选择的是在上海交大的开源网站</p>
<p><strong>下载命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/linux-4.18.16.tar.xz</span><br></pre></td></tr></table></figure>

<p><strong>注:</strong>如果没有wget,请用这个命令下载：yum -y install wget</p>
<h4 id="2-解压内核源码"><a href="#2-解压内核源码" class="headerlink" title="2.解压内核源码"></a>2.解压内核源码</h4><p><code>tar -xvf linux-4.18.16.tar.xz</code></p>
<p><strong>注:</strong>不要在windows上解压上传到centos中，因为windows对文件名大小写不敏感，文件会相互覆盖。而Linux则不会。</p>
<h4 id="3-安装依赖软件包"><a href="#3-安装依赖软件包" class="headerlink" title="3.安装依赖软件包"></a>3.安装依赖软件包</h4><p>安装CentOS7的依赖软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc ncurses-devel bison flex bc elfutils-libelf-devel openssl-devel</span><br></pre></td></tr></table></figure>



<h4 id="4-添加系统调用号"><a href="#4-添加系统调用号" class="headerlink" title="4.添加系统调用号"></a>4.添加系统调用号</h4><p><code>vim linux-4.18.16/arch/x86/entry/syscalls/syscall_64.tbl</code></p>
<p>增加此行：</p>
<p><code>335   common   mycall     __x64_sys_mycall</code></p>
<p><img src="/images/2018081801.png" alt="img"></p>
<h4 id="5-添加系统调用程序的声明"><a href="#5-添加系统调用程序的声明" class="headerlink" title="5.添加系统调用程序的声明"></a>5.添加系统调用程序的声明</h4><p><code>vim linux-4.18.16/include/linux/syscalls.h</code></p>
<p>增加此行：</p>
<p><code>asmlinkage long sys_mycall(int number);</code></p>
<p><img src="/images/2018081802.png" alt="img"> </p>
<h4 id="6-编写系统调用函数"><a href="#6-编写系统调用函数" class="headerlink" title="6.编写系统调用函数"></a>6.编写系统调用函数</h4><p><code>vim linux-4.18.16/kernel/sys.c</code></p>
<p>增加以下函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(mycall,int,number)&#123;</span><br><span class="line">	int result=number*number*number;</span><br><span class="line">	printk(<span class="string">"The result is %d\n"</span>,result);</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<p><img src="/images/2018081803.png" alt="img"> </p>
<h4 id="7-开始编译内核"><a href="#7-开始编译内核" class="headerlink" title="7.开始编译内核"></a>7.开始编译内核</h4><p>编译内核分为以下几个步骤：</p>
<p>1)    进入内核文件夹</p>
<p><code>cd linux-4.18.16/</code></p>
<p>2)    修改文件可执行权限</p>
<p><code>chmod +x ./scripts/gcc-version.sh</code></p>
<p>3)    删除以前编译产生的垃圾文件</p>
<p><code>make mrproper</code></p>
<p><code>make clean</code></p>
<p><strong>注：</strong>可能有些同学会遇到如下问题：</p>
<p><img src="/images/2018081804.png" alt="img"><strong>解决方法：</strong></p>
<p>安装：</p>
<p><code>yum -y install gcc automake autoconf libtool make</code></p>
<p>安装g++:</p>
<p><code>yum install gcc gcc-c++</code></p>
<p>4)    拷贝文件(.config)</p>
<p><code>cp /boot/config-* .config</code> </p>
<p>5)    选择Load和Save保存再Exit退出。</p>
<p><code>make menuconfig</code>      </p>
<p><img src="/images/2018081805.png" alt=""> </p>
<p>6)    开始编译内核（4个线程跑会快一些）：</p>
<p><code>make -j 4</code>  </p>
<p>这里大概需要一个小时</p>
<p>7)    安装模块</p>
<p><code>make modules_install</code>     </p>
<p>8)    安装内核</p>
<p><code>make install</code>         </p>
<h4 id="8-重启选择相应的系统"><a href="#8-重启选择相应的系统" class="headerlink" title="8.重启选择相应的系统"></a>8.重启选择相应的系统</h4><p><img src="/images/2018081806.png" alt="img"> </p>
<h4 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试:"></a>9. 测试:</h4><p>dmesg用来显示内核环缓冲区（kernel-ring buffer）内容，内核将各种消息存放在这里。在系统引导时，内核将与硬件和模块初始化相关的信息填到这个缓冲区中。内核环缓冲区中的消息对于诊断系统问题 通常非常有用。在运行dmesg时，它显示大量信息。通常通过less或grep使用管道查看dmesg的输出，这样可以更容易找到待查信息。例如，如果发现硬盘性能低下，可以使用dmesg来检查它们是否运行在DMA模式：</p>
<p>首先创建test文件：</p>
<p>touch test.c</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> syscall(335,4);</span><br><span class="line"> printf(&quot;hello&quot;);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后编译源文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test</span><br><span class="line">.&#x2F;test</span><br><span class="line">最后再输入dmesg</span><br></pre></td></tr></table></figure>



<p>dmesg相关指令：</p>
<p><img src="/images/2018081807.png" alt="img">dmesg相关指令：</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个小小的强迫症</title>
    <url>/2020/09/27/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84%E5%BC%BA%E8%BF%AB%E7%97%87/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<p>在idea中经常会碰到这样的问题</p>
<blockquote>
<p>Could not autowire. No beans of ‘xxxx’ type found.. </p>
</blockquote>
<p>项目工程并没有报错提示，仅仅是在实际java文件中飙红，说实话看着真的很难受，心理不得劲</p>
<p>解决方法还是蛮简单的，打开setting即可<br>Editor-&gt;Inspections-&gt;Spring Core-&gt;Code-&gt;Autowiring for bean class<br>将Severvty改成warning就可以了</p>
]]></content>
      <categories>
        <category>开发工具</category>
        <category>集成开发环境</category>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂四个指标（PE/PB/ROE/股息率）</title>
    <url>/2021/01/07/%E7%9C%8B%E6%87%82%E5%9B%9B%E4%B8%AA%E6%8C%87%E6%A0%87%EF%BC%88PE-PB-ROE-%E8%82%A1%E6%81%AF%E7%8E%87%EF%BC%89/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<p><strong>市盈率PE</strong> (Price-to-Earning Ratio)：指当前总市值除以一年的总净利润。<strong>市盈率越低，说明越是低估</strong></p>
<p><strong>市净率 PB</strong> (Price-to-Book Ratio)：指每股股价除以每股净资产，或总市值除以净资产。<strong>1倍以下就是低市净率。</strong></p>
<p><strong>净资产收益率ROE</strong>（Rate of Return on Common Stockholders’ Equity）：是指净利润除以净资产。代表着股东股权投资的报酬率，代表着公司赚钱的能力。按照格雷厄姆的标准，<strong>盈利收益率大于10%才是值得投资的企业</strong>。</p>
<p><strong>股息率（Dividend Yield Ratio）</strong>：是一年的总派息额与当时市价的比例。</p>
<p><strong>PE/PB百分位</strong>：这个指标是跟历史数据比较，看看现在的数据是在一个什么区域。<strong>百分位5%，代表现在的估值比过去95%的时间低。</strong></p>
<blockquote>
<p>一文教你看四个指标（PE/PB/ROE/股息率）：<a href="https://zhuanlan.zhihu.com/p/61254326" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/61254326</a></p>
<p>指数基金估值之PE, PB, ROE：<a href="https://zhuanlan.zhihu.com/p/111568187" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/111568187</a></p>
</blockquote>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构体系</title>
    <url>/2020/12/30/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p>算法与数据结构体系学习大纲：</p>
<a id="more"></a>

<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h1><blockquote>
<p><strong>数据结构定义：</strong>就是研究数据的存储方式;把现实中大量而复杂的问题以特定的数据类型(单个数据存储)和特定的存储结构(个体的关系)保存到内存中。</p>
<p><strong>算法定义：</strong>在此基础上为实现某个功能(查找,删除,排序等)而进行的操作。</p>
<p>数据结构用于解决存储数据，算法用于对存储数据的操作</p>
</blockquote>
<h1 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2 存储结构"></a>2 存储结构</h1><h2 id="2-1-线性表"><a href="#2-1-线性表" class="headerlink" title="2.1 线性表　　"></a>2.1 线性表　　</h2><p><strong>顺序表</strong>： 简单地理解，就是常用的数组</p>
<p><strong>链表</strong>： 存储数据时，是随用随申请，因此数据的存储位置是相互分离，存储位置是随机的</p>
<p><strong>栈</strong>：遵循“先入后出”的原则</p>
<p><strong>队列</strong>：遵循“先入先出”的特点</p>
<p><strong>哈希表</strong>：根据关键码值(Key value)而直接进行访问的数据结构</p>
<h2 id="2-2-树结构"><a href="#2-2-树结构" class="headerlink" title="2.2 树结构"></a>2.2 树结构</h2><ul>
<li>二分搜索树</li>
<li>堆</li>
<li>AVL</li>
<li>红黑树</li>
<li>B类树</li>
</ul>
<h2 id="2-3-图结构"><a href="#2-3-图结构" class="headerlink" title="2.3 图结构"></a>2.3 图结构</h2><h2 id="2-4-高级数据结构"><a href="#2-4-高级数据结构" class="headerlink" title="2.4 高级数据结构"></a>2.4 高级数据结构</h2><ul>
<li>线段树</li>
<li>并查集</li>
<li>Trie</li>
<li>SQRT分解</li>
</ul>
<h1 id="3-时间复杂度和空间复杂度"><a href="#3-时间复杂度和空间复杂度" class="headerlink" title="3 时间复杂度和空间复杂度"></a>3 时间复杂度和空间复杂度</h1><h2 id="3-1-时间复杂度"><a href="#3-1-时间复杂度" class="headerlink" title="3.1 时间复杂度"></a>3.1 时间复杂度</h2><p>算法的运行时间，便是方式为O(频度)，以去掉系数的最高项为准，例如运行了(n² + n + 1)次的算法的时间复杂度为O(n²)</p>
<p>几种常见的算法时间复杂度的比较（由小到大）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(1)常数阶 &lt; O(logn)对数阶&lt; O(n)线性阶 &lt; O(n2)平方阶 &lt; O(n3)(立方阶) &lt; O(nn) (指数阶)</span><br></pre></td></tr></table></figure>

<h2 id="3-2-空间复杂度"><a href="#3-2-空间复杂度" class="headerlink" title="3.2 空间复杂度"></a>3.2 空间复杂度</h2><p>该算法所耗费的存储空间，它也是问题规模n的函数</p>
<h1 id="4-算法"><a href="#4-算法" class="headerlink" title="4 算法"></a>4 算法</h1><h2 id="4-1-排序算法"><a href="#4-1-排序算法" class="headerlink" title="4.1 排序算法"></a>4.1 排序算法</h2><ul>
<li>插入</li>
<li>冒泡</li>
<li>选择</li>
<li>希尔</li>
<li>快速</li>
<li>归并</li>
<li>堆排序</li>
<li>计数排序</li>
<li>桶排序</li>
<li>基数排序</li>
</ul>
<h2 id="4-2-查找算法"><a href="#4-2-查找算法" class="headerlink" title="4.2 查找算法"></a>4.2 查找算法</h2><ul>
<li>线性查找</li>
<li>二分查找</li>
</ul>
<h2 id="4-3-字符串算法"><a href="#4-3-字符串算法" class="headerlink" title="4.3 字符串算法"></a>4.3 字符串算法</h2><ul>
<li>KMP</li>
<li>模式匹配</li>
</ul>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法与数据结构体系</tag>
      </tags>
  </entry>
  <entry>
    <title>读《深入浅出MyBatis技术原理与实战》</title>
    <url>/2020/12/20/%E8%AF%BB%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMyBatis%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h1 id="1-MyBatis简介"><a href="#1-MyBatis简介" class="headerlink" title="1.MyBatis简介"></a>1.MyBatis简介</h1><h1 id="2-MyBatis入门"><a href="#2-MyBatis入门" class="headerlink" title="2 MyBatis入门"></a>2 MyBatis入门</h1><p><code>useGeneratedKeys</code>:默认为false，为true时，表示如果插入的表以自增列为主键，则允许 JDBC 支持自动生成主键，并可将自动生成的主键返回；</p>
<p><code>keyProperty</code>:实体类对应主键的属性；</p>
<p><code>keyColumn</code>:数据库中的主键；</p>
<h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><h1 id="4-映射器"><a href="#4-映射器" class="headerlink" title="4 映射器"></a>4 映射器</h1><h1 id="5-动态SQL"><a href="#5-动态SQL" class="headerlink" title="5 动态SQL"></a>5 动态SQL</h1><h1 id="6-MyBatis的解析和运行原理"><a href="#6-MyBatis的解析和运行原理" class="headerlink" title="6 MyBatis的解析和运行原理"></a>6 MyBatis的解析和运行原理</h1><h1 id="7-插件"><a href="#7-插件" class="headerlink" title="7 插件"></a>7 插件</h1><h1 id="8-MyBatis-Spring"><a href="#8-MyBatis-Spring" class="headerlink" title="8 MyBatis-Spring"></a>8 MyBatis-Spring</h1><h1 id="9-实用的场景"><a href="#9-实用的场景" class="headerlink" title="9 实用的场景"></a>9 实用的场景</h1>]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>读《Java多线程核心技术》</title>
    <url>/2020/12/30/%E8%AF%BB%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<blockquote>
<p>推荐几本非常棒的Java多线程编程书籍？<a href="https://www.zhihu.com/question/28982243/answer/1225022955" target="_blank" rel="noopener">https://www.zhihu.com/question/28982243/answer/1225022955</a></p>
</blockquote>
<h1 id="1-Java多线程技能"><a href="#1-Java多线程技能" class="headerlink" title="1 Java多线程技能"></a>1 Java多线程技能</h1><p>关键技术点：</p>
<ul>
<li>线程的启动</li>
<li>如何使线程暂停</li>
<li>如何使线程停止</li>
<li>线程的优先级</li>
<li>线程安全相关的问题</li>
</ul>
<h2 id="1-1-进程和多线程的概念及线程的优点"><a href="#1-1-进程和多线程的概念及线程的优点" class="headerlink" title="1.1 进程和多线程的概念及线程的优点"></a>1.1 进程和多线程的概念及线程的优点</h2><p>进程与线程</p>
<p>进程是程序运行的实例，线程是进程中独立运行的子任务。简而言之就是一个进程中至少有一个线程。</p>
<p>多线程的优点：</p>
<p>充分“压榨”CPU</p>
<blockquote>
<p>使用多任务操作系统Windows后，可以最大限度地利用CPU的空闲时间来处理其他的任务，比如一边让操作系统处理正在由打印机打印的数据，一边使用Word编辑文档。而CPU在这些任务之间不停地切换，由于切换的速度非常快，给使用者的感受就是这些任务似乎在同时运行。所以使用多线程技术后，可以在同一时间内运行更多不同种类的任务。</p>
</blockquote>
<p><strong>注意：</strong>多线程是异步的，所以千万不要把代码的顺序当成线程执行的顺序，线程被调用的时机是随机的。</p>
<h2 id="1-2-多线程的使用"><a href="#1-2-多线程的使用" class="headerlink" title="1.2 多线程的使用"></a>1.2 多线程的使用</h2><p>获取当前运行中的线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.currentThread().getName()</span><br></pre></td></tr></table></figure>

<p>实现多线程编程的方法主要有两种：</p>
<ol>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
</ol>
<p>两种方式创建的线程在工作时的性质是一样的，没有本质的区别。</p>
<h3 id="1-2-1-继承Thread类"><a href="#1-2-1-继承Thread类" class="headerlink" title="1.2.1 继承Thread类"></a>1.2.1 继承Thread类</h3><p>线程启动顺序与start()执行顺序无关。</p>
<blockquote>
<p>Thread.java类中的start()方法通知“线程规划器”此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。如果调用代码thread.run()就不是异步执行了，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。</p>
</blockquote>
<h3 id="1-2-2-实现Runnable接口"><a href="#1-2-2-实现Runnable接口" class="headerlink" title="1.2.2 实现Runnable接口"></a>1.2.2 实现Runnable接口</h3><h3 id="1-2-3-实例变量与线程安全"><a href="#1-2-3-实例变量与线程安全" class="headerlink" title="1.2.3 实例变量与线程安全"></a>1.2.3 实例变量与线程安全</h3><h2 id="1-3-currentThread-方法"><a href="#1-3-currentThread-方法" class="headerlink" title="1.3 currentThread()方法"></a>1.3 currentThread()方法</h2><h2 id="1-4-isAlive-方法"><a href="#1-4-isAlive-方法" class="headerlink" title="1.4 isAlive()方法"></a>1.4 isAlive()方法</h2><h2 id="1-5-sleep-方法"><a href="#1-5-sleep-方法" class="headerlink" title="1.5 sleep()方法"></a>1.5 sleep()方法</h2><h2 id="1-6-getId-方法"><a href="#1-6-getId-方法" class="headerlink" title="1.6 getId()方法"></a>1.6 getId()方法</h2><h2 id="1-7-停止线程"><a href="#1-7-停止线程" class="headerlink" title="1.7 停止线程"></a>1.7 停止线程</h2><h2 id="1-8-暂停线程"><a href="#1-8-暂停线程" class="headerlink" title="1.8 暂停线程"></a>1.8 暂停线程</h2><h2 id="1-9-yield方法"><a href="#1-9-yield方法" class="headerlink" title="1.9 yield方法"></a>1.9 yield方法</h2><h2 id="1-10-线程的优先级"><a href="#1-10-线程的优先级" class="headerlink" title="1.10 线程的优先级"></a>1.10 线程的优先级</h2><h2 id="1-11-守护线程"><a href="#1-11-守护线程" class="headerlink" title="1.11 守护线程"></a>1.11 守护线程</h2><h1 id="2-对象及变量的并发访问"><a href="#2-对象及变量的并发访问" class="headerlink" title="2 对象及变量的并发访问"></a>2 对象及变量的并发访问</h1><h2 id="2-1-synchronized同步方法"><a href="#2-1-synchronized同步方法" class="headerlink" title="2.1 synchronized同步方法"></a>2.1 synchronized同步方法</h2><h2 id="2-2-synchronized同步语句块"><a href="#2-2-synchronized同步语句块" class="headerlink" title="2.2 synchronized同步语句块"></a>2.2 synchronized同步语句块</h2><h2 id="2-3-volatile关键字"><a href="#2-3-volatile关键字" class="headerlink" title="2.3 volatile关键字"></a>2.3 volatile关键字</h2><h1 id="3-线程间通信"><a href="#3-线程间通信" class="headerlink" title="3 线程间通信"></a>3 线程间通信</h1><h1 id="4-Lock的使用"><a href="#4-Lock的使用" class="headerlink" title="4 Lock的使用"></a>4 Lock的使用</h1><h1 id="5-定时器Timer"><a href="#5-定时器Timer" class="headerlink" title="5 定时器Timer"></a>5 定时器Timer</h1><h1 id="6-单例模式与多线程"><a href="#6-单例模式与多线程" class="headerlink" title="6 单例模式与多线程"></a>6 单例模式与多线程</h1><h1 id="7-拾遗增补"><a href="#7-拾遗增补" class="headerlink" title="7 拾遗增补"></a>7 拾遗增补</h1>]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>通用型支付系统</title>
    <url>/2020/11/19/%E9%80%9A%E7%94%A8%E5%9E%8B%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>通用型支付系统的实现</p>
<a id="more"></a>

<h1 id="一、系统概述"><a href="#一、系统概述" class="headerlink" title="一、系统概述"></a>一、系统概述</h1><p>下单–》支付</p>
<p><img src="/images/2020111901.png" alt="image-20201119114332792"></p>
<p>支付结果：</p>
<p><img src="/images/2020111902.png" alt="image-20201119114412609"></p>
<h1 id="二、数据库设计"><a href="#二、数据库设计" class="headerlink" title="二、数据库设计"></a>二、数据库设计</h1><ul>
<li><p>表关系</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020111903.png" alt="2020111903"></p>
</li>
<li><p>唯一索引</p>
</li>
<li><p>单索引及组合索引</p>
<p>加快查询速度</p>
<p>订单号，user_id来查</p>
</li>
<li><p>时间戳</p>
</li>
</ul>
<h1 id="三、支付系统"><a href="#三、支付系统" class="headerlink" title="三、支付系统"></a>三、支付系统</h1><p>消息队列MQ应用：业务解耦，实现支付高性能</p>
<h2 id="1-支付知识普及"><a href="#1-支付知识普及" class="headerlink" title="1.支付知识普及"></a>1.支付知识普及</h2><h3 id="1-1-支付场景"><a href="#1-1-支付场景" class="headerlink" title="1.1 支付场景"></a>1.1 支付场景</h3><h4 id="微信支付场景"><a href="#微信支付场景" class="headerlink" title="微信支付场景"></a>微信支付场景</h4><p><img src="/images/2020111905.png" alt="image-20201124185915599"></p>
<p><strong>付款码支付：</strong>主要用于商户收银员用扫码设备扫描用户的条码/二维码支付。超市中很常见</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=5_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=5_1</a></p>
<p><strong>JSAPI支付：</strong>商户已有H5商城网站，用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1</a></p>
<p><strong>Native支付：</strong>用户扫描商户展示在各种场景的二维码进行支付。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p>
<p><strong>APP支付：</strong>适用于商户在移动端APP中集成微信支付功能。</p>
<p>商户APP调用微信提供的SDK调用微信支付模块，商户APP会跳转到微信中完成支付，支付完后跳回到商户APP内，最后展示支付结果。目前微信支付支持手机系统有：IOS（苹果）、Android（安卓）和WP（Windows Phone）。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1</a></p>
<p><strong>H5支付：</strong>是指商户在微信客户端外的移动端网页展示商品或服务，用户在前述页面确认使用微信支付时，商户发起本服务呼起微信客户端进行支付。</p>
<p>主要用于触屏版的手机浏览器请求微信支付的场景。可以方便的从外部浏览器唤起微信支付。</p>
<p><strong>提醒：</strong>H5支付不建议在APP端使用，如需要在APP中使用微信支付，请接APP支付</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1</a></p>
<p><strong>小程序支付：</strong>如果开发者已做过JSAPI或JSSDK调起微信支付，接入小程序支付非常相似，以下是三种接入方式的对比：</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1</a></p>
<p><strong>刷脸支付：</strong><a href="https://pay.weixin.qq.com/wiki/doc/wxfacepay/" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/wxfacepay/</a></p>
<h4 id="支付宝支付场景"><a href="#支付宝支付场景" class="headerlink" title="支付宝支付场景"></a>支付宝支付场景</h4><p>支付宝支付和微信支付大致相似，平时用的最多的也就是<strong>当面付</strong></p>
<p><img src="/images/2020111906.png" alt="image-20201129112417755"></p>
<p>官方文档：<a href="https://opendocs.alipay.com/open/194/105072" target="_blank" rel="noopener">https://opendocs.alipay.com/open/194/105072</a></p>
<h3 id="1-2-名词解释"><a href="#1-2-名词解释" class="headerlink" title="1.2 名词解释"></a>1.2 名词解释</h3><h4 id="微信："><a href="#微信：" class="headerlink" title="微信："></a>微信：</h4><p><a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=2_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=2_2</a></p>
<h4 id="支付宝："><a href="#支付宝：" class="headerlink" title="支付宝："></a>支付宝：</h4><table>
<thead>
<tr>
<th>配置参数</th>
<th>示例值解释</th>
<th>获取方式/示例值</th>
</tr>
</thead>
<tbody><tr>
<td>URL</td>
<td>支付宝网关（固定）</td>
<td><a href="https://openapi.alipay.com/gateway.do" target="_blank" rel="noopener">https://openapi.alipay.com/gateway.do</a></td>
</tr>
<tr>
<td>APPID</td>
<td>APPID 即创建应用后生成</td>
<td>获取见上方 创建应用</td>
</tr>
<tr>
<td>APP_PRIVATE_KEY</td>
<td>开发者私钥，由开发者自己生成</td>
<td>获取见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>FORMAT</td>
<td>参数返回格式，只支持 json</td>
<td>json（固定）</td>
</tr>
<tr>
<td>CHARSET</td>
<td>编码集，支持 GBK/UTF-8</td>
<td>开发者根据实际工程编码配置</td>
</tr>
<tr>
<td>ALIPAY_PUBLIC_KEY</td>
<td>支付宝公钥，由支付宝生成</td>
<td>获取详见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>SIGN_TYPE</td>
<td>商户生成签名字符串所使用的签名算法类型，目前支持 RSA2 和 RSA，推荐使用 RSA2</td>
<td>RSA2</td>
</tr>
</tbody></table>
<p>时序图：</p>
<p><img src="/images/2020111907.png" alt="电脑网站支付.png"></p>
<h3 id="1-3-同步-异步支付"><a href="#1-3-同步-异步支付" class="headerlink" title="1.3 同步/异步支付"></a>1.3 同步/异步支付</h3><blockquote>
<p><a href="https://blog.csdn.net/shiyong1949/article/details/80854656" target="_blank" rel="noopener">https://blog.csdn.net/shiyong1949/article/details/80854656</a></p>
</blockquote>
<p>异步与同步的区别简而言之就是一个需要等待，一个不需要等待。同步固然是好，但是涉及到支付金钱等方面还是要以安全为主。所以支付以异步为准。</p>
<h2 id="2-通用型支付系统开发"><a href="#2-通用型支付系统开发" class="headerlink" title="2.通用型支付系统开发"></a>2.通用型支付系统开发</h2><p><img src="/images/2020111908.png" alt="image-20201124194214540"></p>
<p>参考支付demo</p>
<p><a href="https://github.com/Pay-Group/best-pay-sdk" target="_blank" rel="noopener">https://github.com/Pay-Group/best-pay-sdk</a></p>
<p><a href="https://github.com/Pay-Group/best-pay-demo" target="_blank" rel="noopener">https://github.com/Pay-Group/best-pay-demo</a></p>
<h3 id="2-1-SpringBoot项目初始化"><a href="#2-1-SpringBoot项目初始化" class="headerlink" title="2.1 SpringBoot项目初始化"></a>2.1 SpringBoot项目初始化</h3><p>maven：3.6.3</p>
<p>jdk:1.8</p>
<p>springboot2.1.7</p>
<h3 id="2-2-对接微信Native支付"><a href="#2-2-对接微信Native支付" class="headerlink" title="2.2 对接微信Native支付"></a>2.2 对接微信Native支付</h3><p>微信支付我实现的是Native支付，Native支付有两种模式。模式二与模式一相比，流程更为简单，不依赖设置的回调支付URL。</p>
<p>商户后台系统先调用微信支付的统一下单接口，微信后台系统返回链接参数code_url，商户后台系统将code_url值生成<strong>二维码</strong>图片，用户使用微信客户端扫码后发起支付。</p>
<p><strong>微信Native支付</strong>：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p>
<p><strong>模式二</strong>：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5</a></p>
<p><strong>注意：code_url有效期为2小时</strong>，过期后扫码不能再发起支付。</p>
<p>生成二维码所需参数列表</p>
<p><img src="/images/2020111909.png" alt="image-20201125160437833"></p>
<p>商户提供的支付回调URL（<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_3" target="_blank" rel="noopener">回调地址设置</a>）需要实现以下功能：接收用户扫码后微信支付系统发送的数据，根据接收的数据生成支付订单，调用【<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">统一下单API</a>】提交支付交易。</p>
<p>输入参数：</p>
<p><img src="/images/2020111910.png" alt="image-20201125160553821"></p>
<p>输出参数：</p>
<p><img src="/images/2020111911.png" alt="image-20201125160658048"></p>
<h3 id="2-3-对接支付宝支付"><a href="#2-3-对接支付宝支付" class="headerlink" title="2.3 对接支付宝支付"></a>2.3 对接支付宝支付</h3><p>该项目支付宝实现的是电脑网站支付</p>
<p><strong>支付宝电脑网站支付</strong>：<a href="https://opendocs.alipay.com/open/270/105898" target="_blank" rel="noopener">https://opendocs.alipay.com/open/270/105898</a></p>
<p><strong>支付宝沙箱环境</strong>：<a href="https://opendocs.alipay.com/open/200/105311" target="_blank" rel="noopener">https://opendocs.alipay.com/open/200/105311</a></p>
<p>接入之前需要设置这些参数，</p>
<table>
<thead>
<tr>
<th>配置参数</th>
<th>示例值解释</th>
<th>获取方式/示例值</th>
</tr>
</thead>
<tbody><tr>
<td>URL</td>
<td>支付宝网关（固定）</td>
<td><a href="https://openapi.alipay.com/gateway.do" target="_blank" rel="noopener">https://openapi.alipay.com/gateway.do</a></td>
</tr>
<tr>
<td>APPID</td>
<td>APPID 即创建应用后生成</td>
<td>获取见上方 创建应用</td>
</tr>
<tr>
<td>APP_PRIVATE_KEY</td>
<td>开发者私钥，由开发者自己生成</td>
<td>获取见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>FORMAT</td>
<td>参数返回格式，只支持 json</td>
<td>json（固定）</td>
</tr>
<tr>
<td>CHARSET</td>
<td>编码集，支持 GBK/UTF-8</td>
<td>开发者根据实际工程编码配置</td>
</tr>
<tr>
<td>ALIPAY_PUBLIC_KEY</td>
<td>支付宝公钥，由支付宝生成</td>
<td>获取详见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>SIGN_TYPE</td>
<td>商户生成签名字符串所使用的签名算法类型，目前支持 RSA2 和 RSA，推荐使用 RSA2</td>
<td>RSA2</td>
</tr>
</tbody></table>
<p><strong>Java代码配置如下图所示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span><br><span class="line">appId: xxxxxxxx</span><br><span class="line"># 商户私钥，您的PKCS8格式RSA2私钥</span><br><span class="line">privateKey: xxxxxxx</span><br><span class="line"># 支付宝公钥,查看地址：https:&#x2F;&#x2F;openhome.com&#x2F;platform&#x2F;keyManage.htm 对应APPID下的支付宝公钥。</span><br><span class="line">publicKey: xxxxxxx</span><br><span class="line"># 服务器异步通知页面路径需http:&#x2F;&#x2F;格式的完整路径，不能加?id&#x3D;123这类自定义参数</span><br><span class="line">notifyUrl:  http:&#x2F;&#x2F;xutakf.natappfree.cc&#x2F;notify</span><br><span class="line"># 页面跳转同步通知页面路径 需http:&#x2F;&#x2F;格式的完整路径，不能加?id&#x3D;123这类自定义参数</span><br><span class="line">returnUrl: http:&#x2F;&#x2F;xutakf.natappfree.cc&#x2F;pay&#x2F;success</span><br><span class="line"># 签名方式</span><br><span class="line">signType: RSA2</span><br><span class="line"># 字符编码格式</span><br><span class="line">charset: utf-8</span><br><span class="line"># 支付宝网关</span><br><span class="line">gatewayUrl: https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do</span><br></pre></td></tr></table></figure>



<p>时序图：</p>
<p><img src="/images/2020111912.png" alt="电脑网站支付.png"></p>
<p>从图中可以大概知道思路，</p>
<p>首先发起支付：商户（商户应用私钥签名）–》支付宝（商户应用公钥验签）</p>
<p>异步通知：支付宝（支付宝私钥签名）–》商户（支付宝公钥验签）</p>
<h3 id="2-4-支付功能创建"><a href="#2-4-支付功能创建" class="headerlink" title="2.4 支付功能创建"></a>2.4 支付功能创建</h3><p>控制层：</p>
<p><strong>创建订单：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PayService payService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">create</span><span class="params">(@RequestParam(<span class="string">"orderId"</span>)</span>String orderId,</span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(<span class="string">"amount"</span>)</span>BigDecimal amount,@<span class="title">RequestParam</span><span class="params">(<span class="string">"payType"</span>)</span> BestPayTypeEnum bestPayTypeEnum)</span>&#123;</span><br><span class="line"></span><br><span class="line">        PayResponse response = payService.create(orderId,amount,bestPayTypeEnum);</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bestPayTypeEnum == BestPayTypeEnum.WXPAY_NATIVE)&#123;</span><br><span class="line">            map.put(<span class="string">"codeUrl"</span>,response.getCodeUrl());</span><br><span class="line">            map.put(<span class="string">"orderId"</span>,orderId);</span><br><span class="line">            map.put(<span class="string">"returnUrl"</span>, wxPayConfig.getReturnUrl());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"createForWxNative"</span>,map);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (bestPayTypeEnum == BestPayTypeEnum.ALIPAY_PC)&#123;</span><br><span class="line">            map.put(<span class="string">"body"</span>,response.getBody());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"createForAliPayPc"</span>,map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不支持的支付类型"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>业务层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PayResponse <span class="title">create</span><span class="params">(String orderId, BigDecimal amount, BestPayTypeEnum bestPayTypeEnum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据库</span></span><br><span class="line">    PayInfo payInfo = <span class="keyword">new</span> PayInfo(Long.parseLong(orderId),</span><br><span class="line">            PayPlatformEnum.getByBestPayTypeEnum(bestPayTypeEnum).getCode(),</span><br><span class="line">            OrderStatusEnum.NOTPAY.name(),</span><br><span class="line">            amount);</span><br><span class="line">    payInfoMapper.insertSelective(payInfo);</span><br><span class="line"></span><br><span class="line">    PayRequest payRequest = <span class="keyword">new</span> PayRequest();</span><br><span class="line">    payRequest.setOrderId(orderId);</span><br><span class="line">    payRequest.setOrderAmount(amount.doubleValue());</span><br><span class="line">    payRequest.setOrderName(<span class="string">"测试支付功能"</span>);</span><br><span class="line">    payRequest.setPayTypeEnum(bestPayTypeEnum);</span><br><span class="line"></span><br><span class="line">    PayResponse payResponse = bestPayService.pay(payRequest);</span><br><span class="line">    log.info(<span class="string">"response=&#123;&#125;"</span>,payResponse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="2-5-支付结果异步通知"><a href="#2-5-支付结果异步通知" class="headerlink" title="2.5  支付结果异步通知"></a>2.5  支付结果异步通知</h3><p>异步结果校验主要有四步：</p>
<p>1.签名校验</p>
<p>2.金额校验</p>
<p>3.修改订单支付状态</p>
<p>4.告诉微信/支付宝不要再通知了</p>
<p><strong>控制层</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;notify&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String asyncNotify(@RequestBody String notifyData)&#123;</span><br><span class="line">    log.info(&quot;notifyData&#123;&#125;&quot;,notifyData);</span><br><span class="line">    return payService.asyncNotify(notifyData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>业务层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">asyncNotify</span><span class="params">(String notifyDate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.签名校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PayResponse payResponse = bestPayService.asyncNotify(notifyDate);</span><br><span class="line">    log.info(<span class="string">"payResponse=&#123;&#125;"</span>,payResponse);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.金额校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PayInfo payInfo = payInfoMapper.selectByOrderNo(Long.parseLong(payResponse.getOrderId()));</span><br><span class="line">    <span class="keyword">if</span> (payInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//告警</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"通过orderNo查询到的结果是null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.修改订单支付状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//如果订单支付状态不是"已支付"</span></span><br><span class="line">    <span class="keyword">if</span> (!payInfo.getPlatformStatus().equals(OrderStatusEnum.SUCCESS.name())) &#123;</span><br><span class="line">        <span class="comment">//Double类型比较大小，精度。1.00  1.0</span></span><br><span class="line">        <span class="keyword">if</span> (payInfo.getPayAmount().compareTo(BigDecimal.valueOf(payResponse.getOrderAmount())) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//告警</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异步通知中的金额和数据库里的不一致，orderNo="</span> + payResponse.getOrderId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 修改订单支付状态</span></span><br><span class="line">        payInfo.setPlatformStatus(OrderStatusEnum.SUCCESS.name());</span><br><span class="line">        payInfo.setPlatformNumber(payResponse.getOutTradeNo());</span><br><span class="line"></span><br><span class="line">        payInfoMapper.updateByPrimaryKeySelective(payInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO pay发送MQ消息，mall接受MQ消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.告诉微信/支付宝不要再通知了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (payResponse.getPayPlatformEnum() == BestPayPlatformEnum.WX) &#123;</span><br><span class="line">        <span class="comment">//4. 告诉微信不要再通知了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;xml&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (payResponse.getPayPlatformEnum() == BestPayPlatformEnum.ALIPAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异步通知中错误的支付平台"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-6-支付与数据库"><a href="#2-6-支付与数据库" class="headerlink" title="2.6 支付与数据库"></a>2.6 支付与数据库</h3><p>支付数据肯定是要存储到数据库中的</p>
<p><img src="/images/2020111913.png" alt="image-20201203101112529"></p>
<p>数据：</p>
<p><img src="/images/2020111914.png" alt="image-20201203101112529"></p>
<h3 id="2-7-规范配置"><a href="#2-7-规范配置" class="headerlink" title="2.7 规范配置"></a>2.7 规范配置</h3><p>通过yml文件写配置信息，然后在写一个config类将配置整合，这样可以解耦合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"alipay"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wxpay"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mchKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BestPayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> WxAccountConfig wxAccountConfig;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AlipayAccountConfig alipayAccountConfig;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BestPayService <span class="title">bestPayServiceByWX</span><span class="params">(WxPayConfig wxPayConfig)</span> </span>&#123;</span><br><span class="line">      AliPayConfig aliPayConfig = <span class="keyword">new</span> AliPayConfig();</span><br><span class="line">      aliPayConfig.setAppId(alipayAccountConfig.getAppId());</span><br><span class="line">      aliPayConfig.setPrivateKey(alipayAccountConfig.getPrivateKey());</span><br><span class="line">      aliPayConfig.setAliPayPublicKey(alipayAccountConfig.getPublicKey());</span><br><span class="line">      aliPayConfig.setNotifyUrl(alipayAccountConfig.getNotifyUrl());</span><br><span class="line">      aliPayConfig.setReturnUrl(alipayAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      BestPayServiceImpl bestPayService = <span class="keyword">new</span> BestPayServiceImpl();</span><br><span class="line">      bestPayService.setWxPayConfig(wxPayConfig);</span><br><span class="line">      bestPayService.setAliPayConfig(aliPayConfig);</span><br><span class="line">      <span class="keyword">return</span> bestPayService;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> AliPayConfig <span class="title">aliPayConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">      AliPayConfig aliPayConfig = <span class="keyword">new</span> AliPayConfig();</span><br><span class="line"></span><br><span class="line">      aliPayConfig.setAppId(alipayAccountConfig.getAppId());</span><br><span class="line">      aliPayConfig.setPrivateKey(alipayAccountConfig.getPrivateKey());</span><br><span class="line">      aliPayConfig.setAliPayPublicKey(alipayAccountConfig.getPublicKey());</span><br><span class="line">      aliPayConfig.setNotifyUrl(alipayAccountConfig.getNotifyUrl());</span><br><span class="line">      aliPayConfig.setReturnUrl(alipayAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> aliPayConfig;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WxPayConfig <span class="title">wxPayConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      WxPayConfig wxPayConfig = <span class="keyword">new</span> WxPayConfig();</span><br><span class="line"></span><br><span class="line">      wxPayConfig.setAppId(wxAccountConfig.getAppId());</span><br><span class="line">      wxPayConfig.setMchId(wxAccountConfig.getMchId());</span><br><span class="line">      wxPayConfig.setMchKey(wxAccountConfig.getMchKey());</span><br><span class="line"></span><br><span class="line">      wxPayConfig.setNotifyUrl(wxAccountConfig.getNotifyUrl());</span><br><span class="line">      wxPayConfig.setReturnUrl(wxAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> wxPayConfig;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-内网穿透"><a href="#3-内网穿透" class="headerlink" title="3.内网穿透"></a>3.内网穿透</h2><p>可以通过内网穿透的方式调试支付功能</p>
<p><a href="https://natapp.cn/article/natapp_newbie" target="_blank" rel="noopener">https://natapp.cn/article/natapp_newbie</a></p>
]]></content>
      <categories>
        <category>支付系统</category>
      </categories>
      <tags>
        <tag>Native支付</tag>
        <tag>支付宝PC支付</tag>
      </tags>
  </entry>
  <entry>
    <title>读《解读基金：我的投资观与实践》</title>
    <url>/2020/12/07/%E8%AF%BB%E3%80%8A%E8%A7%A3%E8%AF%BB%E5%9F%BA%E9%87%91%EF%BC%9A%E6%88%91%E7%9A%84%E6%8A%95%E8%B5%84%E8%A7%82%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/</url>
    <content><![CDATA[<p>读《解读基金：我的投资观与实践》总结</p>
<a id="more"></a>

<h1 id="第一章：投资的准备"><a href="#第一章：投资的准备" class="headerlink" title="第一章：投资的准备"></a>第一章：投资的准备</h1><p>1.咱们该投资吗</p>
<p>2.什么是开放式基金</p>
<p>3.态度决定一切</p>
<h1 id="第二章-三部曲之一：投资目标的确定"><a href="#第二章-三部曲之一：投资目标的确定" class="headerlink" title="第二章 三部曲之一：投资目标的确定"></a>第二章 三部曲之一：投资目标的确定</h1><p>1.基金的风险是什么</p>
<p>2.拿多少钱来投资</p>
<p>3.让时间成为朋友</p>
<blockquote>
<p>一个25岁才开始工作的年轻人，如果他试图在60岁退休的时候有100万元的资产，他只需用一个非常简单的办法：如果按照<strong>平均年收益12%</strong>来计算，他只要<strong>每月投资175元</strong>，那在60岁的时候，他的投资账户上就有101万元，而实际投入资本只是7.35万元。但对一个40岁的人来讲，要每月投资1000元，在同样的收益情况下，才能在60岁的时候有97万元，而他的实际投资成本却是24万元。为了达到同样的目标，多拿出来了14万元，多付出了两倍的成本，而这一切，仅仅是因为投资晚了15年。<br>如果进行一次性投资，差距会更大。25岁的时候，一次性投资2万元，按12%的复利增长，60岁的时候，会有105万元；而如果在40岁的时候才开始投2万元，60岁的时候，只有19万元。差距达到4倍多。</p>
<p>在汇丰晋信基金公司推出的小册子——《十大投资金律》中有一个故事：陈先生20岁起<strong>每个月投资500元</strong>买基金。假设平均<strong>年报酬率是10%</strong>，他投资7年就不再扣款，然后让本金和获利一路成长，到60岁退休的时候，本利已达162万元。王先生则26岁时才开始投资，同样每个月投入500元，是10%的年报酬率。他整整花了33年持续扣款，到60岁时本利累计才154万元！相比之下，王先生投资才晚了7年，却要追赶一辈子。</p>
<p>上面几个案例都说明了一个问题，<strong>投资开始得越早，最后的收益就越多</strong>。或者说投资开始得越早，咱们为了达到同样的收益，付出的成本就越小。而且，两种情况的差距是如此之大，简直是不算不知道，一算吓一跳。<br><strong>在基金的风险里面，我们已经知道，随着时间的推移，投资的风险越来越小，但短期波动永远都是存在的。</strong></p>
</blockquote>
<p>4.复利计算的“72法则”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“72法则”是计算翻番的时间</span><br><span class="line">“115法则”是计算3倍所耗费的时间</span><br></pre></td></tr></table></figure>

<p>简而言之就是<strong>72/年收益率</strong></p>
<blockquote>
<p>很多人都觉得复利的计算很麻烦，的确也是这样。如果年收益是x%，那n年以后的收益是（1+x%）n。这样，没有计算器，恐怕就很难计算了。<br>前面说过的“72法则”经常用来做复利的近似计算，用来计算在给定年收益的情况下，大约需要多少年，你的投资才会翻倍。<br>举例说明：<br>如年收益是5%，那72/5=14.4，也就是约14.4年可以将投资翻番（如果用标准公式计算，结果为14.2年）；<br>如果年收益为7%，72/7=10.3，也就是约10.3年投资可以翻一番（用公式计算为10.24年）；<br>如果年收益为10%，72/10=7.2，也就是约7.2年投资可以翻一番（用公式计算为7.27年）；<br>……<br>如果年收益为x%，那翻番需要的年数就是72/x。这就是所谓的“72法则”。<br>这样很容易算出如果年收益为12%，翻番需用的年数就是6年；而如果收益是15%，翻番的时间就是5年。这样也很容易算出，如果收益是12%，那18年就可以翻三番，也就是8倍；如果收益是15%，那20年可以翻四番，也就是16倍。<br>还有一个“115法则”。“72法则”是计算翻番的时间，而“115法则”是计算1000元变成3000元所耗费的时间，也就是变成3倍所耗费的时间。计算方法还是一样，115/x就是本金变成3倍所耗费的年数。如收益是10%，那1000元变成3000元所耗费的时间就是115/10=11.5年。<br>表2-1对照了在一个特定利率的情况下，精确计算投资翻番的实际年限和“72法则”计算的结果。从中可以看出，对于年增长率很大或很小的复利，误差就比较大了，但作为估算的参照目标是没有问题的</p>
</blockquote>
<p><img src="/images/2020120701.png" alt="img"></p>
<h1 id="第三章-“三部曲”之二：基金品种的选择"><a href="#第三章-“三部曲”之二：基金品种的选择" class="headerlink" title="第三章 “三部曲”之二：基金品种的选择"></a>第三章 “三部曲”之二：基金品种的选择</h1><p>最好的基金评价网站—–<strong>晨星网</strong></p>
<p>买基金要先选择基金公司—–》然后是基金经理—–》最后才是基金</p>
<h1 id="第四章-“三部曲”之三：操作方法的实施"><a href="#第四章-“三部曲”之三：操作方法的实施" class="headerlink" title="第四章 “三部曲”之三：操作方法的实施"></a>第四章 “三部曲”之三：操作方法的实施</h1><p>1.红利再投资</p>
<p>2.不要预测市场和波段操作</p>
<p>3.长期持有才是王道</p>
<p>4.什么时候赎回基金没有特定的要求，最好自己定一个目标，达到了目标再赎回。比如定投基金是为了自己退休，那么长期持有30年也没有什么坏处。</p>
<h1 id="第五章-我的投资实践"><a href="#第五章-我的投资实践" class="headerlink" title="第五章 我的投资实践"></a>第五章 我的投资实践</h1>]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>解读基金</tag>
      </tags>
  </entry>
  <entry>
    <title>通用型支付系统接入电商平台</title>
    <url>/2020/12/11/%E9%80%9A%E7%94%A8%E5%9E%8B%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%85%A5%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>一个典型的电商平台，简要记录一下，，，主要是为了测试支付系统</p>
<p>主要分为以下5个模块</p>
<ol>
<li>用户模块</li>
<li>分类模块</li>
<li>购物车模块</li>
<li>收货地址模块</li>
<li>订单模块</li>
</ol>
<a id="more"></a>

<blockquote>
<p>项目地址：<a href="https://github.com/liuurick/mall-pay/tree/master/mall" target="_blank" rel="noopener">https://github.com/liuurick/mall-pay/tree/master/mall</a></p>
</blockquote>
<h1 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h1><p>用户模块开发中的几点总结：</p>
<h2 id="1-MD5加密的方法"><a href="#1-MD5加密的方法" class="headerlink" title="1.MD5加密的方法"></a>1.MD5加密的方法</h2><p>MD5摘要算法(Spring自带)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user.setPassword(DigestUtils.md5DigestAsHex(</span><br><span class="line">        user.getPassword().getBytes(StandardCharsets.UTF_8)</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<h2 id="2-单元测试：service层"><a href="#2-单元测试：service层" class="headerlink" title="2.单元测试：service层"></a>2.单元测试：service层</h2><p>单元测试的时候一般只需要测试service层，可以在idea中直接右键goto Test—&gt;create new Test</p>
<p>对于系统项目的开发，开发步骤一般为dao–&gt;service–&gt;controller，所以没有必要测试其他两层。</p>
<h2 id="3-Mybatis打印SQL语句"><a href="#3-Mybatis打印SQL语句" class="headerlink" title="3.Mybatis打印SQL语句"></a>3.Mybatis打印SQL语句</h2><p>控制台配置 Mybatis打印SQL语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>



<h2 id="4-错误状态码使用枚举"><a href="#4-错误状态码使用枚举" class="headerlink" title="4.错误状态码使用枚举"></a>4.错误状态码使用枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum &#123;</span><br><span class="line"></span><br><span class="line">	ERROR(-<span class="number">1</span>, <span class="string">"服务端错误"</span>),</span><br><span class="line"></span><br><span class="line">	SUCCESS(<span class="number">0</span>, <span class="string">"成功"</span>),</span><br><span class="line"></span><br><span class="line">	PASSWORD_ERROR(<span class="number">1</span>,<span class="string">"密码错误"</span>),</span><br><span class="line"></span><br><span class="line">	USERNAME_EXIST(<span class="number">2</span>, <span class="string">"用户名已存在"</span>),</span><br><span class="line"></span><br><span class="line">	PARAM_ERROR(<span class="number">3</span>, <span class="string">"参数错误"</span>),</span><br><span class="line"></span><br><span class="line">	EMAIL_EXIST(<span class="number">4</span>, <span class="string">"邮箱已存在"</span>),</span><br><span class="line"></span><br><span class="line">	NEED_LOGIN(<span class="number">10</span>, <span class="string">"用户未登录, 请先登录"</span>),</span><br><span class="line"></span><br><span class="line">	USERNAME_OR_PASSWORD_ERROR(<span class="number">11</span>, <span class="string">"用户名或密码错误"</span>),</span><br><span class="line"></span><br><span class="line">	PRODUCT_OFF_SALE_OR_DELETE(<span class="number">12</span>, <span class="string">"商品下架或删除"</span>),</span><br><span class="line"></span><br><span class="line">	PRODUCT_NOT_EXIST(<span class="number">13</span>, <span class="string">"商品不存在"</span>),</span><br><span class="line"></span><br><span class="line">	PROODUCT_STOCK_ERROR(<span class="number">14</span>, <span class="string">"库存不正确"</span>),</span><br><span class="line"></span><br><span class="line">	CART_PRODUCT_NOT_EXIST(<span class="number">15</span>, <span class="string">"购物车里无此商品"</span>),</span><br><span class="line"></span><br><span class="line">	DELETE_SHIPPING_FAIL(<span class="number">16</span>, <span class="string">"删除收货地址失败"</span>),</span><br><span class="line"></span><br><span class="line">	SHIPPING_NOT_EXIST(<span class="number">17</span>, <span class="string">"收货地址不存在"</span>),</span><br><span class="line"></span><br><span class="line">	CART_SELECTED_IS_EMPTY(<span class="number">18</span>, <span class="string">"请选择商品后下单"</span>),</span><br><span class="line"></span><br><span class="line">	ORDER_NOT_EXIST(<span class="number">19</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line"></span><br><span class="line">	ORDER_STATUS_ERROR(<span class="number">20</span>, <span class="string">"订单状态有误"</span>),</span><br><span class="line"></span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">	Integer code;</span><br><span class="line"></span><br><span class="line">	String desc;</span><br><span class="line"></span><br><span class="line">	ResponseEnum(Integer code, String desc) &#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-session和cookie"><a href="#5-session和cookie" class="headerlink" title="5.session和cookie"></a>5.session和cookie</h2><blockquote>
<p><a href="https://segmentfault.com/a/1190000017831088" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017831088</a></p>
</blockquote>
<p>对于cookie与session，第一印象就是session是服务器端技术，cookie是客户端技术。一般情况下，由于cookie具备安全性问题和很多游览器禁用cookie，我们平时使用session更广泛一些。但是其实session与cookie不分家，sessionId存储在cookie中。</p>
<p>另外还有一个重点，就是cookie跨域问题，localhost与127.0.0.1就是跨域</p>
<h2 id="6-统一判断登录状态-拦截器"><a href="#6-统一判断登录状态-拦截器" class="headerlink" title="6.统一判断登录状态-拦截器"></a>6.统一判断登录状态-拦截器</h2><blockquote>
<p>过滤器+监听器+拦截器+AOP 比较:<a href="https://segmentfault.com/a/1190000021823564" target="_blank" rel="noopener">https://segmentfault.com/a/1190000021823564</a></p>
</blockquote>
<p>对于拦截器，主要有两种技术：</p>
<blockquote>
<p>Interceptor 基于http的url 比较简单</p>
<p>AOP 基于包名 ，功能比较强大</p>
</blockquote>
<p>这里使用Interceptor实现:</p>
<p><strong>InterceptorConfig:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> UserLoginInterceptor())</span><br><span class="line">				.addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">				.excludePathPatterns(<span class="string">"/error"</span>, <span class="string">"/user/login"</span>, <span class="string">"/user/register"</span>, <span class="string">"/categories"</span>, <span class="string">"/products"</span>, <span class="string">"/products/*"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserLoginInterceptor:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * true表示继续流程，false表示中断</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      log.info(<span class="string">"preHandle..."</span>);</span><br><span class="line">      User user = (User) request.getSession().getAttribute(MallConst.CURRENT_USER);</span><br><span class="line">      <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">         log.info(<span class="string">"user=null"</span>);</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> UserLoginException();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="分类模块"><a href="#分类模块" class="headerlink" title="分类模块"></a>分类模块</h1><blockquote>
<p>对于商品分类的遍历有两种方法：</p>
<p>1.先查出1级目录–》查其子目录，一直查到的是null</p>
<p>2.查出目录–》查父目录，一直查到parent_id=0</p>
</blockquote>
<p>这里使用的是第1种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseVo&lt;List&lt;CategoryVo&gt;&gt; selectAll() &#123;</span><br><span class="line">    List&lt;Category&gt; categories = categoryMapper.selectAll();</span><br><span class="line"></span><br><span class="line">    List&lt;CategoryVo&gt; categoryVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//查出parent_id=0</span></span><br><span class="line">    <span class="keyword">for</span> (Category category: categories) &#123;</span><br><span class="line">        <span class="keyword">if</span> (categories.equals(ROOT_PARENT_ID))&#123;</span><br><span class="line">            CategoryVo categoryVo = <span class="keyword">new</span> CategoryVo();</span><br><span class="line">            BeanUtils.copyProperties(category,categoryVo);</span><br><span class="line">            categoryVoList.add(categoryVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> ResponseVo.success(categoryVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>遍历子分类，用到了递归思想</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findSubCategory</span><span class="params">(List&lt;CategoryVo&gt; categoryVoList, List&lt;Category&gt; categories)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (CategoryVo categoryVo : categoryVoList) &#123;</span><br><span class="line">        List&lt;CategoryVo&gt; subCategoryVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Category category : categories) &#123;</span><br><span class="line">            <span class="comment">//如果查到内容，设置subCategory, 继续往下查</span></span><br><span class="line">            <span class="keyword">if</span> (categoryVo.getId().equals(category.getParentId())) &#123;</span><br><span class="line">                CategoryVo subCategoryVo = category2CategoryVo(category);</span><br><span class="line">                subCategoryVoList.add(subCategoryVo);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//排序</span></span><br><span class="line">            subCategoryVoList.sort(Comparator.comparing(CategoryVo::getSortOrder).reversed());</span><br><span class="line">            categoryVo.setSubCategories(subCategoryVoList);</span><br><span class="line"></span><br><span class="line">            findSubCategory(subCategoryVoList, categories);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用lambda + stream对代码进行优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVo&lt;List&lt;CategoryVo&gt;&gt; selectAll() &#123;</span><br><span class="line">        List&lt;Category&gt; categories = categoryMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda + stream</span></span><br><span class="line">        List&lt;CategoryVo&gt; categoryVoList = categories.stream()</span><br><span class="line">                .filter(e -&gt; e.getParentId().equals(ROOT_PARENT_ID))</span><br><span class="line">                .map(<span class="keyword">this</span>::category2CategoryVo)</span><br><span class="line">                .sorted(Comparator.comparing(CategoryVo::getSortOrder).reversed())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询子目录</span></span><br><span class="line">        findSubCategory(categoryVoList, categories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseVo.success(categoryVoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h1 id="商品模块"><a href="#商品模块" class="headerlink" title="商品模块"></a>商品模块</h1><p>分页功能：</p>
<p>基于SpringBoot集成的mybatis-pagehelper进行分页实践。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;PageInfo&gt; <span class="title">list</span><span class="params">(Integer categoryId, Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; categoryIdSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (categoryId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        categoryService.findSubCategoryId(categoryId, categoryIdSet);</span><br><span class="line">        categoryIdSet.add(categoryId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页功能</span></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    List&lt;Product&gt; productList = productMapper.selectByCategoryIdSet(categoryIdSet);</span><br><span class="line">    List&lt;ProductVo&gt; productVoList = productList.stream()</span><br><span class="line">        .map(e -&gt; &#123;</span><br><span class="line">            ProductVo productVo = <span class="keyword">new</span> ProductVo();</span><br><span class="line">            BeanUtils.copyProperties(e, productVo);</span><br><span class="line">            <span class="keyword">return</span> productVo;</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    PageInfo pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(productList);</span><br><span class="line">    pageInfo.setList(productVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseVo.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>POJO、BO、VO的关系与解决思路</p>
<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><p>基于Redis完成购物车开发，首先基于传统的String结构完成购物车开发，然后，进行优化重构，基于Hashset数据结构替换，最终实现高性能购物车</p>
<h2 id="商品添加"><a href="#商品添加" class="headerlink" title="商品添加"></a>商品添加</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;CartVo&gt; <span class="title">add</span><span class="params">(Integer uid, CartAddForm form)</span> </span>&#123;</span><br><span class="line">    Integer quantity = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(form.getProductId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (product == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品是否正常在售</span></span><br><span class="line">    <span class="keyword">if</span> (!product.getStatus().equals(ProductStatusEnum.ON_SALE.getCode())) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PRODUCT_OFF_SALE_OR_DELETE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (product.getStock() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PROODUCT_STOCK_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入到redis</span></span><br><span class="line">    <span class="comment">//key: cart_1</span></span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  = String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    Cart cart;</span><br><span class="line">    String value = opsForHash.get(redisKey, String.valueOf(product.getId()));</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        <span class="comment">//没有该商品, 新增</span></span><br><span class="line">        cart = <span class="keyword">new</span> Cart(product.getId(), quantity, form.getSelected());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//已经有了，数量+1</span></span><br><span class="line">        cart = gson.fromJson(value, Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        cart.setQuantity(cart.getQuantity() + quantity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.put(redisKey,</span><br><span class="line">            String.valueOf(product.getId()),</span><br><span class="line">            gson.toJson(cart));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品遍历"><a href="#商品遍历" class="headerlink" title="商品遍历"></a>商品遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;CartVo&gt; <span class="title">list</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  = String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line">    Map&lt;String, String&gt; entries = opsForHash.entries(redisKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> selectAll = <span class="keyword">true</span>;</span><br><span class="line">    Integer cartTotalQuantity = <span class="number">0</span>;</span><br><span class="line">    BigDecimal cartTotalPrice = BigDecimal.ZERO;</span><br><span class="line">    CartVo cartVo = <span class="keyword">new</span> CartVo();</span><br><span class="line">    List&lt;CartProductVo&gt; cartProductVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries.entrySet()) &#123;</span><br><span class="line">        Integer productId = Integer.valueOf(entry.getKey());</span><br><span class="line">        Cart cart = gson.fromJson(entry.getValue(), Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 需要优化，使用mysql里的in</span></span><br><span class="line">        Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">        <span class="keyword">if</span> (product != <span class="keyword">null</span>) &#123;</span><br><span class="line">            CartProductVo cartProductVo = <span class="keyword">new</span> CartProductVo(productId,</span><br><span class="line">                    cart.getQuantity(),</span><br><span class="line">                    product.getName(),</span><br><span class="line">                    product.getSubtitle(),</span><br><span class="line">                    product.getMainImage(),</span><br><span class="line">                    product.getPrice(),</span><br><span class="line">                    product.getStatus(),</span><br><span class="line">                    product.getPrice().multiply(BigDecimal.valueOf(cart.getQuantity())),</span><br><span class="line">                    product.getStock(),</span><br><span class="line">                    cart.getProductSelected()</span><br><span class="line">            );</span><br><span class="line">            cartProductVoList.add(cartProductVo);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!cart.getProductSelected()) &#123;</span><br><span class="line">                selectAll = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算总价(只计算选中的)</span></span><br><span class="line">            <span class="keyword">if</span> (cart.getProductSelected()) &#123;</span><br><span class="line">                cartTotalPrice = cartTotalPrice.add(cartProductVo.getProductTotalPrice());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cartTotalQuantity += cart.getQuantity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个没有选中，就不叫全选</span></span><br><span class="line">    cartVo.setSelectedAll(selectAll);</span><br><span class="line">    cartVo.setCartTotalQuantity(cartTotalQuantity);</span><br><span class="line">    cartVo.setCartTotalPrice(cartTotalPrice);</span><br><span class="line">    cartVo.setCartProductVoList(cartProductVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseVo.success(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品更新"><a href="#商品更新" class="headerlink" title="商品更新"></a>商品更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; update(Integer uid, Integer productId, CartUpdateForm form) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    String value &#x3D; opsForHash.get(redisKey, String.valueOf(productId));</span><br><span class="line">    if (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        &#x2F;&#x2F;没有该商品, 报错</span><br><span class="line">        return ResponseVo.error(ResponseEnum.CART_PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;已经有了，修改内容</span><br><span class="line">    Cart cart &#x3D; gson.fromJson(value, Cart.class);</span><br><span class="line">    if (form.getQuantity() !&#x3D; null</span><br><span class="line">            &amp;&amp; form.getQuantity() &gt;&#x3D; 0) &#123;</span><br><span class="line">        cart.setQuantity(form.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">    if (form.getSelected() !&#x3D; null) &#123;</span><br><span class="line">        cart.setProductSelected(form.getSelected());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.put(redisKey, String.valueOf(productId), gson.toJson(cart));</span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品删除"><a href="#商品删除" class="headerlink" title="商品删除"></a>商品删除</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; delete(Integer uid, Integer productId) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    String value &#x3D; opsForHash.get(redisKey, String.valueOf(productId));</span><br><span class="line">    if (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        &#x2F;&#x2F;没有该商品, 报错</span><br><span class="line">        return ResponseVo.error(ResponseEnum.CART_PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.delete(redisKey, String.valueOf(productId));</span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品的选择"><a href="#商品的选择" class="headerlink" title="商品的选择"></a>商品的选择</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; selectAll(Integer uid) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    for (Cart cart : listForCart(uid)) &#123;</span><br><span class="line">        cart.setProductSelected(true);</span><br><span class="line">        opsForHash.put(redisKey,</span><br><span class="line">                String.valueOf(cart.getProductId()),</span><br><span class="line">                gson.toJson(cart));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; unSelectAll(Integer uid) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    for (Cart cart : listForCart(uid)) &#123;</span><br><span class="line">        cart.setProductSelected(false);</span><br><span class="line">        opsForHash.put(redisKey,</span><br><span class="line">                String.valueOf(cart.getProductId()),</span><br><span class="line">                gson.toJson(cart));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="收货地址模块"><a href="#收货地址模块" class="headerlink" title="收货地址模块"></a>收货地址模块</h1><p>Spring数据绑定中的对象绑定。</p>
<h1 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h1><p>订单模块接收支付发送的MQ消息，MQ在业务解耦</p>
<p><strong>如何为支付预留扩展性</strong></p>
<blockquote>
<p>docker安装rabbitmq：<a href="https://liuurick.github.io/2020/07/27/Docker安装RabbitMQ/" target="_blank" rel="noopener">https://liuurick.github.io/2020/07/27/Docker%E5%AE%89%E8%A3%85RabbitMQ/</a></p>
</blockquote>
<p>1.引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.编写配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    rabbitmq:</span><br><span class="line">        addresses: 192.168.60.129</span><br><span class="line">        port: 5672</span><br><span class="line">        username: guest</span><br><span class="line">        password: guest</span><br></pre></td></tr></table></figure>



<p>在支付系统中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_PAY_NOTIFY = <span class="string">"payNotify"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO pay发送MQ消息，mall接受MQ消息</span></span><br><span class="line">amqpTemplate.convertAndSend(QUEUE_PAY_NOTIFY, <span class="keyword">new</span> Gson().toJson(payInfo));</span><br></pre></td></tr></table></figure>

<p>在商城系统中添加listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"payNotify"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayMsgListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【接收到消息】=&gt; &#123;&#125;"</span>, msg);</span><br><span class="line"></span><br><span class="line">        PayInfo payInfo = <span class="keyword">new</span> Gson().fromJson(msg, PayInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (payInfo.getPlatformStatus().equals(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">            <span class="comment">//修改订单里的状态</span></span><br><span class="line">            orderService.paid(payInfo.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>电商平台</category>
      </categories>
      <tags>
        <tag>电商平台</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙管理</title>
    <url>/2019/01/11/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>防火墙常用命令</p>
<a id="more"></a>

<h3 id="防火墙常用命令"><a href="#防火墙常用命令" class="headerlink" title="防火墙常用命令"></a>防火墙常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看状态：firewall-cmd --state </span><br><span class="line">启动：service firewall start</span><br><span class="line">关闭：service firewall stop</span><br><span class="line">重启防火墙：service firewall restart</span><br></pre></td></tr></table></figure>

<h3 id="端口管理"><a href="#端口管理" class="headerlink" title="端口管理"></a>端口管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看端口：firewall-cmd --permanent --list-ports</span><br><span class="line">查看哪些程序正在使用互联网：firewall-cmd --permanent --list-services</span><br><span class="line">添加端口：firewall-cmd --permanent --add-port&#x3D;8080-8085&#x2F;tcp</span><br><span class="line">加载设置：firewall-cmd --reload</span><br><span class="line">删除端口：firewall-cmd --permanent --remove-port&#x3D;8080-8085&#x2F;tcp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发工具</category>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>重定向与转发的理解</title>
    <url>/2018/04/21/%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>重定向（redirect）与转发（forward）</p>
<a id="more"></a>

<h3 id="解释一"><a href="#解释一" class="headerlink" title="解释一　　"></a>解释一　　</h3><p>一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：</p>
<p><strong>转发过程：</strong>客户浏览器发送http请求—》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。</p>
<p><strong>重定向过程：</strong>客户浏览器发送http请求—》web服务器接受后发送302状态码响应及对应新的location给客户浏览器—》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。</p>
<h3 id="解释二"><a href="#解释二" class="headerlink" title="解释二"></a>解释二</h3><p>重定向，其实是两次request,<br>第一次，客户端request  A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p>
<p><strong>例子：</strong></p>
<p><img src="/images/2020102301.png" alt="img"><br>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个<br>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。</p>
<p> <strong>例子：</strong></p>
<p><img src="/images/2020102302.png" alt="img"></p>
<h3 id="解释三"><a href="#解释三" class="headerlink" title="解释三"></a>解释三</h3><p>假设你去办理某个执照， </p>
<p><strong>重定向：</strong>你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 </p>
<p><strong>转发：</strong>你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象五大基本原则</title>
    <url>/2020/12/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>五个基本原则：</p>
<p><strong>s(</strong> Single-Resposibility Principle <strong>):</strong> 单一职责原则</p>
<p><strong>o(</strong> Open-Closed principle <strong>):</strong> 开放封闭原则</p>
<p><strong>l(</strong> Liskov-Substituion Principle <strong>):</strong> 里氏原则</p>
<p><strong>i(</strong> Interface-Segregation Principle <strong>):</strong> 接口隔离原则</p>
<p><strong>d(</strong> Dependecy-Inversion Principle <strong>):</strong> 依赖倒置原则</p>
<p><strong>一个单词：立方体(solid),很好记!!!</strong></p>
<a id="more"></a>

<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>单一职责原则（Single-Resposibility Principle）：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。</p>
<h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><p>开放封闭原则（Open-Closed principle）：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。</p>
<h1 id="里式原则"><a href="#里式原则" class="headerlink" title="里式原则"></a>里式原则</h1><p>子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。</p>
<h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则（Interface-Segregation Principle）：使用多个小的专门的接口，而不要使用一个大的总接口</p>
<h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><p>依赖倒置原则（Dependecy-Inversion Principle）：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
]]></content>
      <categories>
        <category>软件工程</category>
        <category>面向对象</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>主从库同步与读写分离</title>
    <url>/2018/10/31/%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<p>​        一般来说都是通过 主从复制（Master-Slave）的方式来同步数据，再通过读写分离（MySQL-Proxy）来提升数据库的并发负载能力 这样的方案来进行部署与实施的。</p>
<h1 id="主从同步概述"><a href="#主从同步概述" class="headerlink" title="主从同步概述"></a>主从同步概述</h1><p> MySQL主备复制原理</p>
<ul>
<li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看)</li>
<li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</li>
<li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li>
</ul>
<p><img src="/images/2018103101.png" alt="img"></p>
<h1 id="主从同步数据库配置"><a href="#主从同步数据库配置" class="headerlink" title="主从同步数据库配置"></a>主从同步数据库配置</h1><h2 id="1-打开mysql数据库配置文件"><a href="#1-打开mysql数据库配置文件" class="headerlink" title="1.打开mysql数据库配置文件"></a>1.打开mysql数据库配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<h2 id="2-在主服务器master上配置开启Binary-log"><a href="#2-在主服务器master上配置开启Binary-log" class="headerlink" title="2.在主服务器master上配置开启Binary log"></a>2.在主服务器master上配置开启Binary log</h2><p>主要是在[mysqld]下面添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id&#x3D;1</span><br><span class="line">log-bin&#x3D;master-bin</span><br><span class="line">log-bin-index&#x3D;master-bin.index</span><br></pre></td></tr></table></figure>

<h2 id="3-重启mysql服务"><a href="#3-重启mysql服务" class="headerlink" title="3.重启mysql服务"></a>3.重启mysql服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure>



<h2 id="4-检查配置效果，进入主数据库并执行"><a href="#4-检查配置效果，进入主数据库并执行" class="headerlink" title="4.检查配置效果，进入主数据库并执行"></a>4.检查配置效果，进入主数据库并执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure>

<p>可以看到下图表示配置没问题</p>
<p><img src="/images/2018103102.png" alt="image-20210201102229730"></p>
<p>这里面的File名：<code>master-bin.000001</code> 我们接下来在从数据库的配置会使用：</p>
<h2 id="5-配置从服务器的-my-cnf"><a href="#5-配置从服务器的-my-cnf" class="headerlink" title="5.配置从服务器的 my.cnf"></a>5.配置从服务器的 my.cnf</h2><p>从服务器打开配置文件（<code>vim /etc/my.cnf</code>），在[mysqld]节点下面添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id&#x3D;2</span><br><span class="line">relay-log-index&#x3D;slave-relay-bin.index</span><br><span class="line">relay-log&#x3D;slave-relay-bin</span><br></pre></td></tr></table></figure>

<p>配置完成之后重启</p>
<h2 id="6-接下来配置两个数据库的关联"><a href="#6-接下来配置两个数据库的关联" class="headerlink" title="6.接下来配置两个数据库的关联"></a>6.接下来配置两个数据库的关联</h2><p>首先我们先建立一个操作主从同步的数据库用户</p>
<p>切换到<strong>主数据库</strong>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user repl; </span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class="string">'repl'</span>@<span class="string">'192.168.60.131'</span> IDENTIFIED BY <span class="string">'123456'</span>;  </span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<p>这个配置的含义就是创建了一个数据库用户<code>repl</code>，密码是123456, 在从服务器使用<code>repl</code>这个账号和主服务器连接的时候，就赋予其<code>REPLICATION SLAVE</code>的权限</p>
<p><em>.</em> 表面这个权限是针对主库的所有表的，其中xxx就是从服务器的ip地址。</p>
<p>进入<strong>从数据库</strong>后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to master_host=<span class="string">'xxx.xxx.xxx.xx(主服务器ip)'</span>,master_port=3306,master_user=<span class="string">'repl'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'master-bin.000001'</span>,master_log_pos=0;</span><br></pre></td></tr></table></figure>

<p>这里面的xxx是主服务器ip，同时配置端口</p>
<p>repl代表访问主数据库的用户，上述步骤执行完毕后执行start slave启动配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2018103103.png" alt="image-20210201103725321"></p>
<p>停止主从同步的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br></pre></td></tr></table></figure>

<p>查看状态命令,\G表示换行查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status \G</span><br></pre></td></tr></table></figure>


<p>然后就可以看到从数据库已经在等待主库的消息了，接下来在主库的操作，在从库都会执行了。我们可以主库负责写，从库负责读（不要在从库进行写操作），达到读写分离的效果。</p>
<h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h2><p>在主数据库中创建一个新的数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database testsplit;</span><br></pre></td></tr></table></figure>

<p>在从数据库查看数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br></pre></td></tr></table></figure>

<p>可以看到从数据库也有testsplit这张表了。另外，在主数据库插入数据，从数据库也可以查到。</p>
<p><img src="/images/2018103104.png" alt="image-20210201145456754"></p>
<p>到这里就完成了数据库的主从同步。</p>
<p><strong>注意：</strong></p>
<ul>
<li><p>不要擅自修改从库的内容</p>
</li>
<li><p>从库版本一定要比主库高</p>
</li>
</ul>
<h1 id="代码层读写分离"><a href="#代码层读写分离" class="headerlink" title="代码层读写分离"></a>代码层读写分离</h1><p>上面我们已经有了两个数据库而且已经实现了主从数据库同步，接下来的问题就是在我们的业务代码里面实现读写分离，假设我们使用的是主流的ssm的框架开发的web项目，这里面我们需要多个数据源。</p>
<p>在此之前，我们在项目中一般会使用一个数据库用户远程操作数据库（避免直接使用root用户），因此我们需要在主从数据库里面都创建一个用户mysqluser，赋予其增删改查的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT select,insert,update,delete ON *.* TO <span class="string">'mysqluser'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'mysqlpassword'</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>然后我们的程序里就用mysqluser这个用户操作数据库：</p>
<h2 id="1-编写jdbc-propreties"><a href="#1-编写jdbc-propreties" class="headerlink" title="1.编写jdbc.propreties"></a>1.编写jdbc.propreties</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql驱动</span><br><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">#主数据库地址 写</span><br><span class="line">jdbc.master.url&#x3D;jdbc:mysql:&#x2F;&#x2F;xxx.xxx.xxx.xx:3306&#x2F;testsplit?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br><span class="line">#从数据库地址 读</span><br><span class="line">jdbc.slave.url&#x3D;jdbc:mysql:&#x2F;&#x2F;xxx.xxx.xxx.xx:3306&#x2F;testsplit?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br><span class="line">#数据库账号</span><br><span class="line">jdbc.username&#x3D;mysqluser</span><br><span class="line">jdbc.password&#x3D;mysqlpassword</span><br></pre></td></tr></table></figure>

<p>这里我们指定了两个数据库地址，其中的xxx分别是我们的主从数据库的ip地址，端口都是使用默认的3306</p>
<h2 id="2-配置数据源"><a href="#2-配置数据源" class="headerlink" title="2.配置数据源"></a>2.配置数据源</h2><p>在spring-dao.xml中配置数据源（这里就不累赘介绍spring的配置了，假设大家都已经配置好运行环境），配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描dao包下所有使用注解的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.liuurick.testsplit.dao"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"abstractDataSource"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主库配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"master"</span> <span class="attr">parent</span>=<span class="string">"abstractDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.master.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--从库配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"slave"</span> <span class="attr">parent</span>=<span class="string">"abstractDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.slave.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置动态数据源，这里的targetDataSource就是路由数据源所对应的名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceSelector"</span> <span class="attr">class</span>=<span class="string">"com.liuurick.testsplit.dao.split.DataSourceSelector"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"master"</span> <span class="attr">key</span>=<span class="string">"master"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"slave"</span> <span class="attr">key</span>=<span class="string">"slave"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源懒加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dataSourceSelector"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.testsplit.entity"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.testsplit.dao"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：<br>首先读取配置文件jdbc.properties，然后在我们定义了一个基于c3p0连接池的父类“抽象”数据源，然后配置了两个具体的数据源master、slave，继承了abstractDataSource，这里面就配置了数据库连接的具体属性，然后我们配置了动态数据源，他将决定使用哪个具体的数据源，这里面的关键就是DataSourceSelector，接下来我们会实现这个bean。下一步设置了数据源的懒加载，保证在数据源加载的时候其他依赖的bean已经加载好了。接着就是常规的配置了，我们的mybatis全局配置文件如下</p>
<h2 id="3-mybatis全局配置文件"><a href="#3-mybatis全局配置文件" class="headerlink" title="3.mybatis全局配置文件"></a>3.mybatis全局配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置全局属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用列别名替换列名 默认:true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印查询语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.liuurick.testsplit.dao.split.DateSourceSelectInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里面的关键就是DateSourceSelectInterceptor这个拦截器，它会拦截所有的数据库操作，然后分析sql语句判断是“读”操作还是“写”操作，我们接下来就来实现上述的DataSourceSelector和DateSourceSelectInterceptor</p>
<h2 id="4-编写DataSourceSelector"><a href="#4-编写DataSourceSelector" class="headerlink" title="4.编写DataSourceSelector"></a>4.编写DataSourceSelector</h2><p>DataSourceSelector就是我们在spring-dao.xml配置的，用于动态配置数据源。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceSelector</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceHolder.getDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只要继承AbstractRoutingDataSource并且重写determineCurrentLookupKey()方法就可以动态配置我们的数据源。<br>编写DynamicDataSourceHolder，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**用来存取key，ThreadLocal保证了线程安全*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line">    <span class="comment">/**主库*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_MASTER = <span class="string">"master"</span>;</span><br><span class="line">    <span class="comment">/**从库*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_SLAVE = <span class="string">"slave"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取线程的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSourceType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String db = contextHolder.get();</span><br><span class="line">        <span class="keyword">if</span> (db == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果db为空则默认使用主库（因为主库支持读和写）</span></span><br><span class="line">            db = DB_MASTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置线程的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSourceType</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        contextHolder.set(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理连接类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类决定返回的数据源是master还是slave，这个类的初始化我们就需要借助DateSourceSelectInterceptor了，我们拦截所有的数据库操作请求，通过分析sql语句来判断是读还是写操作，读操作就给DynamicDataSourceHolder设置slave源，写操作就给其设置master源，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.keygen.SelectKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlCommandType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor<span class="class">.<span class="keyword">class</span>,<span class="title">method</span> </span>= <span class="string">"update"</span>,args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>&#125;),</span></span><br><span class="line"><span class="class">@<span class="title">Signature</span>(<span class="title">type</span> </span>= Executor<span class="class">.<span class="keyword">class</span>,<span class="title">method</span> </span>= <span class="string">"query"</span>,args = &#123;MappedStatement<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>, <span class="title">RowBounds</span>.<span class="title">class</span>, <span class="title">ResultHandler</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DateSourceSelectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**正则匹配 insert、delete、update操作*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">".*insert\\\\u0020.*|.*delete\\\\u0020.*|.*update\\\\u0020.*"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//判断当前操作是否有事务</span></span><br><span class="line">        <span class="keyword">boolean</span> synchonizationActive = TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">        <span class="comment">//获取执行参数</span></span><br><span class="line">        Object[] objects = invocation.getArgs();</span><br><span class="line">        MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//默认设置使用主库</span></span><br><span class="line">        String lookupKey = DynamicDataSourceHolder.DB_MASTER;;</span><br><span class="line">        <span class="keyword">if</span> (!synchonizationActive)&#123;</span><br><span class="line">            <span class="comment">//读方法</span></span><br><span class="line">            <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT))&#123;</span><br><span class="line">                <span class="comment">//selectKey为自增主键（SELECT LAST_INSERT_ID()）方法,使用主库</span></span><br><span class="line">                <span class="keyword">if</span> (ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX))&#123;</span><br><span class="line">                    lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</span><br><span class="line">                    String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replace(<span class="string">"[\\t\\n\\r]"</span>,<span class="string">" "</span>);</span><br><span class="line">                    <span class="comment">//如果是insert、delete、update操作 使用主库</span></span><br><span class="line">                    <span class="keyword">if</span> (sql.matches(REGEX))&#123;</span><br><span class="line">                        lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//使用从库</span></span><br><span class="line">                        lookupKey = DynamicDataSourceHolder.DB_SLAVE;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//一般使用事务的都是写操作，直接使用主库</span></span><br><span class="line">            lookupKey = DynamicDataSourceHolder.DB_MASTER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        DynamicDataSourceHolder.setDataSourceType(lookupKey);</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor)&#123;</span><br><span class="line">            <span class="comment">//如果是Executor（执行增删改查操作），则拦截下来</span></span><br><span class="line">            <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这个拦截器，所有的<code>insert、delete、update</code>操作设置使用master源，<code>select</code>会使用slave源。</p>
<p>接下来就是测试了，我这是生产环境的代码，直接打印日志，小伙伴可以加上日志后测试使用的是哪个数据源，结果和预期一样，这样我们就实现了读写分离～</p>
<p><strong>注意</strong>：我们可以配置多个slave用于负载均衡，只需要在spring-dao.xml中添加slave1、slave2、slave3……然后修改dataSourceSelector这个bean，</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"dataSourceSelector"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.liuurick.o2o.dao.split.DataSourceSelector"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"targetDataSources"</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry value-ref="master" key="master"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry value-ref="slave1" key="slave1"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry value-ref="slave2" key="slave2"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry value-ref="slave3" key="slave3"&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>在map标签中添加slave1、slave2、slave3……即可，具体的负载均衡策略我们在DynamicDataSourceHolder、DateSourceSelectInterceptor中实现即可。</p>
<p>最后整理一下整个流程：<br>1.项目启动后，在依赖的bean加载完成后，我们的数据源通过LazyConnectionDataSourceProxy开始加载，他会引用dataSourceSelector加载数据源。<br>2.DataSourceSelector会选择一个数据源，我们在代码里设置了默认数据源为master，在初始化的时候我们就默认使用master源。<br>3.在数据库操作执行时，DateSourceSelectInterceptor拦截器拦截了请求，通过分析sql决定使用哪个数据源，“读操作”使用slave源，“写操作”使用master源。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在很多读写分离中间件已经大大简化了我们的工作，但是自己实现一个小体量的读写分离有助于我们进一步理解数据库读写分离在业务上的实现、、、</p>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>主从复制</tag>
        <tag>读写分离</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2020/11/22/MySQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<p>MySQL的深入学习主要分为5个部分，分别是：</p>
<ul>
<li>MySQL的架构介绍</li>
<li>索引优化分析</li>
<li>查询截取分析</li>
<li>MySQL锁机制</li>
<li>主从复制</li>
</ul>
<a id="more"></a>

<h1 id="一-mysql的架构介绍"><a href="#一-mysql的架构介绍" class="headerlink" title="一.mysql的架构介绍"></a>一.mysql的架构介绍</h1><h2 id="1-MysqlLinux版本的安装–mysql5-5"><a href="#1-MysqlLinux版本的安装–mysql5-5" class="headerlink" title="1. MysqlLinux版本的安装–mysql5.5"></a>1. MysqlLinux版本的安装–mysql5.5</h2><h3 id="1-1-下载地址"><a href="#1-1-下载地址" class="headerlink" title="1.1 下载地址"></a>1.1 下载地址</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p>
<h3 id="1-2-检查当前系统是否安装过mysql"><a href="#1-2-检查当前系统是否安装过mysql" class="headerlink" title="1.2 检查当前系统是否安装过mysql"></a>1.2 检查当前系统是否安装过mysql</h3><p>查询命令：<code>rpm -qa|grep -i mysql</code></p>
<p>删除命令：<code>rpm -e RPM软件包名（改名字是上一个命令查出来的名字）</code></p>
<h3 id="1-3-安装mysql服务端-注意提示-与客户端"><a href="#1-3-安装mysql服务端-注意提示-与客户端" class="headerlink" title="1.3 安装mysql服务端(注意提示)与客户端"></a>1.3 安装mysql服务端(注意提示)与客户端</h3><p>安装路径：</p>
<p><img src="/images/2020112201.png" alt="image-20201122172644460"></p>
<p>上传并解压文件：</p>
<p><code>tar -xvf MySQL-5.5.62-1.el7.x86_64.rpm-bundle.tar</code></p>
<p><img src="/images/2020112202.png" alt="image-20201122172644460"></p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-server-5.5.62-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-client-5.5.62-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>注意：这里可能会出现错误：</p>
<blockquote>
<p>conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_641</p>
</blockquote>
<p><img src="/images/2020112203.png" alt="image-20201122210437197"></p>
<p>与mariadb冲突，删除mariadb即可！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e mariadb-libs-1:5.5.65-1.el7.x86_64 --nodeps</span><br></pre></td></tr></table></figure>



<h3 id="1-4-查看Mysql安装时创建的mysql用户和mysql组"><a href="#1-4-查看Mysql安装时创建的mysql用户和mysql组" class="headerlink" title="1.4 查看Mysql安装时创建的mysql用户和mysql组"></a>1.4 查看Mysql安装时创建的mysql用户和mysql组</h3><p><img src="/images/2020112204.png" alt="image-20201122204405232"></p>
<p>或者也可以执行mysqladmin –version 命令，类似java -version，如果可以查看消息，说明成功</p>
<p><img src="/images/2020112205.png" alt="image-20201122210850349"></p>
<h3 id="1-5-mysql服务的启动和停止"><a href="#1-5-mysql服务的启动和停止" class="headerlink" title="1.5 mysql服务的启动和停止"></a>1.5 mysql服务的启动和停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></figure>

<p>查看进程：</p>
<p><img src="/images/2020112206.png" alt="image-20201122211604756"></p>
<p><strong>注意：</strong>可能会报下面的错误</p>
<blockquote>
<p>Starting MySQL. ERROR! The server quit without updating PID file (/var/lib/mysql/localhost.localdomain.pid).</p>
</blockquote>
<p><img src="/images/2020112207.png" alt="image-20201122211244330"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解决步骤：</span><br><span class="line">yum -y install autoconf</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql_install_db --user&#x3D;mysql</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<p>解答参考页面：<a href="https://www.cnblogs.com/weibanggang/p/11230528.html" target="_blank" rel="noopener">https://www.cnblogs.com/weibanggang/p/11230528.html</a></p>
<h3 id="1-6-mysql的ROOT密码设置"><a href="#1-6-mysql的ROOT密码设置" class="headerlink" title="1.6 mysql的ROOT密码设置"></a>1.6 mysql的ROOT密码设置</h3><p>首次会直接连接成功，因为mysql默认没有密码。</p>
<p>修改密码可以按照Service中的提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password 123456</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020112208.png" alt="image-20201122212503860"></p>
<h3 id="1-7-自启动mysql服务"><a href="#1-7-自启动mysql服务" class="headerlink" title="1.7 自启动mysql服务"></a>1.7 自启动mysql服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></table></figure>

<p><code>chkconfig --list|grep mysql</code></p>
<p><img src="/images/2020112209.png" alt="image-20201122213038046"></p>
<h3 id="1-8-修改配置文件位置"><a href="#1-8-修改配置文件位置" class="headerlink" title="1.8 修改配置文件位置"></a>1.8 修改配置文件位置</h3><p>5.5版本：<code>cp /usr/share/mysql/my-huge.cnf /etc/my.cnf</code></p>
<p>5.6版本：<code>cp /usr/share/mysql/my-default.cnf /etc/my.cnf</code></p>
<h3 id="1-9-修改字符集和数据存储路径"><a href="#1-9-修改字符集和数据存储路径" class="headerlink" title="1.9 修改字符集和数据存储路径"></a>1.9 修改字符集和数据存储路径</h3><p>查看字符集：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%char%&#39;;</span><br><span class="line">show variables like &#39;%character%&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020112210.png" alt="image-20201122220007001"></p>
<p>修改my.cnf文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#password	&#x3D; your_password</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line">socket		&#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line"># Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"># The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line"></span><br><span class="line">character-set-client-handshake &#x3D; FALSE</span><br><span class="line">character-set-server &#x3D; utf8mb4</span><br><span class="line">collation-server &#x3D; utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line">socket		&#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size &#x3D; 384M</span><br><span class="line">max_allowed_packet &#x3D; 1M</span><br><span class="line">table_open_cache &#x3D; 512</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 8M</span><br><span class="line">myisam_sort_buffer_size &#x3D; 64M</span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line">query_cache_size &#x3D; 32M</span><br><span class="line"># Try number of CPU&#39;s*2 for thread_concurrency</span><br><span class="line">thread_concurrency &#x3D; 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line"></span><br><span class="line"># required unique id between 1 and 2^32 - 1</span><br><span class="line"># defaults to 1 if master-host is not set</span><br><span class="line"># but will not function as a master if omitted</span><br><span class="line">server-id	&#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 256M</span><br><span class="line">sort_buffer_size &#x3D; 256M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>

<p>修改完成之后重启mysql服务</p>
<h3 id="1-10-Mysql的安装位置"><a href="#1-10-Mysql的安装位置" class="headerlink" title="1.10 Mysql的安装位置"></a>1.10 Mysql的安装位置</h3><p>在linux下查看安装目录 <code>ps -ef|grep mysql</code></p>
<p><img src="/images/2020112211.png" alt="image-20201122212059724"></p>
<h2 id="2-Mysql配置文件"><a href="#2-Mysql配置文件" class="headerlink" title="2.Mysql配置文件"></a>2.Mysql配置文件</h2><h3 id="2-1-二进制日志log-bin"><a href="#2-1-二进制日志log-bin" class="headerlink" title="2.1 二进制日志log-bin"></a>2.1 二进制日志log-bin</h3><p>主要用作主重复制</p>
<h3 id="2-2-错误日志log-error"><a href="#2-2-错误日志log-error" class="headerlink" title="2.2 错误日志log-error"></a>2.2 错误日志log-error</h3><p>默认是关闭的,记录严重的警告和错误信息,每次启动和关闭的详细信息等.</p>
<h3 id="2-3-查询日志log"><a href="#2-3-查询日志log" class="headerlink" title="2.3 查询日志log"></a>2.3 查询日志log</h3><p>默认关闭,记录查询的sql语句，如果开启会减低mysql的整体性能，因为记录日志也是需要消耗系统资源的</p>
<h3 id="2-4-数据文件"><a href="#2-4-数据文件" class="headerlink" title="2.4 数据文件"></a>2.4 数据文件</h3><p>在Windows下，D:\ProgramFiles\MySQL\MySQLServer5.5\data目录下可以挑选很多库；</p>
<p>在Linux下，看看当前系统中的全部库后再进去（默认路径：/var/lib/mysql）。    </p>
<p><strong>数据文件：</strong>    </p>
<p>​    frm文件：存放表结构</p>
<p>​    myd文件：存放表数据</p>
<p>​    myi文件：存放表索引</p>
<h3 id="2-5-如何配置"><a href="#2-5-如何配置" class="headerlink" title="2.5 如何配置"></a>2.5 如何配置</h3><p>windows：my.ini文件</p>
<p>Linux：/etc/my.cnf文件</p>
<h2 id="3-Mysql逻辑架构介绍"><a href="#3-Mysql逻辑架构介绍" class="headerlink" title="3.Mysql逻辑架构介绍"></a>3.Mysql逻辑架构介绍</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<p><img src="/images/2020112212.png" alt="image-20201123095017572"></p>
<h3 id="3-1-连接层"><a href="#3-1-连接层" class="headerlink" title="3.1 连接层"></a>3.1 连接层</h3><p>最上层是一些客户端和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>
<p><strong>Connectors：</strong>指的是不同语言中与SQL的交互</p>
<p><strong>Connection Pool</strong>: 连接池<br>管理缓冲用户连接，线程处理等需要缓存的需求。负责监听对 MySQL Server 的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上 MySQL Server 的客户端请求都会被分配（或创建）一个连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server 与客户端的通信，接受客户端的命令请求，传递 Server 端的结果信息等。线程管理模块则负责管理维护这些连接线程。包括线程的创建，线程的 cache 等。</p>
<h3 id="3-2-服务层"><a href="#3-2-服务层" class="headerlink" title="3.2 服务层"></a>3.2 服务层</h3><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行，所有跨存储引擎的功能也在这一层实现，如过程，函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化，如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>
<p>*<em>Management Serveices &amp; Utilities： *</em>系统管理和控制工具</p>
<p><strong>SQL Interface: SQL接口</strong><br>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface<br><strong>Parser: 解析器</strong><br>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。<br>在 MySQL中我们习惯将所有 Client 端发送给 Server 端的命令都称为 query ，在 MySQL Server 里面，连接线程接收到客户端的一个 Query 后，会直接将该 query 传递给专门负责将各种 Query 进行分类然后转发给各个对应的处理模块。</p>
<p>​        主要功能：<br>​        a . 将SQL语句进行语义和语法的分析，分解成数据结构，然后按照不同的操作类型进行分类，然后做出针对性的转发到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。<br>​        b.  如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</p>
<p><strong>Optimizer: 查询优化器</strong></p>
<p>SQL语句在查询之前会使用查询优化器对查询进行优化。就是优化客户端请求的 query（sql语句） ，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果<br>他使用的是“<strong>选取-投影-联接</strong>”策略进行查询。<br>       用一个例子就可以理解： select uid,name from user where gender = 1;<br>       这个select 查询先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤<br>       这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤<br>       将这两个查询条件联接起来生成最终查询结果</p>
<p><strong>Cache和Buffer： 查询缓存</strong><br>他的主要功能是将客户端提交 给MySQL 的 Select 类 query 请求的返回结果集 cache 到内存中，与该 query 的一个 hash 值 做一个对应。该 Query 所取数据的基表发生任何数据的变化之后， MySQL 会自动使该 query 的Cache 失效。在读写比例非常高的应用系统中， Query Cache 对性能的提高是非常显著的。当然它对内存的消耗也是非常大的。<br>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</p>
<h3 id="3-3-引擎层"><a href="#3-3-引擎层" class="headerlink" title="3.3 引擎层"></a>3.3 引擎层</h3><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p>
<p><strong>存储引擎接口模块</strong>：可以说是 MySQL 数据库中最有特色的一点了。目前各种数据库产品中，基本上只有 MySQL 可以实现其底层数据存储引擎的插件式管理。这个模块实际上只是 一个抽象类，但正是因为它成功地将各种数据处理高度抽象化，才成就了今天 MySQL 可插拔存储引擎的特色。<br>     从上图可以看出，MySQL区别于其他数据库的最重要的特点就是其插件式的表存储引擎。MySQL插件式的存储引擎架构提供了一系列标准的管理和服务支持，这些标准与存储引擎本身无关，可能是每个数据库系统本身都必需的，如SQL分析器和优化器等，而存储引擎是底层物理结构的实现，每个存储引擎开发者都可以按照自己的意愿来进行开发。<br><strong>注意：</strong>存储引擎是基于表的，而不是数据库。</p>
<h3 id="3-4-存储层"><a href="#3-4-存储层" class="headerlink" title="3.4 存储层"></a>3.4 存储层</h3><p>数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p>
<p><strong>查询说明：</strong></p>
<p><strong><img src="/images/2020112213.png" alt="img"></strong></p>
<p>首先，mysql的查询流程大致是：</p>
<ul>
<li><p>mysql客户端通过协议与mysql服务器建连接，发送查询语句，先检查查询缓存，如果命中(一模一样的sql才能命中)，直接返回结果，否则进行语句解析,也就是说，在解析查询之前，服务器会先访问查询缓存(query cache)——它存储SELECT语句以及相应的查询结果集。如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。</p>
</li>
<li><p>语法解析器和预处理：首先mysql通过关键字将SQL语句进行解析，并生成一颗对应的“解析树”。mysql解析器将使用mysql语法规则验证和解析查询；预处理器则根据一些mysql规则进一步检查解析数是否合法。</p>
</li>
<li><p>查询优化器当解析树被认为是合法的了，并且由优化器将其转化成执行计划。一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划。。</p>
</li>
<li><p>然后，mysql默认使用的BTREE索引，并且一个大致方向是:无论怎么折腾sql，至少在目前来说，mysql最多只用到表中的一个索引。</p>
</li>
</ul>
<h2 id="4-Mysql存储引擎"><a href="#4-Mysql存储引擎" class="headerlink" title="4.Mysql存储引擎"></a>4.Mysql存储引擎</h2><p>常用命令：</p>
<p>查看mysql现在提供什么存储引擎</p>
<p><code>show engines;</code></p>
<p>查看mysql当前默认的存储引擎</p>
<p><code>show variables like &#39;%storage_engine%&#39;</code></p>
<p>MyISAM和InnoDB对比：</p>
<p><img src="/images/2020112214.png" alt="image-20201123100931321"></p>
<h1 id="二-索引优化分析"><a href="#二-索引优化分析" class="headerlink" title="二.索引优化分析"></a>二.索引优化分析</h1><h2 id="1-性能下降SQL慢-，执行时间长-，等待时间长的原因分析"><a href="#1-性能下降SQL慢-，执行时间长-，等待时间长的原因分析" class="headerlink" title="1.性能下降SQL慢 ，执行时间长 ，等待时间长的原因分析"></a>1.性能下降SQL慢 ，执行时间长 ，等待时间长的原因分析</h2><p>主要有以下原因：</p>
<ul>
<li><p>查询语句写的烂</p>
</li>
<li><p>索引失效</p>
<p>​    单值索引/复合索引失效</p>
</li>
<li><p>关联查询太多join(设计缺陷或不得已的需求)</p>
</li>
<li><p>服务器调优及各个参数设置(缓冲\线程数等)</p>
</li>
</ul>
<h2 id="2-常见通用的join查询"><a href="#2-常见通用的join查询" class="headerlink" title="2.常见通用的join查询"></a>2.常见通用的join查询</h2><h3 id="2-1-SQL执行顺序"><a href="#2-1-SQL执行顺序" class="headerlink" title="2.1 SQL执行顺序"></a>2.1 SQL执行顺序</h3><p><strong>手写：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;query_list&gt; <span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line">&lt;<span class="keyword">join</span> <span class="keyword">type</span>&gt; <span class="keyword">JOIN</span> &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;wherer_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_list&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;<span class="keyword">limit</span> <span class="built_in">number</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>机读：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM &lt;left_table&gt; </span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN &lt;right_table&gt;</span><br><span class="line">WHERE &lt;where_condition&gt;</span><br><span class="line">GROUP BY &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> &lt;query_list&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p><img src="/images/2020112215.png" alt="img"></p>
<p>Join图</p>
<p><strong>内连接</strong>：结果仅包含符合连接条件的两表中的行。</p>
<p><strong>外连接</strong>：结果包含符合条件的行，同时包含不符合条件的行（分为左外连接、右外连接和全外连接）</p>
<p><img src="/images/2020112216.png" alt="img"></p>
<h3 id="2-2-MySQL数据库实例"><a href="#2-2-MySQL数据库实例" class="headerlink" title="2.2 MySQL数据库实例"></a>2.2 MySQL数据库实例</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db_test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h4 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2.使用数据库"></a>2.使用数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db_test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<h4 id="3-查看数据库"><a href="#3-查看数据库" class="headerlink" title="3.查看数据库"></a>3.查看数据库</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;show tables; //返回当前数据库下的所有表的名称</span><br><span class="line">或者也可以直接用以下命令</span><br><span class="line">mysql&gt;show tables from databaseName;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建表、添加数据"><a href="#4-创建表、添加数据" class="headerlink" title="4.创建表、添加数据"></a>4.创建表、添加数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_dept`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'部门主键'</span>,</span><br><span class="line">  <span class="string">`deptName`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门名称'</span>,</span><br><span class="line">  <span class="string">`locAdd`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'楼层'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'员工主键'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工姓名'</span>,</span><br><span class="line">  <span class="string">`deptId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门外键'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_dept_id`</span> (<span class="string">`deptId`</span>)</span><br><span class="line">  <span class="comment">#CONSTRAINT `fk_dept_id` FOREIGN KEY (`deptId`) REFERENCES `tb_dept` (`id`) COMMENT '部门外键设置, 已经注释掉。'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'RD'</span>, <span class="string">'11'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'HR'</span>, <span class="string">'12'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'MK'</span>, <span class="string">'13'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'MIS'</span>, <span class="string">'14'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'FD'</span>, <span class="string">'15'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'王二'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'麻子'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'小马'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'马旭'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'小丁'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'小西'</span>, <span class="string">'5'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>tb_emp表数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp;</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">| id | name   | deptId |</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |</span><br><span class="line">|  2 | 李四   |      1 |</span><br><span class="line">|  3 | 王二   |      1 |</span><br><span class="line">|  4 | 麻子   |      2 |</span><br><span class="line">|  5 | 小马   |      2 |</span><br><span class="line">|  6 | 马旭   |      3 |</span><br><span class="line">|  7 | 小丁   |      4 |</span><br><span class="line">|  8 | 小西   |     51 |</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>tb_dept表数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_dept;</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">| id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">|  1 | RD       | 11     |</span><br><span class="line">|  2 | HR       | 12     |</span><br><span class="line">|  3 | MK       | 13     |</span><br><span class="line">|  4 | MIS      | 14     |</span><br><span class="line">|  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>笛卡儿积：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp, tb_dept;</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  1 | 张三   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  1 | 张三   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  1 | 张三   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  1 | 张三   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  2 | 李四   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  2 | 李四   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  2 | 李四   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  3 | 王二   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  3 | 王二   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  3 | 王二   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  4 | 麻子   |      2 |  1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  4 | 麻子   |      2 |  3 | MK       | 13     |</span><br><span class="line">|  4 | 麻子   |      2 |  4 | MIS      | 14     |</span><br><span class="line">|  4 | 麻子   |      2 |  5 | FD       | 15     |</span><br><span class="line">|  5 | 小马   |      2 |  1 | RD       | 11     |</span><br><span class="line">|  5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |  3 | MK       | 13     |</span><br><span class="line">|  5 | 小马   |      2 |  4 | MIS      | 14     |</span><br><span class="line">|  5 | 小马   |      2 |  5 | FD       | 15     |</span><br><span class="line">|  6 | 马旭   |      3 |  1 | RD       | 11     |</span><br><span class="line">|  6 | 马旭   |      3 |  2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|  6 | 马旭   |      3 |  4 | MIS      | 14     |</span><br><span class="line">|  6 | 马旭   |      3 |  5 | FD       | 15     |</span><br><span class="line">|  7 | 小丁   |      4 |  1 | RD       | 11     |</span><br><span class="line">|  7 | 小丁   |      4 |  2 | HR       | 12     |</span><br><span class="line">|  7 | 小丁   |      4 |  3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">|  7 | 小丁   |      4 |  5 | FD       | 15     |</span><br><span class="line">|  8 | 小西   |     51 |  1 | RD       | 11     |</span><br><span class="line">|  8 | 小西   |     51 |  2 | HR       | 12     |</span><br><span class="line">|  8 | 小西   |     51 |  3 | MK       | 13     |</span><br><span class="line">|  8 | 小西   |     51 |  4 | MIS      | 14     |</span><br><span class="line">|  8 | 小西   |     51 |  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">40 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表和tb_dept中公共的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; inner join tb_dept d on e.deptId = d.id;</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表中全部的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_emp 表中独有的数据, tb_dept 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |    2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |    2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |    3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |    4 | MIS      | 14     |</span><br><span class="line">|  8 | 小西   |     51 | NULL | NULL     | NULL   |　　　　</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_dept表中全部的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_dept 表中独有的数据, tb_emp 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">|    1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|    5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|    6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|    7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">| NULL | NULL   |   NULL |  5 | FD       | 15     |     </span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where d.id is null;</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">|  8 | 小西   |     51 | NULL | NULL     | NULL   |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_dept表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where e.deptId is null;</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">| id   | name | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">| NULL | NULL |   NULL |  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp和tb_dept表中所有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; full outer join tb_dept d on e.deptId = d.id;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'full outer join tb_dept d on e.deptId = d.id'</span> <span class="keyword">at</span> line <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>出错原因：mysql 中不支持这种连接方式。</p>
<p><strong>解决办法：</strong>左连接数据和右连接数据相加，将公共的部分去重。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e </span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; union　　　　　#去重</span><br><span class="line">    -&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_emp 表中独有的数据, tb_dept 表中的字段用 null 占位</span></span><br><span class="line"><span class="comment">#该条数据为 tb_dept 表中独有的数据, tb_emp 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">|    1 | 张三   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    2 | 李四   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    3 | 王二   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    4 | 麻子   |      2 |    2 | HR       | 12     |</span><br><span class="line">|    5 | 小马   |      2 |    2 | HR       | 12     |</span><br><span class="line">|    6 | 马旭   |      3 |    3 | MK       | 13     |</span><br><span class="line">|    7 | 小丁   |      4 |    4 | MIS      | 14     |</span><br><span class="line">|    8 | 小西   |     51 | NULL | NULL     | NULL   |　　　　</span><br><span class="line">| NULL | NULL   |   NULL |    5 | FD       | 15     |　　　 </span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp和tb_dept表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where d.id is null</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where e.deptId is null;</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">|    8 | 小西   |     51 | NULL | NULL     | NULL   |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | FD       | 15     |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="3-索引简介"><a href="#3-索引简介" class="headerlink" title="3.索引简介"></a>3.索引简介</h2><h3 id="3-1-索引概述"><a href="#3-1-索引概述" class="headerlink" title="3.1 索引概述"></a>3.1 索引概述</h3><blockquote>
<p>索引（在 MySQL 中也叫“键key”）是存储引擎快速找到记录的一种数据结构</p>
<p>​                                                                                                                                                            ——《高性能MySQL》</p>
</blockquote>
<ul>
<li>索引(Index) 是帮助MySQL高效获取数据的数据结构。<strong>索引的本质就是数据结构</strong>。 <strong>索引的目的在于提高查询效率</strong>，可以类比字典，可以简单的理解为“排好序的快速查找数据结构”。</li>
<li>在数据本身之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构就是索引。</li>
<li>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</li>
<li>我们平时所说的索引，如果没有特别指明，都是指B树结构组织的索引。</li>
</ul>
<p><strong>二叉树算法图：</strong></p>
<p><strong><a href="https://images2015.cnblogs.com/blog/1054685/201706/1054685-20170627085051383-985324526.png" target="_blank" rel="noopener"><img src="/images/2020112217.png" alt="img"></a></strong></p>
<p>​    为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定复杂度内获取到相应数据，从而快速的检索出符合条件的记录。</p>
<h3 id="3-2-索引的优势"><a href="#3-2-索引的优势" class="headerlink" title="3.2 索引的优势"></a>3.2 索引的优势</h3><ol>
<li>创建索引可以提高数据检索的效率，降低数据库的IO成本。</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li>
</ol>
<h3 id="3-3-索引的劣势"><a href="#3-3-索引的劣势" class="headerlink" title="3.3 索引的劣势"></a>3.3 索引的劣势</h3><ol>
<li>索引其实也是一张表，该表保存了主键与索引字段，并指向实体的记录，所以索引列也是要占用空间的。</li>
<li>索引虽然提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要调整因为更新所带来的键值变化后的索引信息。</li>
<li>索引只是提高效率的一个因素，如果MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</li>
</ol>
<h3 id="3-4-MySQL索引分类"><a href="#3-4-MySQL索引分类" class="headerlink" title="3.4 MySQL索引分类"></a>3.4 MySQL索引分类</h3><ol>
<li>单值索引：一个索引只包含一个单列，一个表可以有多个单列索引。<ol>
<li>最简单，通用的一种索引</li>
</ol>
</li>
<li>唯一索引：索引列的值必须唯一，但允许有空值。<ol>
<li>银行卡号</li>
<li>身份证号</li>
</ol>
</li>
<li>复合索引：一个索引包含多个列。</li>
</ol>
<h4 id="1-主键索引-PRIMARY-KEY"><a href="#1-主键索引-PRIMARY-KEY" class="headerlink" title="1.主键索引 PRIMARY KEY"></a>1.主键索引 PRIMARY KEY</h4><p>它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</p>
<p><strong>注意：</strong>一个表只能有一个主键</p>
<p><img src="/images/2020112218.png" alt="mark"></p>
<h4 id="2-唯一索引-UNIQUE"><a href="#2-唯一索引-UNIQUE" class="headerlink" title="2.唯一索引 UNIQUE"></a>2.唯一索引 UNIQUE</h4><p>唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p>
<p>可以通过<code>ALTER TABLE table_name ADD UNIQUE (column);</code>创建唯一索引</p>
<p><img src="/images/2020112219.png" alt="mark"></p>
<p><img src="/images/2020112220.png" alt="mark"></p>
<p>可以通过<code>ALTER TABLE table_name ADD UNIQUE (column1,column2);</code>创建唯一组合索引</p>
<p><img src="/images/2020112221.png" alt="mark"></p>
<p><img src="/images/2020112222.png" alt="mark"></p>
<h4 id="3-普通索引-INDEX"><a href="#3-普通索引-INDEX" class="headerlink" title="3.普通索引 INDEX"></a>3.普通索引 INDEX</h4><p>最基本的索引，它没有任何限制。</p>
<p>可以通过<code>ALTER TABLE table_name ADD INDEX index_name (column);</code>创建普通索引</p>
<p><img src="/images/2020112223.png" alt="mark"></p>
<p><img src="/images/2020112224.png" alt="mark"></p>
<h4 id="4-组合索引-INDEX"><a href="#4-组合索引-INDEX" class="headerlink" title="4.组合索引 INDEX"></a>4.组合索引 INDEX</h4><p>组合索引，即一个索引包含多个列。多用于避免回表查询。</p>
<p>可以通过<code>ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);</code>创建组合索引</p>
<p><img src="/images/2020112225.png" alt="mark"></p>
<p><img src="/images/2020112226.png" alt="mark"></p>
<h4 id="5-全文索引-FULLTEXT"><a href="#5-全文索引-FULLTEXT" class="headerlink" title="5.全文索引 FULLTEXT"></a>5.全文索引 FULLTEXT</h4><p>全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。</p>
<p>可以通过<code>ALTER TABLE table_name ADD FULLTEXT (column);</code>创建全文索引</p>
<p><img src="/images/2020112227.png" alt="mark"></p>
<p><img src="/images/2020112228.png" alt="mark"></p>
<p>索引一经创建不能修改，如果要修改索引，只能删除重建。可以使用<code>DROP INDEX index_name ON table_name;</code>删除索引。</p>
<h3 id="3-5-索引的基本语法"><a href="#3-5-索引的基本语法" class="headerlink" title="3.5 索引的基本语法"></a>3.5 索引的基本语法</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> tableName(colName(<span class="keyword">length</span>));。——如果是CHAR、VARCHAR类型，length可以小于字段实际长度，若是BLOB和TEXT类型，必须指定length。</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> tableName <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> (colName(<span class="keyword">length</span>));。</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span> tableName;</span><br></pre></td></tr></table></figure>

<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> tableName;</span><br></pre></td></tr></table></figure>

<h4 id="使用ALTER命令四种方式添加数据表的索引"><a href="#使用ALTER命令四种方式添加数据表的索引" class="headerlink" title="使用ALTER命令四种方式添加数据表的索引"></a>使用ALTER命令四种方式添加数据表的索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(column_list); 该语句添加一个主键，这意味着索引值必须唯一，且不能为null。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> indexName(column_list);该语句创建索引的值必须唯一(null除外，null可能会出现多次)。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> <span class="keyword">INDEX</span> indexName(column_list);该语句添加普通索引，索引值可出现多次。</span><br><span class="line">AKTER TABLE tableName ADD FULLTEXT indexName(column_list);该语句指定索引为FULLTEXT，用于全文索引。</span><br></pre></td></tr></table></figure>



<h3 id="3-6-MySQL索引结构"><a href="#3-6-MySQL索引结构" class="headerlink" title="3.6 MySQL索引结构"></a>3.6 MySQL索引结构</h3><ol>
<li><p><strong>BTree索引</strong></p>
<p><a href="https://blog.csdn.net/tongdanping/article/details/79878302#3、BTree索引和B%2BTree索引" target="_blank" rel="noopener">BTree详解</a></p>
</li>
<li><p>Hash索引</p>
</li>
<li><p>full-text全文索引</p>
</li>
<li><p>R-Tree索引 </p>
</li>
</ol>
<h3 id="3-7-哪些情况需要创建索引："><a href="#3-7-哪些情况需要创建索引：" class="headerlink" title="3.7 哪些情况需要创建索引："></a>3.7 哪些情况需要创建索引：</h3><ol>
<li>主键自动建立唯一索引。</li>
<li>频繁作为查询的条件的字段应该创建索引查询中与其他表关联的字段，外键关系建立索引。</li>
<li>查询中与其他表关联的字段，外键关系建立索引</li>
<li>查询中的排序字段适合创建索引，排序字段若通过索引去访问将大大提高排序速率。</li>
<li>查询中统计或者分组字段适合创建索引。</li>
<li>频繁更新的字段不适合创建索引，因为每次更新不单单是更新了记录还会更新索引，加重IO负担</li>
<li>Where条件里用不到的字段不创建索引</li>
<li>单值/组合索引的选择问题，who？（在高并发下倾向创建组合索引）</li>
</ol>
<h3 id="3-8-哪些情况不要创建索引："><a href="#3-8-哪些情况不要创建索引：" class="headerlink" title="3.8 哪些情况不要创建索引："></a>3.8 哪些情况不要创建索引：</h3><ol>
<li><p>表记录太少。</p>
</li>
<li><p>经常增删改的表。</p>
</li>
<li><p>数据重复且分布平均的表字段，因此应该只为经常查询和经常排序的数据列建立索引。<br>注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p>
<p><img src="/images/2020112229.png" alt="image-20201129201618523"></p>
</li>
</ol>
<h2 id="4-性能分析"><a href="#4-性能分析" class="headerlink" title="4.性能分析"></a>4.性能分析</h2><h3 id="4-1-MySQL查询优化器-MySQL-Query-Optimizer"><a href="#4-1-MySQL查询优化器-MySQL-Query-Optimizer" class="headerlink" title="4.1 MySQL查询优化器(MySQL Query Optimizer)"></a>4.1 MySQL查询优化器(MySQL Query Optimizer)</h3><p>1.Mysql中有专门负责优化SELECT语句的优化器模块，主要工作：通过技术分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间）</p>
<p>2.当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQL Query Optimizer时，MySQL Query Optimizer首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件，结构调整等。然后分析Query中的Hint信息（如果有），看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</p>
<h3 id="4-2-MySQL常见瓶颈"><a href="#4-2-MySQL常见瓶颈" class="headerlink" title="4.2 MySQL常见瓶颈"></a>4.2 MySQL常见瓶颈</h3><ul>
<li>CPU:CPU在饱和的时候一般发生在数据装入在内存或从磁盘上读取数据时候</li>
<li>IO:磁盘I/O瓶颈发生在装入数据远大于内存容量时</li>
<li>服务器硬件的性能瓶颈：top,free,iostat和vmstat来查看系统的性能状态</li>
</ul>
<h3 id="4-3-Explain"><a href="#4-3-Explain" class="headerlink" title="4.3 Explain"></a>4.3 Explain</h3><blockquote>
<p><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008131735</a></p>
</blockquote>
<h4 id="是什么（查看执行计划）"><a href="#是什么（查看执行计划）" class="headerlink" title="是什么（查看执行计划）"></a>是什么（查看执行计划）</h4><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈。</p>
<h4 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h4><p>表的读取顺序</p>
<p>数据读取操作的操作类型</p>
<p>哪些索引可以使用</p>
<p>哪些索引被实际使用</p>
<p>表之间的引用</p>
<p>每张表有多少行被优化器查询</p>
<h4 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h4><p>Explain+SQL语句</p>
<p>执行计划包含的信息</p>
<p><img src="/images/2020112230.png" alt="img"></p>
<p>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</p>
<h5 id="概要描述："><a href="#概要描述：" class="headerlink" title="概要描述："></a>概要描述：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id:选择标识符</span><br><span class="line">select_type:表示查询的类型。</span><br><span class="line">table:输出结果集的表</span><br><span class="line">partitions:匹配的分区</span><br><span class="line">type:表示表的连接类型</span><br><span class="line">possible_keys:表示查询时，可能使用的索引</span><br><span class="line">key:表示实际使用的索引</span><br><span class="line">key_len:索引字段的长度</span><br><span class="line">ref:列与索引的比较</span><br><span class="line">rows:扫描出的行数(估算的行数)</span><br><span class="line">filtered:按表条件过滤的行百分比</span><br><span class="line">Extra:执行情况的描述和说明</span><br></pre></td></tr></table></figure>

<p><strong>下面对这些字段出现的可能进行解释：</strong></p>
<h5 id="1-id"><a href="#1-id" class="headerlink" title="1.id"></a>1.id</h5><p>SELECT识别符。这是SELECT的查询序列号</p>
<p><strong>我的理解是SQL执行的顺序的标识，SQL从大到小的执行</strong></p>
<p>​        1.id相同时，执行顺序由上至下</p>
<p><img src="/images/2020112231.png" alt="image-20201202131914359"></p>
<p>​        2.如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
<p><img src="/images/2020112232.png" alt="image-20201202131931919"></p>
<p>​        3.id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p>
<p><img src="/images/2020112233.png" alt="image-20201202131954051"></p>
<h5 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2.select_type"></a>2.select_type</h5><p>   <strong><em>\</em>示查询中每个select子句的类型**</strong></p>
<p>(1) SIMPLE(简单SELECT，不使用UNION或子查询等)</p>
<p>(2) PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p>
<p>(3) UNION(UNION中的第二个或后面的SELECT语句)</p>
<p>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>
<p>(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p>
<p>(6) SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p>
<p>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p>
<p>(8) DERIVED(派生表的SELECT, FROM子句的子查询)</p>
<p>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>
<h5 id="3-table"><a href="#3-table" class="headerlink" title="3.table"></a>3.table</h5><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p>
<h5 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h5><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称<strong>访问类型</strong>。</p>
<p><img src="/images/2020112234.png" alt="image-20201202132947918"></p>
<p>性能从最好到最差依次是：<strong>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</strong></p>
<p>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，这个也可以忽略不计</p>
<p>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键至于where列表中，MySQL就能将该查询转换为一个常量</p>
<p>eq_ref：唯一性索引，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</p>
<p>ref：非唯一索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p>
<p>NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>
<p>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询，这种范围扫描索引扫描比全表扫描要好，因为他只需要开始索引的某一点，而结束语另一点，不用扫描全部索引。</p>
<p>index：Full Index Scan,index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）</p>
<p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>
<p><strong>备注：</strong>一般来说，得保证查询只是达到range级别，最好达到ref</p>
<h5 id="5-possible-keys"><a href="#5-possible-keys" class="headerlink" title="5.possible_keys"></a>5.possible_keys</h5><p><strong>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</strong></p>
<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>
<h5 id="6-Key"><a href="#6-Key" class="headerlink" title="6.Key"></a>6.Key</h5><p><strong>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</strong></p>
<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>
<h5 id="7-key-len"><a href="#7-key-len" class="headerlink" title="7.key_len"></a>7.key_len</h5><p><strong>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</strong></p>
<p>不损失精确性的情况下，长度越短越好 </p>
<h5 id="8-ref"><a href="#8-ref" class="headerlink" title="8.ref"></a>8.ref</h5><p><strong>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</strong></p>
<h5 id="9-rows"><a href="#9-rows" class="headerlink" title="9.rows"></a>9.rows</h5><p> <strong>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</strong></p>
<h5 id="10-Extra"><a href="#10-Extra" class="headerlink" title="10.Extra"></a>10.Extra</h5><p><strong>该列包含MySQL解决查询的详细信息。</strong></p>
<p><strong>有以下几种情况：</strong></p>
<p>1.Using filesort：说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成排序操作成为“文件排序”</p>
<p>2.Using temporary：使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by 和分组查询 group by</p>
<p>3.Using index：表示相应的select操作中使用了覆盖索引（Coveing Index）,避免访问了表的数据行，效率不错！<br>                        如果同时出现using where，表明索引被用来执行索引键值的查找；<br>                        如果没有同时出现using where，表面索引用来读取数据而非执行查找动作。</p>
<p>​                        <strong>覆盖索引（Covering Index）</strong></p>
<p><img src="/images/2020112235.png" alt="image-20201202134700929"></p>
<p>4.Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>
<p>5.Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>
<p>6.Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p>
<p>7.Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>
<p>8.distinct：优化distinct，在找到第一匹配的元组后即停止找同样值的工作</p>
<p>9.No tables used：Query语句中使用from dual 或不含任何from子句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- explain select now() from dual;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong><br>• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况<br>• EXPLAIN不考虑各种Cache<br>• EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br>• 部分统计信息是估算的，并非精确值<br>• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。**</p>
<p>通过收集统计信息不可能存在结果</p>
<p><strong>热身case</strong>：</p>
<p><img src="/images/2020112236.png" alt="image-20201202134800435"></p>
<p><img src="/images/2020112237.png" alt="image-20201202134808051"></p>
<h2 id="5-索引优化"><a href="#5-索引优化" class="headerlink" title="5.索引优化"></a>5.索引优化</h2><p>索引分析之后进行索引优化</p>
<h3 id="索引分析"><a href="#索引分析" class="headerlink" title="索引分析"></a>索引分析</h3><h3 id="索引失效（应该避免）"><a href="#索引失效（应该避免）" class="headerlink" title="索引失效（应该避免）"></a>索引失效（应该避免）</h3><h3 id="一般性建议"><a href="#一般性建议" class="headerlink" title="一般性建议"></a>一般性建议</h3><h1 id="三-查询截取分析"><a href="#三-查询截取分析" class="headerlink" title="三.查询截取分析"></a>三.查询截取分析</h1><blockquote>
<p>联表查询时始终以小结果集驱动大结果集:<a href="https://www.cnblogs.com/shamo89/p/8733025.html" target="_blank" rel="noopener">https://www.cnblogs.com/shamo89/p/8733025.html</a></p>
<p>MySQL性能调优——Query 的优化:<a href="https://www.cnblogs.com/shamo89/p/8733139.html" target="_blank" rel="noopener">https://www.cnblogs.com/shamo89/p/8733139.html</a></p>
</blockquote>
<h2 id="3-1-查询优化"><a href="#3-1-查询优化" class="headerlink" title="3.1 查询优化"></a>3.1 查询优化</h2><h3 id="3-1-1-分析方法"><a href="#3-1-1-分析方法" class="headerlink" title="3.1.1 分析方法"></a>3.1.1 分析方法</h3><ol>
<li>慢查询的开启并捕获</li>
<li>explain+慢SQL分析</li>
<li><code>show profile</code>查询SQL在MySQL服务器里面的执行细节和生命周期情况</li>
<li>SQL数据库服务器的参数调优</li>
</ol>
<h3 id="3-1-2优化原则"><a href="#3-1-2优化原则" class="headerlink" title="3.1.2优化原则"></a>3.1.2优化原则</h3><p><strong>小表驱动大表</strong>（即小的数据集驱动大的数据集）</p>
<p>in和exists的使用：</p>
<ul>
<li>B表的数据集必须小于A表数据集的时候，in优于exists</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> B)</span><br></pre></td></tr></table></figure>

<ul>
<li>A表的数据集小于B表数据集的时候，exists优于in</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> A.id = B.id)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：A表与B表的ID字段应建立索引</p>
<p><strong>EXISTS的使用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">exists</span> (子查询)</span><br></pre></td></tr></table></figure>

<p>理解为：将主查询的数据，放到子查询中做条件验证，将验证的结果(true或false)来决定主查询的数据结果是否得以保留</p>
<p><strong>注意：</strong></p>
<ol>
<li>EXISTS（subquery）只返回TRUE或FALSE，因此子查询中的SELECT * 也可以是SELECT 1或SELECT ‘X’，官方说法是实际执行会忽略SELECT清单，因此没有区别。</li>
<li>EXISTS子查询的实际查询执行过程经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。</li>
<li>EXISTS子查询往往也可以用条件表达式、其他子查询或者JOIN来替代，何种最优需要具体问题具体分析。</li>
</ol>
<h3 id="3-1-3-ORDER-BY关键字优化"><a href="#3-1-3-ORDER-BY关键字优化" class="headerlink" title="3.1.3 ORDER BY关键字优化"></a>3.1.3 ORDER BY关键字优化</h3><p>SQL支持两种方式的排序，<code>FileSort</code>和<code>Index</code></p>
<ul>
<li><p>ORDER BY子句，尽量使用index方式排序，避免使用FileSort方式排序<br>　MySQL支持二种方式的排序，FileSort和Index，Index效率高，它指MySQL扫描索引本身完成排序。FileSort方式效率较低。(用explain可以在extra字段里看到Using index/filesort)<br>  　Order By满足两种情况，会使用Index方式排序<br>  　　　1.Order by语句使用索引最左前列<br>  　　　2.使用where子句与Order by子句条件组合满足索引最左前列。</p>
</li>
<li><p>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</p>
</li>
<li><p>如果不在索引列上，fileSort有两种算法：mysql就要启动<strong>双路排序</strong>和<strong>单路排序</strong><br>　　<strong>双路排序</strong>：MySQL4.1之前是使用双路排序，字面意思就是 <strong>两次扫描磁盘</strong>，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。取一批数据，要对磁盘进行了两次扫描，众所周知，I/O是很耗时的，所以在mysql4.1后，出现了改进算法，就是单路排序<br>  　　<strong>单路排序</strong>：从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。<br>  　　结论及引申出的问题：由于单路是后出的，总体而言好过双路，但是单路也有问题。</p>
</li>
</ul>
<blockquote>
<p>单路的问题<br>　　在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序(创建tmp文件，多路合并),排完再取sort_buffer容量大小，再排…..从而多次IO.<br>　　本来想省一次IO操作，反而导致了大量的I/O操作，反而得不偿失。</p>
</blockquote>
<ul>
<li>总结<br><strong>MySql两种排序方式：文件排序(filesort)或扫描有序索引排序(index)</strong><br><strong>MySql能为排序与查询使用相同的索引</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">KEY a_b_c(a, b, c)</span><br><span class="line"> </span><br><span class="line">order by 能使用索引最左前缀</span><br><span class="line">- order by a</span><br><span class="line">- order by a, b</span><br><span class="line">- order by a desc, c desc</span><br><span class="line"> </span><br><span class="line">如果where使用索引的最左前缀定义为常量，则order by 能使用索引</span><br><span class="line">- where a = const order by b, c</span><br><span class="line">- where a = const and b = const order by c</span><br><span class="line">- where a = const order by b,c</span><br><span class="line">- where a = const and b &gt; const order by b, c</span><br><span class="line"> </span><br><span class="line">不能使用索引进行排序</span><br><span class="line">- order by a asc, b desc, c desc <span class="comment">/* 排序不一致 */</span></span><br><span class="line">- where g = const order by b, c <span class="comment">/* 丢失a索引 */</span></span><br><span class="line">- where a = const order by c <span class="comment">/* 丢失b索引 */</span></span><br><span class="line">- where a = const order by a, d <span class="comment">/* d不是索引的一部分 */</span></span><br><span class="line">- where a in (..) order by b, c <span class="comment">/* 对于排序来说，多个相等条件也是范围查询(in 也是范围查询)！！ */</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-GROUP-BY关键字优化"><a href="#3-1-4-GROUP-BY关键字优化" class="headerlink" title="3.1.4 GROUP BY关键字优化"></a>3.1.4 GROUP BY关键字优化</h3><p>基本与 order by 优化一致</p>
<ol>
<li>group by 实质是先排序后分组，遵照索引建的最佳左前缀</li>
<li>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 参数的设置 + 增大<code>sort_buffer_size</code>参数的设置</li>
<li>where高于having，能写在where限定的条件就不要去having限定了。</li>
</ol>
<h2 id="3-2-慢查询日志"><a href="#3-2-慢查询日志" class="headerlink" title="3.2 慢查询日志"></a>3.2 慢查询日志</h2><h3 id="3-2-1-是什么"><a href="#3-2-1-是什么" class="headerlink" title="3.2.1 是什么"></a>3.2.1 是什么</h3><p>　　MySql的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中<br>　　long_query_time 的默认值为10，意思是运行10秒以上的语句。<br>　　由它来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒种，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。 　　</p>
<h3 id="3-2-2-怎么用"><a href="#3-2-2-怎么用" class="headerlink" title="3.2.2 怎么用"></a>3.2.2 怎么用</h3><p>1.说明<br>　　<strong>默认情况下，MySQL数据库没有开启慢查询日志</strong>，需要我们手动来设置这个参数。<br>　　<strong>当然，如果不是调优需要的话，一般不建议启动该参数</strong>，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p>
<p>2.查看是否开启及如何开启<br>　　默认：<code>show variables like &#39;%slow_query_log%&#39;;</code><br>　　开启：<code>set global show_query_log=1;</code>，这个 <strong>只对当前数据库生效</strong>，如果MySQL重启后则会失效。如果要永久生效，必须修改配置文件my.cnf(其他系统变量也是如此)</p>
<p>3.开启慢查询后，什么样的SQL才会记录到慢查询日志里面呢？<br>　　这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，<br>　　命令：<code>show variables like ‘long_query_time%;’</code>。可以使用命令修改，也可以在my.cnf参数里面修改。<br>　　假如运行时间正好等于 <code>long_query_time</code>的情况，并不会被记录。也就是说，在mysql源码里是 <strong>判断&gt;long_query_time，而非&gt;=</strong>.</p>
<h3 id="3-2-3-日志分析工具-mysqldumpslow"><a href="#3-2-3-日志分析工具-mysqldumpslow" class="headerlink" title="3.2.3 日志分析工具 mysqldumpslow"></a>3.2.3 日志分析工具 mysqldumpslow</h3><p>　　在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具 mysqldumpslow<br>查看 mysqldumpslow 的帮助信息：<code>mysqldumpslow --help</code><br>　　s: 表示按何种方式排序<br>　　c: 访问次数<br>　　l: 锁定时间<br>　　r: 返回记录<br>　　t: 查询时间<br>　　al: 平均锁定时间<br>　　ar: 平均返回记录数<br>　　at: 平均查询时间<br>　　t: 返回前面多少条的数据<br>　　g: 后边搭配一个正则匹配模式，大小写不敏感的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">得到返回记录集最多的10个SQL</span><br><span class="line">mysqldumpslow -s r -t 10 /var/lib/mysql/show.log</span><br><span class="line"> </span><br><span class="line">得到访问次数最多的<span class="number">10</span>个<span class="keyword">SQL</span></span><br><span class="line">mysqldumpslow -s c -t <span class="number">10</span> /<span class="keyword">var</span>/lig/mysql/show.log</span><br><span class="line"> </span><br><span class="line">得到按照时间排序的前<span class="number">10</span>条里面含有左连接的查询语句</span><br><span class="line">mysqldumpslow -s t -t <span class="number">10</span> -g <span class="string">"left join"</span> /<span class="keyword">var</span>/lig/mysql/show.log</span><br><span class="line"> </span><br><span class="line">另外建议在使用这些命令时结构 | 和more使用，否则有可能出现爆屏情况</span><br><span class="line">mysqldumpslow -s r -t <span class="number">10</span> /<span class="keyword">var</span>/lig/mysql/show.log | more</span><br></pre></td></tr></table></figure>

<h2 id="3-3-批量数据脚本"><a href="#3-3-批量数据脚本" class="headerlink" title="3.3 批量数据脚本"></a>3.3 批量数据脚本</h2><p>往表里插入1000W数据</p>
<h3 id="3-3-1-建表"><a href="#3-3-1-建表" class="headerlink" title="3.3.1 建表"></a>3.3.1 建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> bigData;</span><br><span class="line"><span class="keyword">use</span> bigData;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#1 建表dept</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(  </span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,  </span><br><span class="line">    deptno MEDIUMINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,   </span><br><span class="line">    dname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">""</span>,  </span><br><span class="line">    loc <span class="built_in">VARCHAR</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">""</span>  </span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=UTF8 ;  </span><br><span class="line"></span><br><span class="line"><span class="comment">#2 建表emp</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp  </span><br><span class="line">(  </span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,  </span><br><span class="line">    empno MEDIUMINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, <span class="comment">/*编号*/</span>  </span><br><span class="line">    ename <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">""</span>, <span class="comment">/*名字*/</span>  </span><br><span class="line">    job <span class="built_in">VARCHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">""</span>,<span class="comment">/*工作*/</span>  </span><br><span class="line">    mgr MEDIUMINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,<span class="comment">/*上级编号*/</span>  </span><br><span class="line">    hiredate <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="comment">/*入职时间*/</span>  </span><br><span class="line">    sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="comment">/*薪水*/</span>  </span><br><span class="line">    comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="comment">/*红利*/</span>  </span><br><span class="line">    deptno MEDIUMINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">/*部门编号*/</span>  </span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=UTF8 ;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-设置参数log-trust-function-createors"><a href="#3-3-2-设置参数log-trust-function-createors" class="headerlink" title="3.3.2 设置参数log_trust_function_createors"></a>3.3.2 设置参数<code>log_trust_function_createors</code></h3><p>​        当开启二进制日志后，如果变量<code>log_bin_trust_function_creators</code>为OFF，那么创建或修改存储函数就会报“ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you <em>might</em> want to use the less safe log_bin_trust_function_creators variable)”这样的错误。因为二进制日志的一个重要功能是用于<code>主从复制</code>，而存储函数有可能导致主从的数据不一致。</p>
<p>​        所以当开启二进制日志后，参数log_bin_trust_function_creators就会生效，限制存储函数的创建、修改、调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;log_bin_trust_function_creators&#39;;</span><br><span class="line">set global log_bin_trust_function_creators&#x3D;1;</span><br></pre></td></tr></table></figure>

<p>这样添加了参数以后，如果mysqld重启，上述参数又会消失，永久方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows下my.ini[mysqld]加上log_bin_trust_function_creators&#x3D;1</span><br><span class="line">linux下 &#x2F;etc&#x2F;my.cnf下my.cnf[mysqld]加上log_bin_trust_function_creators&#x3D;1</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-创建函数保证每条数据都不同"><a href="#3-3-3-创建函数保证每条数据都不同" class="headerlink" title="3.3.3 创建函数保证每条数据都不同"></a>3.3.3 创建函数保证每条数据都不同</h3><ul>
<li><p>随机产生字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span>    <span class="comment">##方法开始</span></span><br><span class="line"> <span class="keyword">DECLARE</span> chars_str <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span>   <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ'</span>; </span><br><span class="line"> <span class="comment">##声明一个 字符窜长度为 100 的变量 chars_str ,默认值 </span></span><br><span class="line"> <span class="keyword">DECLARE</span> return_str <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">##循环开始</span></span><br><span class="line"> WHILE i &lt; n DO  </span><br><span class="line"> <span class="keyword">SET</span> return_str =<span class="keyword">CONCAT</span>(return_str,<span class="keyword">SUBSTRING</span>(chars_str,<span class="keyword">FLOOR</span>(<span class="number">1</span>+<span class="keyword">RAND</span>()*<span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line"><span class="comment">##concat 连接函数  ，substring(a,index,length) 从index处开始截取</span></span><br><span class="line"> <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"> RETURN return_str;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"> </span><br><span class="line"><span class="comment">#假如要删除</span></span><br><span class="line"><span class="comment">#drop function rand_string;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>随机产生部门编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于随机产生部门编号</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_num( ) </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span>(<span class="number">5</span>)  </span><br><span class="line"><span class="keyword">BEGIN</span>   </span><br><span class="line"> <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">SET</span> i = <span class="keyword">FLOOR</span>(<span class="number">100</span>+<span class="keyword">RAND</span>()*<span class="number">10</span>);  </span><br><span class="line">RETURN i;  </span><br><span class="line"> <span class="keyword">END</span> $$</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#假如要删除</span></span><br><span class="line"><span class="comment">#drop function rand_num;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-4-创建存储过程"><a href="#3-3-4-创建存储过程" class="headerlink" title="3.3.4 创建存储过程"></a>3.3.4 创建存储过程</h3><ul>
<li><p>创建往emp表中插入数据的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_emp10000(<span class="keyword">IN</span> <span class="keyword">START</span> <span class="built_in">INT</span>(<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="built_in">INT</span>(<span class="number">10</span>))  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;   </span><br><span class="line"><span class="comment">#set autocommit =0 把autocommit设置成0  ；提高执行效率</span></span><br><span class="line"> <span class="keyword">SET</span> autocommit = <span class="number">0</span>;    </span><br><span class="line"> REPEAT  <span class="comment">##重复</span></span><br><span class="line"> <span class="keyword">SET</span> i = i + <span class="number">1</span>;  </span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp10000 (empno, ename ,job ,mgr ,hiredate ,sal ,comm ,deptno ) <span class="keyword">VALUES</span> ((<span class="keyword">START</span>+i) ,rand_string(<span class="number">6</span>),<span class="string">'SALESMAN'</span>,<span class="number">0001</span>,<span class="keyword">CURDATE</span>(),<span class="keyword">FLOOR</span>(<span class="number">1</span>+<span class="keyword">RAND</span>()*<span class="number">20000</span>),<span class="keyword">FLOOR</span>(<span class="number">1</span>+<span class="keyword">RAND</span>()*<span class="number">1000</span>),rand_num());  </span><br><span class="line"> UNTIL i = max_num   <span class="comment">##直到  上面也是一个循环</span></span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">REPEAT</span>;  <span class="comment">##满足条件后结束循环</span></span><br><span class="line"> <span class="keyword">COMMIT</span>;   <span class="comment">##执行完成后一起提交</span></span><br><span class="line"> <span class="keyword">END</span> $$</span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment"># DELIMITER ;</span></span><br><span class="line"><span class="comment"># drop PROCEDURE insert_emp;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>创建往dept表中插入数据的存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行存储过程，往dept表添加随机数据</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_dept(<span class="keyword">IN</span> <span class="keyword">START</span> <span class="built_in">INT</span>(<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="built_in">INT</span>(<span class="number">10</span>))  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;   </span><br><span class="line"> <span class="keyword">SET</span> autocommit = <span class="number">0</span>;    </span><br><span class="line"> REPEAT  </span><br><span class="line"> <span class="keyword">SET</span> i = i + <span class="number">1</span>;  </span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (deptno ,dname,loc ) <span class="keyword">VALUES</span> (<span class="keyword">START</span> +i ,rand_string(<span class="number">10</span>),rand_string(<span class="number">8</span>));  </span><br><span class="line"> UNTIL i = max_num  </span><br><span class="line"> <span class="keyword">END</span> <span class="keyword">REPEAT</span>;  </span><br><span class="line"> <span class="keyword">COMMIT</span>;  </span><br><span class="line"> <span class="keyword">END</span> $$ </span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment"># DELIMITER ;</span></span><br><span class="line"><span class="comment"># drop PROCEDURE insert_dept;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-5-调用存储过程"><a href="#3-3-5-调用存储过程" class="headerlink" title="3.3.5 调用存储过程"></a>3.3.5 调用存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> insert_dept(<span class="number">100</span>,<span class="number">10</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">#执行存储过程，往emp表添加50万条数据</span></span><br><span class="line">DELIMITER ;    <span class="comment">#将 结束标志换回 ;</span></span><br><span class="line"><span class="keyword">CALL</span> insert_emp(<span class="number">100001</span>,<span class="number">500000</span>); </span><br><span class="line"><span class="keyword">CALL</span> insert_emp10000(<span class="number">100001</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-show-profile"><a href="#3-4-show-profile" class="headerlink" title="3.4 show profile"></a>3.4 show profile</h2><p>这个是sql分析最强大的<br>默认情况下，参数处于关闭状态，并保存最近15次的运行结果</p>
<h3 id="3-4-1-是什么"><a href="#3-4-1-是什么" class="headerlink" title="3.4.1 是什么"></a>3.4.1 是什么</h3><p>是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</p>
<h3 id="3-4-2-分析步骤"><a href="#3-4-2-分析步骤" class="headerlink" title="3.4.2 分析步骤"></a>3.4.2 分析步骤</h3><ol>
<li><p>是否支持，看看当前的mysql版本是否支持<br><code>show variables like &#39;profiling%&#39;</code></p>
</li>
<li><p>开启功能，默认是关闭，使用前需要开启<br><code>set profiling=on</code></p>
</li>
<li><p>运行SQL<br><code>select * from emp group by id%10 limit 1500000</code><br><code>select * from emp group by id%20 order by 5</code></p>
</li>
<li><p>查看结果，<code>show profiles</code></p>
</li>
<li><p>诊断SQL，<code>show profile cpu, block io for query 2</code> 后的数字是 show profiles 里的query_id<br><strong>参数备注</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all: 显示所有的开销信息</span><br><span class="line">block io: 显示块IO相关开销</span><br><span class="line">context switches: 上下文切换相关开销</span><br><span class="line">cpu: 显示CPU相关开销信息</span><br><span class="line">ipc: 显示发送和接收相关开销信息</span><br><span class="line">memory: 显示内存相关开销信息</span><br><span class="line">page faults: 显示页面错误相关开销信息</span><br><span class="line">source: 显示和source_function, source_file, souce_line相关的开销信息</span><br><span class="line">swaps: 显示交换次数相关开销的信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>日常开发需要注意的结论</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">converting HEAP to MyISAM 查询结果太长，内存都不够用了往磁盘上搬了。</span><br><span class="line">Creating tmp table 创建临时表：copy数据到临时表，用完再删除</span><br><span class="line">Copying to tmp table on disk 把内存中临时表复制到磁盘，很危险！！！</span><br><span class="line">locaked</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3-5-全局查询日志"><a href="#3-5-全局查询日志" class="headerlink" title="3.5 全局查询日志"></a>3.5 全局查询日志</h2><p>永远不要在生产环境上打开，测试时可以</p>
<h3 id="3-5-1-配置启用"><a href="#3-5-1-配置启用" class="headerlink" title="3.5.1 配置启用"></a>3.5.1 配置启用</h3><p>在mysql的my.cnf中，设置如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">general_log=1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录日志文件的路径</span></span><br><span class="line">general_log_file=/path/logfile </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出格式</span></span><br><span class="line">log_output=FILE</span><br></pre></td></tr></table></figure>


<h3 id="3-5-2-编码启用"><a href="#3-5-2-编码启用" class="headerlink" title="3.5.2 编码启用"></a>3.5.2 编码启用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output=<span class="string">'TABLE'</span>;</span><br></pre></td></tr></table></figure>

<p>此后，你所编写的sql语句，将会记录到mysql库里的general_log表。<br>可以用下面的命令查看</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mysql.general_log;</span><br></pre></td></tr></table></figure>



<h1 id="四-MySQL锁机制"><a href="#四-MySQL锁机制" class="headerlink" title="四.MySQL锁机制"></a>四.MySQL锁机制</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><h3 id="4-1-1-锁的定义"><a href="#4-1-1-锁的定义" class="headerlink" title="4.1.1 锁的定义"></a>4.1.1 锁的定义</h3><ol>
<li>锁是计算机协调<strong>多个进程或线程并发访问某一资源的机制</strong>。</li>
<li>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。</li>
<li>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</li>
<li>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</li>
</ol>
<h3 id="4-1-2-锁的分类"><a href="#4-1-2-锁的分类" class="headerlink" title="4.1.2 锁的分类"></a>4.1.2 锁的分类</h3><ol>
<li>从数据操作的类型（读、写）分<ul>
<li><strong>读锁</strong>（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li>
<li><strong>写锁</strong>（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。</li>
</ul>
</li>
<li>从对数据操作的颗粒度<ul>
<li>表锁</li>
<li>行锁</li>
</ul>
</li>
</ol>
<h2 id="4-2-表锁"><a href="#4-2-表锁" class="headerlink" title="4.2 表锁"></a>4.2 表锁</h2><p><strong>表锁的特点</strong>:</p>
<p><strong>偏向MyISAM存储引擎</strong>，开销小，加锁快，无死锁，锁定粒度大，<strong>发生锁冲突的概率最高，并发最低</strong></p>
<h3 id="4-2-1-表锁案例分析"><a href="#4-2-1-表锁案例分析" class="headerlink" title="4.2.1 表锁案例分析"></a>4.2.1 表锁案例分析</h3><p><strong>创建表</strong></p>
<ul>
<li>建表 SQL：<strong>引擎选择 myisam</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mylock (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span></span><br><span class="line">) <span class="keyword">engine</span> myisam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'d'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mylock(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'e'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mylock;</span><br></pre></td></tr></table></figure>

<ul>
<li>mylock 表中的测试数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>手动加锁和释放锁</strong></p>
<ul>
<li>查看当前数据库中表的上锁情况：<code>show open tables;</code>，0 表示未上锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show open tables;</span><br><span class="line">+<span class="comment">--------------------+----------------------------------------------------+--------+-------------+</span></span><br><span class="line">| Database           | Table                                              | In_use | Name_locked |</span><br><span class="line">+<span class="comment">--------------------+----------------------------------------------------+--------+-------------+</span></span><br><span class="line">| performance_schema | events_waits_history                               |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_global_by_event_name          |      0 |           0 |</span><br><span class="line">| performance_schema | setup_timers                                       |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_history_long                          |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_by_digest                |      0 |           0 |</span><br><span class="line">| performance_schema | mutex_instances                                    |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_by_instance                   |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_history                              |      0 |           0 |</span><br><span class="line">| mysql              | db                                                 |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_by_host_by_event_name         |      0 |           0 |</span><br><span class="line">| mysql              | user                                               |      0 |           0 |</span><br><span class="line">| mysql              | columns_priv                                       |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_history_long                     |      0 |           0 |</span><br><span class="line">| performance_schema | performance_timers                                 |      0 |           0 |</span><br><span class="line">| performance_schema | file_instances                                     |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_summary_by_user_by_event_name        |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_history_long                         |      0 |           0 |</span><br><span class="line">| performance_schema | setup_actors                                       |      0 |           0 |</span><br><span class="line">| performance_schema | cond_instances                                     |      0 |           0 |</span><br><span class="line">| mysql              | proxies_priv                                       |      0 |           0 |</span><br><span class="line">| performance_schema | socket_summary_by_instance                         |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_current                          |      0 |           0 |</span><br><span class="line">| mysql              | event                                              |      0 |           0 |</span><br><span class="line">| performance_schema | session_connect_attrs                              |      0 |           0 |</span><br><span class="line">| mysql              | plugin                                             |      0 |           0 |</span><br><span class="line">| performance_schema | threads                                            |      0 |           0 |</span><br><span class="line">| mysql              | time_zone_transition_type                          |      0 |           0 |</span><br><span class="line">| mysql              | time_zone_name                                     |      0 |           0 |</span><br><span class="line">| performance_schema | file_summary_by_event_name                         |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_by_user_by_event_name         |      0 |           0 |</span><br><span class="line">| performance_schema | socket_summary_by_event_name                       |      0 |           0 |</span><br><span class="line">| performance_schema | users                                              |      0 |           0 |</span><br><span class="line">| mysql              | servers                                            |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_by_account_by_event_name      |      0 |           0 |</span><br><span class="line">| db01               | tbl_emp                                            |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_by_host_by_event_name    |      0 |           0 |</span><br><span class="line">| db01               | tblA                                               |      0 |           0 |</span><br><span class="line">| performance_schema | table_io_waits_summary_by_index_usage              |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_current                               |      0 |           0 |</span><br><span class="line">| db01               | user                                               |      0 |           0 |</span><br><span class="line">| mysql              | procs_priv                                         |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_by_thread_by_event_name  |      0 |           0 |</span><br><span class="line">| db01               | emp                                                |      0 |           0 |</span><br><span class="line">| db01               | tbl_user                                           |      0 |           0 |</span><br><span class="line">| db01               | test03                                             |      0 |           0 |</span><br><span class="line">| mysql              | slow_log                                           |      0 |           0 |</span><br><span class="line">| performance_schema | file_summary_by_instance                           |      0 |           0 |</span><br><span class="line">| db01               | article                                            |      0 |           0 |</span><br><span class="line">| performance_schema | objects_summary_global_by_type                     |      0 |           0 |</span><br><span class="line">| db01               | phone                                              |      0 |           0 |</span><br><span class="line">| performance_schema | events_waits_summary_by_thread_by_event_name       |      0 |           0 |</span><br><span class="line">| performance_schema | setup_consumers                                    |      0 |           0 |</span><br><span class="line">| performance_schema | socket_instances                                   |      0 |           0 |</span><br><span class="line">| performance_schema | rwlock_instances                                   |      0 |           0 |</span><br><span class="line">| db01               | tbl_dept                                           |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_by_user_by_event_name    |      0 |           0 |</span><br><span class="line">| db01               | staffs                                             |      0 |           0 |</span><br><span class="line">| db01               | class                                              |      0 |           0 |</span><br><span class="line">| mysql              | general_log                                        |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_summary_global_by_event_name         |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_summary_by_account_by_event_name     |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_by_account_by_event_name |      0 |           0 |</span><br><span class="line">| performance_schema | table_lock_waits_summary_by_table                  |      0 |           0 |</span><br><span class="line">| performance_schema | hosts                                              |      0 |           0 |</span><br><span class="line">| performance_schema | setup_objects                                      |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_current                              |      0 |           0 |</span><br><span class="line">| mysql              | time_zone                                          |      0 |           0 |</span><br><span class="line">| mysql              | tables_priv                                        |      0 |           0 |</span><br><span class="line">| performance_schema | table_io_waits_summary_by_table                    |      0 |           0 |</span><br><span class="line">| mysql              | time_zone_leap_second                              |      0 |           0 |</span><br><span class="line">| db01               | book                                               |      0 |           0 |</span><br><span class="line">| performance_schema | session_account_connect_attrs                      |      0 |           0 |</span><br><span class="line">| db01               | mylock                                             |      0 |           0 |</span><br><span class="line">| mysql              | func                                               |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_summary_global_by_event_name     |      0 |           0 |</span><br><span class="line">| performance_schema | events_statements_history                          |      0 |           0 |</span><br><span class="line">| performance_schema | accounts                                           |      0 |           0 |</span><br><span class="line">| mysql              | time_zone_transition                               |      0 |           0 |</span><br><span class="line">| db01               | dept                                               |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_summary_by_host_by_event_name        |      0 |           0 |</span><br><span class="line">| performance_schema | events_stages_summary_by_thread_by_event_name      |      0 |           0 |</span><br><span class="line">| mysql              | proc                                               |      0 |           0 |</span><br><span class="line">| performance_schema | setup_instruments                                  |      0 |           0 |</span><br><span class="line">| performance_schema | host_cache                                         |      0 |           0 |</span><br><span class="line">+<span class="comment">--------------------+----------------------------------------------------+--------+-------------+</span></span><br><span class="line">84 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>添加锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> 表名<span class="number">1</span> <span class="keyword">read</span>(write), 表名<span class="number">2</span> <span class="keyword">read</span>(write), ...;</span><br></pre></td></tr></table></figure>

<ul>
<li>释放表锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<h4 id="读锁示例"><a href="#读锁示例" class="headerlink" title="读锁示例"></a>读锁示例</h4><ul>
<li>在 session 1 会话中，给 mylock 表加个读锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; lock table mylock read;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能读取 mylock 表：可以读</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session1 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能读取 book 表：并不行。。。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session1 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">ERROR 1100 (HY000): Table 'book' was not locked <span class="keyword">with</span> <span class="keyword">LOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 session2 会话中能不能读取 mylock 表：可以读</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session2 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能修改 mylock 表：并不行。。。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session1 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; update mylock set name='a2' where id=1;</span><br><span class="line">ERROR 1099 (HY000): Table 'mylock' was locked <span class="keyword">with</span> a <span class="keyword">READ</span> <span class="keyword">lock</span> <span class="keyword">and</span> can<span class="string">'t be updated</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 session2 会话中能不能修改 mylock 表：阻塞，一旦 mylock 表锁释放，则会执行修改操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session2 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; update mylock set name='a2' where id=1;</span><br><span class="line"><span class="comment"># 在这里阻塞着呢~~~</span></span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>当前 session 和其他 session 均可以读取加了读锁的表</li>
<li>当前 session 不能读取其他表，并且不能修改加了读锁的表</li>
<li>其他 session 想要修改加了读锁的表，必须等待其读锁释放</li>
</ol>
<h4 id="写锁示例"><a href="#写锁示例" class="headerlink" title="写锁示例"></a>写锁示例</h4><ul>
<li>在 session 1 会话中，给 mylock 表加个写锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; lock table mylock write;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能读取 mylock 表：阔以</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session1 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | name |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  1 | a2   |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">|  4 | d    |</span><br><span class="line">|  5 | e    |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能读取 book 表：不阔以</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session1 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">ERROR 1100 (HY000): Table 'book' was not locked <span class="keyword">with</span> <span class="keyword">LOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 session1 会话中能不能修改 mylock 表：当然可以啦，加写锁就是为了修改呀</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">################# session1 中的操作 #################</span><br><span class="line"></span><br><span class="line">mysql&gt; update mylock set name&#x3D;&#39;a2&#39; where id&#x3D;1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<ul>
<li>在 session2 会话中能不能读取 mylock 表：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">################# session2 中的操作 #################</span></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mylock;</span><br><span class="line"><span class="comment"># 在这里阻塞着呢~~~</span></span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>当前 session 可以读取和修改加了写锁的表</li>
<li>当前 session 不能读取其他表</li>
<li>其他 session 想要读取加了写锁的表，必须等待其读锁释放</li>
</ol>
<blockquote>
<p><strong>案例结论</strong></p>
</blockquote>
<ol>
<li>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加<strong>读锁</strong>，在执行增删改操作前，会自动给涉及的表加<strong>写锁</strong>。</li>
<li>MySQL的表级锁有两种模式：<ul>
<li>表共享读锁（Table Read Lock）</li>
<li>表独占写锁（Table Write Lock）</li>
</ul>
</li>
</ol>
<p><img src="/images/2020112238.png" alt="image-20200805154049814"></p>
<hr>
<p>结论：结合上表，所以对MyISAM表进行操作，会有以下情况：</p>
<ol>
<li>对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li>
<li>对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作</li>
<li>简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。</li>
</ol>
<h3 id="4-2-2-表锁分析"><a href="#4-2-2-表锁分析" class="headerlink" title="4.2.2 表锁分析"></a>4.2.2 表锁分析</h3><ul>
<li>查看哪些表被锁了，0 表示未锁，1 表示被锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>【如何分析表锁定】可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定，通过 <code>show status like &#39;table%&#39;;</code> 命令查看</p>
<ol>
<li>Table_locks_immediate：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1；</li>
<li>Table_locks_waited：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加1），此值高则说明存在着较严重的表级锁争用情况；</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show status like 'table%';</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">| Variable_name              | Value  |</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">| Table_locks_immediate      | 500440 |</span><br><span class="line">| Table_locks_waited         | 1      |</span><br><span class="line">| Table_open_cache_hits      | 500070 |</span><br><span class="line">| Table_open_cache_misses    | 5      |</span><br><span class="line">| Table_open_cache_overflows | 0      |</span><br><span class="line">+<span class="comment">----------------------------+--------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>此外，Myisam的读写锁调度是写优先，这也是myisam不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，<strong>大量的更新会使查询很难得到锁</strong>，从而造成永远阻塞</li>
</ul>
<h2 id="4-3-行锁"><a href="#4-3-行锁" class="headerlink" title="4.3 行锁"></a>4.3 行锁</h2><p><strong>行锁的特点:</strong></p>
<ol>
<li><strong>偏向InnoDB存储引擎</strong>，开销大，加锁慢；会出现死锁；<strong>锁定粒度最小，发生锁冲突的概率最低，并发度也最高</strong>。</li>
<li>InnoDB与MyISAM的最大不同有两点：<strong>一是支持事务（TRANSACTION）；二是采用了行级锁</strong></li>
</ol>
<h3 id="4-3-1-事务复习"><a href="#4-3-1-事务复习" class="headerlink" title="4.3.1 事务复习"></a>4.3.1 事务复习</h3><blockquote>
<p><strong>行锁支持事务，复习下老知识</strong></p>
</blockquote>
<p><strong>事务（Transation）及其ACID属性</strong></p>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。</p>
<ol>
<li><strong>原子性</strong>（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</li>
<li><strong>一致性</strong>（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</li>
<li><strong>隔离性</strong>（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</li>
<li><strong>持久性</strong>（Durability）：事务院成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</li>
</ol>
<hr>
<p><strong>并发事务处理带来的问题</strong></p>
<ol>
<li><p>更新丢失</p>
<p>（Lost Update）：</p>
<ul>
<li>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题一一最后的更新覆盖了由其他事务所做的更新。</li>
<li>例如，两个程序员修改同一java文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。</li>
<li>如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</li>
</ul>
</li>
<li><p>脏读</p>
<p>（Dirty Reads）：</p>
<ul>
<li>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做”脏读”。</li>
<li>一句话：事务A读取到了事务B已修改但尚未提交的的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</li>
</ul>
</li>
<li><p>不可重复读</p>
<p>（Non-Repeatable Reads）：</p>
<ul>
<li>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读”。</li>
<li>一句话：事务A读取到了事务B已经提交的修改数据，不符合隔离性</li>
</ul>
</li>
<li><p>幻读</p>
<p>（Phantom Reads）</p>
<ul>
<li>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读一句话：事务A读取到了事务B体提交的新增数据，不符合隔离性。</li>
<li>多说一句：幻读和脏读有点类似，脏读是事务B里面修改了数据，幻读是事务B里面新增了数据。</li>
</ul>
</li>
</ol>
<hr>
<p><strong>事物的隔离级别</strong></p>
<ol>
<li>脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</li>
<li>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。</li>
<li>同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</li>
<li>查看当前数据库的事务隔离级别：<code>show variables like &#39;tx_isolation&#39;;</code> mysql 默认是可重复读</li>
</ol>
<p><img src="/images/2020112239.png" alt="image-20200805155415247"></p>
<h3 id="4-3-2-行锁案例"><a href="#4-3-2-行锁案例" class="headerlink" title="4.3.2 行锁案例"></a>4.3.2 行锁案例</h3><p><strong>行锁案例分析：</strong></p>
<p><strong>创建表</strong></p>
<ul>
<li>建表 SQL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_innodb_lock (a <span class="built_in">INT</span>(<span class="number">11</span>),b <span class="built_in">VARCHAR</span>(<span class="number">16</span>))<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'b2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">'4000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">'5000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">6</span>, <span class="string">'6000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">'7000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">8</span>, <span class="string">'8000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">'9000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_innodb_lock <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'b1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> test_innodb_a_ind <span class="keyword">ON</span> test_innodb_lock(a);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> test_innodb_lock_b_ind <span class="keyword">ON</span> test_innodb_lock(b);</span><br></pre></td></tr></table></figure>

<ul>
<li>test_innodb_lock 表中的测试数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_innodb_lock;</span><br><span class="line">+------+------+</span><br><span class="line">| a    | b    |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | b2   |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4000 |</span><br><span class="line">|    5 | 5000 |</span><br><span class="line">|    6 | 6000 |</span><br><span class="line">|    7 | 7000 |</span><br><span class="line">|    8 | 8000 |</span><br><span class="line">|    9 | 9000 |</span><br><span class="line">|    1 | b1   |</span><br><span class="line">+------+------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM test_innodb_lock;</span><br><span class="line">+<span class="comment">------------------+------------+------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| Table            | Non_unique | Key_name               | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | <span class="keyword">Comment</span> | Index_comment |</span><br><span class="line">+<span class="comment">------------------+------------+------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line">| test_innodb_lock |          <span class="number">1</span> | test_innodb_a_ind      |            <span class="number">1</span> | a           | A         |           <span class="number">9</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   | YES  | BTREE      |         |               |</span><br><span class="line">| test_innodb_lock |          <span class="number">1</span> | test_innodb_lock_b_ind |            <span class="number">1</span> | b           | A         |           <span class="number">9</span> |     <span class="literal">NULL</span> | <span class="literal">NULL</span>   | YES  | BTREE      |         |               |</span><br><span class="line">+<span class="comment">------------------+------------+------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>操作同一行数据：</strong></p>
<ul>
<li>session1 开启事务，修改 test_innodb_lock 中的数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<ul>
<li>session2 开启事务，修改 test_innodb_lock 中同一行数据，将导致 session2 发生阻塞，一旦 session1 提交事务，session2 将执行更新操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4002' where a=4;</span><br><span class="line"><span class="comment"># 在这儿阻塞着呢~~~</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间太长，会报超时错误哦</span></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br><span class="line">ERROR 1205 (HY000): <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure>

<p><strong>操作不同行数据：</strong></p>
<ul>
<li>session1 开启事务，修改 test_innodb_lock 中的数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='4001' where a=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<ul>
<li>session2 开启事务，修改 test_innodb_lock 中不同行的数据</li>
<li>由于采用行锁，session2 和 session1 互不干涉，所以 session2 中的修改操作没有阻塞</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<p><strong>无索引导致行锁升级为表锁：</strong></p>
<ul>
<li>session1 开启事务，修改 test_innodb_lock 中的数据，varchar 不用 ’ ’ ，导致系统自动转换类型，导致索引失效</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set a=44 where b=4000;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<ul>
<li>session2 开启事务，修改 test_innodb_lock 中不同行的数据</li>
<li>由于发生了自动类型转换，索引失效，导致行锁变为表锁</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br><span class="line"><span class="comment"># 在这儿阻塞着呢~~~</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-3-间隙锁"><a href="#4-3-3-间隙锁" class="headerlink" title="4.3.3 间隙锁"></a>4.3.3 间隙锁</h3><p><strong>什么是间隙锁：</strong></p>
<ol>
<li>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP）”</li>
<li>InnoDB也会对这个“间隙”加锁，这种锁机制是所谓的间隙锁（Next-Key锁）</li>
</ol>
<p><strong>间隙锁的危害</strong>：</p>
<ol>
<li>因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。</li>
<li>间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</li>
</ol>
<hr>
<p><strong>间隙锁示例</strong>：</p>
<ul>
<li>test_innodb_lock 表中的数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_innodb_lock;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| a    | b    |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | b2   |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4000 |</span><br><span class="line">|    5 | 5000 |</span><br><span class="line">|    6 | 6000 |</span><br><span class="line">|    7 | 7000 |</span><br><span class="line">|    8 | 8000 |</span><br><span class="line">|    9 | 9000 |</span><br><span class="line">|    1 | b1   |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>session1 开启事务，执行修改 a &gt; 1 and a &lt; 6 的数据，这会导致 mysql 将 a = 2 的数据行锁住（虽然表中并没有这行数据）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='Heygo' where a&gt;1 and a&lt;6;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 3  Changed: 3  Warnings: 0</span><br></pre></td></tr></table></figure>

<ul>
<li>session2 开启事务，修改 test_innodb_lock 中不同行的数据，也会导致阻塞，直至 session1 提交事务</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='9001' where a=9;</span><br><span class="line"><span class="comment"># 在这儿阻塞着呢~~~</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-4-手动行锁"><a href="#4-3-4-手动行锁" class="headerlink" title="4.3.4 手动行锁"></a>4.3.4 手动行锁</h3><p><strong>如何锁定一行:</strong></p>
<ul>
<li><code>select xxx ... for update</code> 锁定某一行后，其它的操作会被阻塞，直到锁定行的会话提交</li>
<li>session1 开启事务，手动执行 for update 锁定指定行，待执行完指定操作时再将数据提交</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_innodb_lock  where a=8 for update;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| a    | b    |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    8 | 8000 |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li>session2 开启事务，修改 session1 中被锁定的行，会导致阻塞，直至 session1 提交事务</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update test_innodb_lock set b='XXX' where a=8;</span><br><span class="line"><span class="comment"># 在这儿阻塞着呢~~~</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-5-行锁分析"><a href="#4-3-5-行锁分析" class="headerlink" title="4.3.5 行锁分析"></a>4.3.5 行锁分析</h3><p><strong>案例结论:</strong></p>
<ol>
<li>Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。</li>
<li><strong>当系统并发量较高的时候，Innodb的整体性能和MyISAM相比就会有比较明显的优势了</strong>。</li>
<li>但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候（索引失效，导致行锁变表锁），可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</li>
</ol>
<p><strong>行锁分析</strong>:</p>
<p><strong>如何分析行锁定</strong></p>
<ul>
<li>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_row_lock%'</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; show status like 'innodb_row_lock%';</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">| Variable_name                 | Value  |</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0      |</span><br><span class="line">| Innodb_row_lock_time          | 212969 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 42593  |</span><br><span class="line">| Innodb_row_lock_time_max      | 51034  |</span><br><span class="line">| Innodb_row_lock_waits         | 5      |</span><br><span class="line">+<span class="comment">-------------------------------+--------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>对各个状态量的说明如下：</strong></p>
<ol>
<li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</li>
<li>Innodb_row_lock_time：从系统启动到现在锁定总时间长度；</li>
<li>Innodb_row_lock_time_avg：每次等待所花平均时间；</li>
<li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</li>
<li>Innodb_row_lock_waits：系统启动后到现在总共等待的次数；</li>
</ol>
<hr>
<p><strong>对于这5个状态变量，比较重要的主要是</strong></p>
<ol>
<li>Innodb_row_lock_time_avg（等待平均时长）</li>
<li>Innodb_row_lock_waits（等待总次数）</li>
<li>Innodb_row_lock_time（等待总时长）</li>
</ol>
<hr>
<p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p>
<h3 id="4-3-6-行锁优化"><a href="#4-3-6-行锁优化" class="headerlink" title="4.3.6 行锁优化"></a>4.3.6 行锁优化</h3><p><strong>优化建议:</strong></p>
<ol>
<li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能较少检索条件，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能低级别事务隔离</li>
</ol>
<h2 id="4-4-页锁"><a href="#4-4-页锁" class="headerlink" title="4.4 页锁"></a>4.4 页锁</h2><ol>
<li>开销和加锁时间界于表锁和行锁之间：会出现死锁；</li>
<li>锁定粒度界于表锁和行锁之间，并发度一般。</li>
<li>了解即可</li>
</ol>
<h1 id="五-主从复制"><a href="#五-主从复制" class="headerlink" title="五.主从复制"></a>五.主从复制</h1><blockquote>
<p><a href="https://www.jianshu.com/p/faf0127f1cb2" target="_blank" rel="noopener">https://www.jianshu.com/p/faf0127f1cb2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL高级</tag>
      </tags>
  </entry>
</search>
