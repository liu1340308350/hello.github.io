<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7上安装docker</title>
    <url>/2019/12/17/Centos7%E4%B8%8A%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>Docker分为社区版CE和企业版EE。CE版完全足够个人使用，选择stable版本即可。</p>
<a id="more"></a>

<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p>1.Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p>
<p>通过 <strong>uname -r</strong> 命令查看你当前的内核版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uname -r</span><br></pre></td></tr></table></figure>

<p><img src="/images/2019121701.png" alt="image-20201217213427007"></p>
<p>2.使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum update</span><br></pre></td></tr></table></figure>

<p>3.卸载旧版本(如果安装过旧版本的话)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<p>4.安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>5.设置yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><img src="/images/2019121702.png" alt="image-20201217213649924"></p>
<p>6.可以查看所有仓库中所有docker版本，并选择特定版本安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<p>7.安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版</span><br><span class="line"># sudo yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce</span><br></pre></td></tr></table></figure>

<p>8.启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>9.设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>10.验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker version</span><br></pre></td></tr></table></figure>



<h2 id="二、配置镜像加速"><a href="#二、配置镜像加速" class="headerlink" title="二、配置镜像加速"></a>二、配置镜像加速</h2><blockquote>
<p>阿里云界面：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
</blockquote>
<p>Docker客户端版本需要大于 1.10.0 </p>
<p>可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;26udi78a.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>





<h2 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h2><p>1.因为之前已经安装过旧版本的docker，在安装的时候报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Transaction check error:</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure>

<p>2.卸载旧版本的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure>

<p>3.再次安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo yum install docker-ce</span><br></pre></td></tr></table></figure>



<p>2.yum安装的时候遇到公钥尚未安装的问题解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 yum install xxxx 命令之后添加 --nogpgcheck 进行跳过公钥检查安装</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p>导入密钥重新安装Docker</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rpm --<span class="keyword">import</span> http:<span class="comment">//mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装RabbitMQ</title>
    <url>/2020/07/27/Docker%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<p> RabbitMQ是基于AMQP的一款消息管理系统。AMQP(Advanced Message Queuing Protocol)，是一个提供消息服务的应用层标准高级消息队列协议，其中RabbitMQ就是基于这种协议的一种实现。</p>
<a id="more"></a>

<h1 id="Docker快速安装"><a href="#Docker快速安装" class="headerlink" title="Docker快速安装"></a>Docker快速安装</h1><p>1.docker search选择版本</p>
<p>2.docker pull 下载镜像</p>
<p>3.docker运行即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 rabbitmq:版本号</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020072701.png" alt="image-20201219141443802"></p>
<h1 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h1><p><strong>可能出现的问题</strong>：Windows环境下浏览器无法访问虚拟机开的rabbitmq服务</p>
<p>安装首先确保RabbitMQ的端口等配置正确，另外开放linux防火墙端口。如果依旧不能访问web界面，那么可能是rabbitmq没有开启web管理。</p>
<p>只需要通过<code>rabbitmq-plugins list</code>命令列出插件的启用和禁用状态。然后再修改即可。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.开启RabbitMQ  　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 rabbitmq</span><br></pre></td></tr></table></figure>

<p>2.进入RabbitMQ命令界面　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>3.开启　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令整理</title>
    <url>/2019/10/01/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><a id="more"></a>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class="line">docker images                                    #查看本地所有镜像</span><br><span class="line">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class="line">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class="line">docker rmi $&#123;IMAGE NAME&#x2F;ID&#125;                      #删除镜像</span><br><span class="line">docker rm $&#123;CONTAINER NAME&#x2F;ID&#125;                   #删除容器</span><br><span class="line">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class="line">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class="line">docker start $&#123;CONTAINER NAME&#x2F;ID&#125;                #运行一个以前运行过的容器</span><br><span class="line">docker stop $&#123;CONTAINER NAME&#x2F;ID&#125;                 #停止一个正在运行的容器</span><br><span class="line">docker logs $&#123;CONTAINER NAME&#x2F;ID&#125;                 #显示运行容器的日志</span><br><span class="line">docker run...                                    #运行一个容器</span><br><span class="line">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class="line">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class="line">    -e $&#123;env name&#125;&#x3D;$&#123;env value&#125;                       #添加环境变量</span><br><span class="line">    -d                                                #后台运行</span><br><span class="line">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br></pre></td></tr></table></figure>

<h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Advance use </span><br><span class="line">docker ps -f &quot;status&#x3D;exited&quot;                                   #显示所有退出的容器</span><br><span class="line">docker ps -a -q                                                #显示所有容器id</span><br><span class="line">docker ps -f &quot;status&#x3D;exited&quot; -q                                #显示所有退出容器的id</span><br><span class="line">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class="line">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class="line">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class="line">docker rm $(docker ps -f &quot;status&#x3D;exited&quot; -q)                   #删除所有退出的容器</span><br><span class="line">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class="line">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class="line">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME&#x2F;ID&#125; &#x2F;bin&#x2F;bash                 #进入容器内</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME&#x2F;ID&#125; ping $&#123;CONTAINER NAME&#x2F;ID&#125; #一个容器ping另外一个容器</span><br><span class="line">docker top $&#123;CONTAINER NAME&#x2F;ID&#125;                                #显示一个容器的top信息</span><br><span class="line">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class="line">    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class="line">    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class="line">    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class="line">docker system </span><br><span class="line">      docker system df           #显示硬盘占用</span><br><span class="line">      docker system events       #显示容器的实时事件</span><br><span class="line">      docker system info         #显示系统信息</span><br><span class="line">      docker system prune        #清理文件</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020110101.png" alt="image-20201101173643142"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建MySQL集群-PXC方案</title>
    <url>/2020/08/21/Docker%E6%90%AD%E5%BB%BAMySQL%E9%9B%86%E7%BE%A4-PXC%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>尝试通过Dcoekr搭建MySQL集群</p>
<a id="more"></a>

<p>常见的集群方案包括：Replication，Percona XtraDB Cluster（PXC）</p>
<blockquote>
<p>MySQL主从复制：<a href="https://www.jianshu.com/p/faf0127f1cb2" target="_blank" rel="noopener">https://www.jianshu.com/p/faf0127f1cb2</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>Replication</th>
<th>PXC</th>
</tr>
</thead>
<tbody><tr>
<td>数据同步是单向的，master负责写，然后异步复制给slave；如果slave写入数据，不会复制给master。</td>
<td>数据同步时双向的，任何一个mysql节点写入数据，都会同步到集群中其它的节点。</td>
</tr>
<tr>
<td>异步复制，从和主无法保证数据的一致性</td>
<td>同步复制，事务在所有集群节点要么同时提交，要么同时不提交</td>
</tr>
</tbody></table>
<p>Replication方案适用于日志，博客这样的网站，存储一些价值较低的内容。</p>
<p>而PXC具备强一致性，数据同步是双向的特点，另外PerconaServer是MySQL改进版，性能提升很大。所以这里我选择的是PXC方案搭建Mysql集群。</p>
<h3 id="一、搭建准备"><a href="#一、搭建准备" class="headerlink" title="一、搭建准备"></a>一、搭建准备</h3><p>Docker的安装与配置非常简单。</p>
<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure>

<h4 id="2-配置docker镜像加速器"><a href="#2-配置docker镜像加速器" class="headerlink" title="2.配置docker镜像加速器"></a>2.配置docker镜像加速器</h4><p>这里我使用的阿里云的加速器</p>
<h4 id="3-docker常用命令"><a href="#3-docker常用命令" class="headerlink" title="3.docker常用命令"></a>3.docker常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search   #查找镜像</span><br><span class="line">docker images	#查看所有镜像</span><br><span class="line">docker pull		#下载镜像</span><br><span class="line">docker rmi		#删除镜像</span><br><span class="line">docker ps -a	#查看正在运行的实例</span><br></pre></td></tr></table></figure>



<h3 id="二、Mysql-PXC集群环境部署"><a href="#二、Mysql-PXC集群环境部署" class="headerlink" title="二、Mysql PXC集群环境部署"></a>二、Mysql PXC集群环境部署</h3><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull docker.io&#x2F;percona&#x2F;percona-xtradb-cluster</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>可以使用<code>docker tag</code>改名，这里我将 docker.io/percona/percona-xtradb-cluster更名为pxc</p>
<h4 id="2-创建内部网络"><a href="#2-创建内部网络" class="headerlink" title="2.创建内部网络"></a>2.创建内部网络</h4><p>出于安全考虑，需要给PXC集群实例创建Docker内部网络</p>
<p>这里我搭建集群使用的是<strong>5节点</strong>，网段可以自己规定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create --subnet&#x3D;172.10.0.0&#x2F;24 net1</span><br><span class="line">docker network inspect net1</span><br><span class="line">docker network rm net1</span><br></pre></td></tr></table></figure>

<h4 id="3-创建Docker卷"><a href="#3-创建Docker卷" class="headerlink" title="3.创建Docker卷"></a>3.创建Docker卷</h4><p>容器中的PXC节点映射数据目录的解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create --name v1</span><br><span class="line">docker volume create --name v2</span><br><span class="line">docker volume create --name v3</span><br><span class="line">docker volume create --name v4</span><br><span class="line">docker volume create --name v5</span><br></pre></td></tr></table></figure>

<p>查看docker卷信息：<code>docker inspect v1</code></p>
<h4 id="4-创建PXC容器"><a href="#4-创建PXC容器" class="headerlink" title="4.创建PXC容器"></a>4.创建PXC容器</h4><p>5个PXC容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -v v1:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node1 --net&#x3D;net1 --ip 172.10.0.2 pxc </span><br><span class="line"></span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v2:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node2 --net&#x3D;net1 --ip 172.10.0.3 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v3:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node3 --net&#x3D;net1 --ip 172.10.0.4 pxc </span><br><span class="line"></span><br><span class="line">docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v4:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node4 --net&#x3D;net1 --ip 172.10.0.5 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v5:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node5 --net&#x3D;net1 --ip 172.10.0.6 pxc</span><br></pre></td></tr></table></figure>

<h3 id="三、验证是否创建成功PCX集群"><a href="#三、验证是否创建成功PCX集群" class="headerlink" title="三、验证是否创建成功PCX集群"></a>三、验证是否创建成功PCX集群</h3><p>在数据库中创建5个DB：</p>
<p><img src="/images/2020110201.png" alt="image-20201102100706388"></p>
<p>在DB1中新建test数据库并创建student表：</p>
<p><img src="/images/2020110202.png" alt="image-20201102100820614"></p>
<p>刷新之后，可以看到DB2,DB3,DB4,DB5全部同步到与DB1一致</p>
<p><img src="/images/2020110203.png" alt="image-20201102100858654"></p>
<h3 id="四、数据库负载的配置"><a href="#四、数据库负载的配置" class="headerlink" title="四、数据库负载的配置"></a>四、数据库负载的配置</h3><p>数据库负载均衡的必要性：</p>
<p>虽然搭建了集群，但是不使用数据库负载均衡，单节点处理所有请求，会暴露负载高，性能差的问题</p>
<p>这里可以使用<strong>Haproxy</strong>做负载均衡，将请求均匀的分发给每个节点，单节点负载会轻松很多。</p>
<h4 id="1-haproxy的下载"><a href="#1-haproxy的下载" class="headerlink" title="1.haproxy的下载"></a>1.haproxy的下载</h4><p><code>docker pull haproxy</code></p>
<h4 id="2-创建haproxy配置文件"><a href="#2-创建haproxy配置文件" class="headerlink" title="2.创建haproxy配置文件"></a>2.创建haproxy配置文件</h4><blockquote>
<p>配置参考：<a href="http://zhangge.net/5125.html" target="_blank" rel="noopener">http://zhangge.net/5125.html</a></p>
</blockquote>
<p>在/home/soft/haproxy/目录下创建haproxy.cfg文件</p>
<p>haproxy.cfg</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">	#工作目录</span><br><span class="line">	chroot /usr/local/etc/haproxy</span><br><span class="line">	#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><br><span class="line">	log 127.0.0.1 local5 info</span><br><span class="line">	#守护进程运行</span><br><span class="line">	daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">	log global</span><br><span class="line">	mode http</span><br><span class="line">	#日志格式</span><br><span class="line">	option httplog</span><br><span class="line">	#日志中不记录负载均衡的心跳检测记录</span><br><span class="line">	option dontlognull</span><br><span class="line">	#连接超时（毫秒）</span><br><span class="line">	timeout connect 5000</span><br><span class="line">	#客户端超时（毫秒）</span><br><span class="line">	timeout client 50000</span><br><span class="line">	#服务器超时（毫秒）</span><br><span class="line">	timeout server 50000</span><br><span class="line"></span><br><span class="line">#监控界面</span><br><span class="line">listen admin_stats</span><br><span class="line">	#监控界面的访问的IP和端口</span><br><span class="line">	bind 0.0.0.0:8888</span><br><span class="line">	#访问协议</span><br><span class="line">	mode http</span><br><span class="line">	#URI相对地址</span><br><span class="line">	stats uri /dbs</span><br><span class="line">	#统计报告格式</span><br><span class="line">	stats realm     Global\ statistics</span><br><span class="line">	#登陆帐户信息</span><br><span class="line">	stats auth  admin:123456</span><br><span class="line"> #数据库负载均衡</span><br><span class="line"> listen  proxy-mysql</span><br><span class="line">	#访问的IP和端口</span><br><span class="line">	bind  0.0.0.0:3306</span><br><span class="line">	#网络协议</span><br><span class="line">	mode  tcp</span><br><span class="line">	#负载均衡算法（轮询算法）</span><br><span class="line">	#轮询算法：roundrobin</span><br><span class="line">	#权重算法：static-rr</span><br><span class="line">	#最少连接算法：leastconn</span><br><span class="line">	#请求源IP算法：source</span><br><span class="line">	balance  roundrobin</span><br><span class="line">	#日志格式</span><br><span class="line">	option  tcplog</span><br><span class="line">   	#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><br><span class="line">        option  mysql-check user haproxy</span><br><span class="line">        server  MySQL_1 172.10.1.2:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_2 172.10.1.3:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_3 172.10.1.4:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_4 172.10.1.5:3306 check weight 1 maxconn 2000</span><br><span class="line">        server  MySQL_5 172.10.1.6:3306 check weight 1 maxconn 2000</span><br><span class="line">	#使用keepalive检测死链</span><br><span class="line">	option  tcpka</span><br></pre></td></tr></table></figure>



<h4 id="4-实例化haproxy"><a href="#4-实例化haproxy" class="headerlink" title="4.实例化haproxy"></a>4.实例化haproxy</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.10.0.7 haproxy</span><br></pre></td></tr></table></figure>

<h4 id="5-登陆到交互容器里"><a href="#5-登陆到交互容器里" class="headerlink" title="5.登陆到交互容器里"></a>5.登陆到交互容器里</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it h1 bash</span><br><span class="line">haproxy -f &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg</span><br></pre></td></tr></table></figure>

<h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p><img src="/images/2020110204.png" alt="image-20201102120345130"></p>
<p>首页展示：</p>
<p><img src="/images/2020110205.png" alt="image-20201102120404832"></p>
]]></content>
      <categories>
        <category>PXC</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Duplicate entry for key &#39;PRIMARY&#39;</title>
    <url>/2020/08/14/Duplicate-entry-for-key-PRIMARY/</url>
    <content><![CDATA[<p>在执行数据库插入语句时，遇到一个比较罕见的错误，记录一下</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Duplicate entry &#39;322&#39; for key &#39;PRIMARY&#39;</span><br></pre></td></tr></table></figure>



<p>经过相关查阅，在Stack Overflow上找到了解决方法：</p>
<p><img src="/images/2020081801.png" alt=""></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL错误</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker设置镜像自启动</title>
    <url>/2020/11/09/Docker%E8%AE%BE%E7%BD%AE%E9%95%9C%E5%83%8F%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>Docker便捷小技巧：</p>
<a id="more"></a>

<p>1.发现没启动</p>
<p><code>docker ps</code></p>
<p>2.查看所有安装的镜像</p>
<p><code>docker ps -a</code></p>
<p>3.设置总是自动启动</p>
<p><code>docker update 镜像id --restart=always</code></p>
<p>4.重启测试一下</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch7笔记</title>
    <url>/2020/12/02/ElasticSearch7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>ElasticSearch7学习笔记</p>
<a id="more"></a>

<h1 id="ElasticSearch原理及部署"><a href="#ElasticSearch原理及部署" class="headerlink" title="ElasticSearch原理及部署"></a>ElasticSearch原理及部署</h1><blockquote>
<p>中文官网：<a href="https://www.elastic.co/cn/elasticsearch/" target="_blank" rel="noopener">https://www.elastic.co/cn/elasticsearch/</a></p>
<p>阮一峰：<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>
</blockquote>
<h2 id="搜索原理"><a href="#搜索原理" class="headerlink" title="搜索原理"></a>搜索原理</h2><p>ElasticSearch是独立的网络上的一个或一组进程节点，对外提供搜索服务（http/transport协议），对内就是一个搜索数据库。</p>
<p>对于搜索，是以词为单位做最基本的搜索单元，依靠分词器构造分词（其中英文分词器有空格分词器），然后用分词构建倒排索引。</p>
<p><img src="/images/2020120401.png" alt="image-20201204152921640"></p>
<p>正向索引</p>
<p><img src="/images/2020120402.png" alt="image-20201204193628122"></p>
<p>倒排索引</p>
<p><img src="/images/2020120403.png" alt="image-20201204193651906"></p>
<p>试想根据某个词查找，查找出一堆文档，那到底是哪个匹配度更高呢，这时候就需要打分的逻辑</p>
<ul>
<li>TF：词频，这个document文档包含了多少个这个词，包含越多表明越相关</li>
<li>DF：文档频率，包含该词的文档总数目</li>
<li>IDF：DF取倒数</li>
<li>打分常用计算公式：TF * IDF</li>
</ul>
<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><p>关系型数据库MySQL对应ElasticSearch：</p>
<ol>
<li>MySQL 中的数据库（DataBase），等价于 ES 中的索引（Index）。</li>
<li>MySQL 中一个数据库下面有 N 张表（Table），等价于1个索引 Index 下面有 N 多类型（Type）。</li>
<li>MySQL 中一个数据库表（Table）下的数据由多行（Row）多列（column，属性）组成，等价于1个 Type 由多个文档（Document）和多 Field 组成。</li>
<li>MySQL 中定义表结构、设定字段类型等价于 ES 中的 Mapping。举例说明，在一个关系型数据库里面，Schema 定义了表、每个表的字段，还有表和字段之间的关系。与之对应的，在 ES 中，Mapping 定义索引下的 Type 的字段处理规则，即索引如何建立、索引类型、是否保存原始索引 JSON 文档、是否压缩原始 JSON 文档、是否需要分词处理、如何进行分词处理等。</li>
<li>MySQL 中的增 insert、删 delete、改 update、查 search 操作等价于 ES 中的增 PUT/POST、删 Delete、改 _update、查 GET。其中的修改指定条件的更新 update 等价于 ES 中的 update_by_query，指定条件的删除等价于 ES 中的 delete_by_query。</li>
<li>MySQL 中的 group by、avg、sum 等函数类似于 ES 中的 Aggregations 的部分特性。</li>
<li>MySQL 中的去重 distinct 类似 ES 中的 cardinality 操作。</li>
<li>MySQL 中的数据迁移等价于 ES 中的 reindex 操作。</li>
</ol>
<p><img src="/images/2020120404.png" alt="img"></p>
<h2 id="分布式原理"><a href="#分布式原理" class="headerlink" title="分布式原理"></a>分布式原理</h2><p><a href="https://www.cnblogs.com/jajian/p/10176604.html" target="_blank" rel="noopener">https://www.cnblogs.com/jajian/p/10176604.html</a></p>
<h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><p><a href="https://liuurick.github.io/2020/10/11/ElasticSearch集群搭建/" target="_blank" rel="noopener">https://liuurick.github.io/2020/10/11/ElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a></p>
<h1 id="ElasticSearch基础语法及应用"><a href="#ElasticSearch基础语法及应用" class="headerlink" title="ElasticSearch基础语法及应用"></a>ElasticSearch基础语法及应用</h1><h2 id="索引创建，更新，删除"><a href="#索引创建，更新，删除" class="headerlink" title="索引创建，更新，删除"></a>索引创建，更新，删除</h2><blockquote>
<p>结构化索引，类似MySQL，我们会对索引结构做预定义，包括字段名，字段类型等；</p>
<p>非结构化索引，就类似Mongo，索引结构未知，根据具体的数据来update索引的mapping。</p>
<p>那么如何选择两种索引呢，还是跟具体的使用场景有关，结构化相比非结构化，更易优化，性能好些，非结构化相较灵活，只是频繁update索引mapping会有一定的性能损耗。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.索引创建</span><br><span class="line">PUT &#x2F;mytest</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#2.索引删除</span><br><span class="line">DELETE &#x2F;mytest</span><br></pre></td></tr></table></figure>



<h2 id="索引简单语句"><a href="#索引简单语句" class="headerlink" title="索引简单语句"></a>索引简单语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#3.非结构化方式新建索引</span><br><span class="line">PUT &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;name&quot;: &quot;liubin&quot;,</span><br><span class="line">  &quot;age&quot;: 24</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#4.获取索引记录</span><br><span class="line">GET &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line"></span><br><span class="line">#5.指定字段修改</span><br><span class="line">POST &#x2F;employee&#x2F;_update&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;: &quot;刘斌&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#6.强制指定创建，若已经存在，则失败</span><br><span class="line">POST &#x2F;employee&#x2F;_create&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;123&quot;,</span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#7.删除某个文档</span><br><span class="line">DELETE &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line"></span><br><span class="line">#8.查询全部文档</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#9.使用结构化的方式创建索引</span><br><span class="line">PUT &#x2F;employee</span><br><span class="line">&#123;</span><br><span class="line"> &quot;settings&quot;: &#123;</span><br><span class="line">   &quot;number_of_shards&quot;: 1,</span><br><span class="line">   &quot;number_of_replicas&quot;: 1</span><br><span class="line"> &#125; ,</span><br><span class="line"> &quot;mappings&quot;: &#123;</span><br><span class="line">   &quot;properties&quot;: &#123;</span><br><span class="line">     &quot;name&quot;:&#123;&quot;type&quot;: &quot;text&quot;&#125;,</span><br><span class="line">     &quot;age&quot;:&#123;&quot;type&quot;: &quot;integer&quot;&#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#10.添加数据</span><br><span class="line">POST &#x2F;employee&#x2F;_create&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;我是打工人&quot;,</span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#11.不带条件查询所有记录</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line"></span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#12.分页查询</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="索引复杂语句"><a href="#索引复杂语句" class="headerlink" title="索引复杂语句"></a>索引复杂语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#13.带关键字条件的查询</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#14.带排序</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#15.带filter </span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;&quot;term&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &quot;30&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#16.带聚合</span><br><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;工&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_age&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;age&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>match和term区别：<a href="https://www.cnblogs.com/yjf512/p/4897294.html" target="_blank" rel="noopener">https://www.cnblogs.com/yjf512/p/4897294.html</a></p>
<p>match 分词查询<br>term 整体查询</p>
</blockquote>
<h1 id="ElasticSearch高级语法及应用"><a href="#ElasticSearch高级语法及应用" class="headerlink" title="ElasticSearch高级语法及应用"></a>ElasticSearch高级语法及应用</h1><p>更着重于分词相关的操作</p>
<h2 id="analyze分析过程"><a href="#analyze分析过程" class="headerlink" title="analyze分析过程"></a>analyze分析过程</h2><p><code>analyse分析=分词的过程：字符过滤器--&gt;字符处理--&gt;分词过滤（分词转换，词干转化）</code></p>
<ul>
<li>字符过滤：使用字符过滤器转变字符。</li>
<li>文本切分为分词：将文本（档）分为单个或多个分词。</li>
<li>分词过滤：使用分词过滤器转变每个分词。</li>
<li>分词索引：最终将分词存储在Lucene倒排索引中。</li>
</ul>
<p><img src="/images/2020120405.png" alt="20190824003615611858"></p>
<p>利用analyze api搜索</p>
<p>先建立索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;employee&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Eating an apple a day &amp; keeps the doctor away&quot;, </span><br><span class="line">  &quot;age&quot;: 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;&quot;name&quot;:&quot;eat&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>没搜到后使用analyze api查看分析处理结果，可以看到没有分出eat，所以搜不到，改成用english分词器做索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;field&quot;:&quot;name&quot;,</span><br><span class="line"> &quot;text&quot;:&quot;Eating an apple a day &amp; keeps the doctor away&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重新创建索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;employee</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">   &quot;number_of_shards&quot; : 1,</span><br><span class="line">   &quot;number_of_replicas&quot; : 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot; : &#123;</span><br><span class="line">    &quot;properties&quot; : &#123;</span><br><span class="line">      &quot;name&quot; : &#123; </span><br><span class="line">        &quot;type&quot; : &quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">        &quot;age&quot; : &#123;&quot;type&quot;:&quot;integer&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在用<code>analyze api</code>，可以看到eat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;employee&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;field&quot;:&quot;name&quot;,</span><br><span class="line"> &quot;text&quot;:&quot;Eating an apple a day &amp; keeps the doctor away&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关性查询手段"><a href="#相关性查询手段" class="headerlink" title="相关性查询手段"></a>相关性查询手段</h2><p>类型：</p>
<blockquote>
<p><a href="https://blog.csdn.net/chengyuqiang/article/details/79048800" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/79048800</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch7进阶</title>
    <url>/2020/12/06/ElasticSearch7%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>ElasticSearch的进阶学习主要有两种分别是通读文档和案例学习。这里我选择的是通过案例来深入学习es。</p>
<p>案例数据选择的是tmdb网站的公开数据。</p>
<a id="more"></a>

<blockquote>
<p>tmdb网站：<a href="https://www.themoviedb.org/" target="_blank" rel="noopener">https://www.themoviedb.org/</a></p>
</blockquote>
<h1 id="tmdb索引创建"><a href="#tmdb索引创建" class="headerlink" title="tmdb索引创建"></a>tmdb索引创建</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;movie</span><br><span class="line">&#123;</span><br><span class="line">   &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 1,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;mappings&quot;: &#123;</span><br><span class="line">     &quot;properties&quot;: &#123;</span><br><span class="line">       &quot;title&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">       &quot;tagline&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;,</span><br><span class="line">       &quot;release_date&quot;:&#123;&quot;type&quot;:&quot;date&quot;,        &quot;format&quot;: &quot;8yyyy&#x2F;MM&#x2F;dd||yyyy&#x2F;M&#x2F;dd||yyyy&#x2F;MM&#x2F;d||yyyy&#x2F;M&#x2F;d&quot;&#125;,</span><br><span class="line">       &quot;popularity&quot;:&#123;&quot;type&quot;:&quot;double&quot;&#125;,</span><br><span class="line">       &quot;cast&quot;:&#123;</span><br><span class="line">         &quot;type&quot;:&quot;object&quot;,</span><br><span class="line">         &quot;properties&quot;:&#123;</span><br><span class="line">           &quot;character&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;:&quot;standard&quot;&#125;,</span><br><span class="line">           &quot;name&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;:&quot;standard&quot;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;overview&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;analyzer&quot;: &quot;english&quot;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="tmdb文档导入"><a href="#tmdb文档导入" class="headerlink" title="tmdb文档导入"></a>tmdb文档导入</h1><blockquote>
<p>csv文件导入es用通过SpringBoot实现的：<a href="https://github.com/liuurick/csvimportes" target="_blank" rel="noopener">https://github.com/liuurick/csvimportes</a></p>
</blockquote>
<h1 id="tmdb查询学习"><a href="#tmdb查询学习" class="headerlink" title="tmdb查询学习"></a>tmdb查询学习</h1><h2 id="query-DSL"><a href="#query-DSL" class="headerlink" title="query DSL"></a>query DSL</h2><blockquote>
<p><a href="https://blog.csdn.net/supermao1013/article/details/84261526" target="_blank" rel="noopener">https://blog.csdn.net/supermao1013/article/details/84261526</a></p>
</blockquote>
<h3 id="1-match查询与terms查询"><a href="#1-match查询与terms查询" class="headerlink" title="1.match查询与terms查询"></a>1.match查询与terms查询</h3><h4 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h4><p>match query 知道分词器的存在，会对field进行分词操作，然后再查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;Steve Jobs&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 7,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 14.340551,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2340&quot;,</span><br><span class="line">        &quot;_score&quot; : 14.340551,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Steve Jobs&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Can a great man be a good man?&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;53.670525&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Burke&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Aaron Eckhart&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Set backstage at three iconic product launches and ending in 1998 with the unveiling of the iMac, Steve Jobs takes us behind the scenes of the digital revolution to paint an intimate portrait of the brilliant man at its epicenter.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;703&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Italian Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get in. Get out. Get even.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2003&#x2F;5&#x2F;30&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;62.766854&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jason Bourne&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Matt Damon&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Charlie Croker pulled off the crime of a lifetime. The one thing that he didn&#39;t plan on was being double-crossed. Along with a drop-dead gorgeous safecracker, Croker and his team take off to re-steal the loot and end up in a pulse-pounding, pedal-to-the-metal chase that careens up, down, above and below the streets of Los Angeles.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1581&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Nut Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Let&#39;s Get Nuts!&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2014&#x2F;1&#x2F;17&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;18.568021&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Kay&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Meryl Streep&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Surly, a curmudgeon, independent squirrel is banished from his park and forced to survive in the city. Lucky for him, he stumbles on the one thing that may be able to save his life, and the rest of park community, as they gear up for winter - Maury&#39;s Nut Store.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2152&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Bank Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2008&#x2F;2&#x2F;28&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;30.387754&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Lucius&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Tom Felton&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Terry is a small-time car dealer trying to leave his shady past behind and start a family. Martine is a beautiful model from Terry&#39;s old neighbourhood who knows that Terry is no angel. When Martine proposes a foolproof plan to rob a bank, Terry recognises the danger but realises this may be the opportunity of a lifetime. As the resourceful band of thieves burrows its way into a safe-deposit vault at a Lloyds Bank, they quickly realise that, besides millions in riches, the boxes also contain secrets that implicate everyone from London&#39;s most notorious underworld gangsters to powerful government figures, and even the Royal Family. Although the heist makes headlines throughout Britain for several days, a government gag order eventually brings all reporting of the case to an immediate halt.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4081&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.936559,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Inside Job&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The film that cost $20,000,000,000,000 to make.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;10&#x2F;8&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;16.930914&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Adam Beach&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A film that exposes the shocking truth behind the economic crisis of 2008. The global financial meltdown, at a cost of over $20 trillion, resulted in millions of people losing their homes and jobs. Through extensive research and interviews with major financial insiders, politicians and journalists, Inside Job traces the rise of a rogue industry and unveils the corrosive relationships which have corrupted politics, regulation and academia.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2552&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.198678,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;All About Steve&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Comedy That Clings&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;9&#x2F;4&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.237835&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Melvin B. Tolson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Denzel Washington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After one short date, a brilliant crossword constructor decides that a CNN cameraman is her true love. Because the cameraman&#39;s job takes him hither and yon, she crisscrosses the country, turning up at media events as she tries to convince him they are perfect for each other.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.3308554,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="查看分词分析"><a href="#查看分词分析" class="headerlink" title="查看分词分析"></a>查看分词分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;title&quot;, </span><br><span class="line">  &quot;text&quot;: &quot;Steve Jobs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过下方结果可知”Steve Jobs”被分词为steve和job</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;steve&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 5,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;job&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 10,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h4><p>term：查询某个字段里含有某个关键词的文档</p>
<p>terms：查询某个字段里含有多个关键词的文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: [</span><br><span class="line">        &quot;Steve Jobs&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过下方结果可知并没有命中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>match查询是按照字段上的定义的分词分析后去索引内查询</p>
<p>term查询是不进行分词的查询，直接去索引内查询，这种查询适合keyword、numeric、date等明确值的</p>
<h3 id="2-match分词后的and和or"><a href="#2-match分词后的and和or" class="headerlink" title="2.match分词后的and和or"></a>2.match分词后的and和or</h3><p>match查询默认是or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;:&#123;&quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 12,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 11,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 8.280251,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.280251,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.7807794,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3347&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.26783,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien Zone&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Don&#39;t you dare go in there!&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1978&#x2F;11&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;0.000372&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Sgt. Jericho &#39;Action&#39; Jackson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Carl Weathers&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A man who is having an affair with a married woman is dropped off on the wrong street when going back to his hotel. He takes refuge out of the rain when an old man invites him in. He turns out to be a mortician, who tells him the stories of the people who have wound up in his establishment over the course of four stories.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;68&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.2474747,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Monsters vs Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;When aliens attack, monsters fight back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;3&#x2F;19&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.167578&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Carl Fredricksen (voice)&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ed Asner&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Susan Murphy is unwittingly clobbered by a meteor full of outer space gunk on her wedding day, she mysteriously grows to 49-feet-11-inches. The military jumps into action and captures Susan, secreting her away to a covert government compound. She is renamed Ginormica and placed in confinement with a ragtag group of Monsters...&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2468&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.2474747,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;My Stepmother is an Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Man&#39;s closest encounter.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1988&#x2F;12&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;9.455596&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cristina&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Scarlett Johansson&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Trying to rescue her home planet from destruction, a gorgeous extraterrestrial named Celeste arrives on Earth and begins her scientific research. She woos quirky scientist Dr. Steve Mills, a widower with a young daughter. Before long, Celeste finds herself in love with Steve and her new life on Earth, where she experiences true intimacy for the first time. But when she loses sight of her mission, she begins to question where she belongs.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 4.512821,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将or换成and，想同时匹配到basketball 和cartoom aliens</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">   &quot;title&quot;: &#123;</span><br><span class="line">     &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">     &quot;operator&quot;: &quot;and&quot; </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-最小词项匹配"><a href="#3-最小词项匹配" class="headerlink" title="3.最小词项匹配"></a>3.最小词项匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;: &#123;</span><br><span class="line">   &quot;title&quot;: &#123;</span><br><span class="line">     &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">     &quot;operator&quot;: &quot;or&quot; ,</span><br><span class="line">     &quot;minimum_should_match&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 5,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-短语查询"><a href="#4-短语查询" class="headerlink" title="4.短语查询"></a>4.短语查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match_phrase&quot;:&#123;&quot;title&quot;:&quot;steve zissou&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 13,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 11.292614,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.292614,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>短语前缀查询:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match_phrase_prefix&quot;:&#123;&quot;title&quot;:&quot;steve zis&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 14,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 23.216133,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 23.216133,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-多字段查询"><a href="#5-多字段查询" class="headerlink" title="5.多字段查询"></a>5.多字段查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;basketball with cartoom aliens&quot;,</span><br><span class="line">   &quot;field&quot;:[&quot;title&quot;,&quot;overview&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;[multi_match] unknown token [START_ARRAY] after [field]&quot;,</span><br><span class="line">        &quot;line&quot; : 5,</span><br><span class="line">        &quot;col&quot; : 12</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;[multi_match] unknown token [START_ARRAY] after [field]&quot;,</span><br><span class="line">    &quot;line&quot; : 5,</span><br><span class="line">    &quot;col&quot; : 12</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>操作不管是字符与还是或，按照逻辑关系命中后相加得分</p>
<blockquote>
<p>“explain”: true 类似于MySQL中的explain </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;match&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 查询结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 4,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 7.4039927,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2340&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.4039927,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Steve Jobs&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Can a great man be a good man?&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;9&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;53.670525&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Burke&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Aaron Eckhart&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Set backstage at three iconic product launches and ending in 1998 with the unveiling of the iMac, Steve Jobs takes us behind the scenes of the digital revolution to paint an intimate portrait of the brilliant man at its epicenter.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 7.4039927,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 1437) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 7.4039927,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.47008157,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2552&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.198678,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;All About Steve&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Comedy That Clings&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;9&#x2F;4&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.237835&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Melvin B. Tolson&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Denzel Washington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After one short date, a brilliant crossword constructor decides that a CNN cameraman is her true love. Because the cameraman&#39;s job takes him hither and yon, she crisscrosses the country, turning up at media events as she tries to convince him they are perfect for each other.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 6.198678,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 1632) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 6.198678,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.39355576,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_shard&quot; : &quot;[movie][0]&quot;,</span><br><span class="line">        &quot;_node&quot; : &quot;NpA3du0ARfyfdH55kWTlrw&quot;,</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;979&quot;,</span><br><span class="line">        &quot;_score&quot; : 5.3308554,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Life Aquatic with Steve Zissou&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The deeper you go, the weirder life gets.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2004&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;25.237969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hannibal Lecter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Gaspard Ulliel&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Wes Anderson��s incisive quirky comedy build up stars complex characters like in ��The Royal Tenenbaums�� with Bill Murray on in the leading role. An ocean adventure documentary film maker Zissou is put in all imaginable life situations and a tough life crisis as he attempts to make a new film about capturing the creature that caused him pain.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_explanation&quot; : &#123;</span><br><span class="line">          &quot;value&quot; : 5.3308554,</span><br><span class="line">          &quot;description&quot; : &quot;weight(title:steve in 140) [PerFieldSimilarity], result of:&quot;,</span><br><span class="line">          &quot;details&quot; : [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;value&quot; : 5.3308554,</span><br><span class="line">              &quot;description&quot; : &quot;score(freq&#x3D;1.0), computed as boost * idf * tf from:&quot;,</span><br><span class="line">              &quot;details&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 2.2,</span><br><span class="line">                  &quot;description&quot; : &quot;boost&quot;,</span><br><span class="line">                  &quot;details&quot; : [ ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 7.1592917,</span><br><span class="line">                  &quot;description&quot; : &quot;idf, computed as log(1 + (N - n + 0.5) &#x2F; (n + 0.5)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 3,</span><br><span class="line">                      &quot;description&quot; : &quot;n, number of documents containing term&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4500,</span><br><span class="line">                      &quot;description&quot; : &quot;N, total number of documents with field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;value&quot; : 0.33845747,</span><br><span class="line">                  &quot;description&quot; : &quot;tf, computed as freq &#x2F; (freq + k1 * (1 - b + b * dl &#x2F; avgdl)) from:&quot;,</span><br><span class="line">                  &quot;details&quot; : [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.0,</span><br><span class="line">                      &quot;description&quot; : &quot;freq, occurrences of term within document&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 1.2,</span><br><span class="line">                      &quot;description&quot; : &quot;k1, term saturation parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 0.75,</span><br><span class="line">                      &quot;description&quot; : &quot;b, length normalization parameter&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 4.0,</span><br><span class="line">                      &quot;description&quot; : &quot;dl, length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;value&quot; : 2.1757777,</span><br><span class="line">                      &quot;description&quot; : &quot;avgdl, average length of field&quot;,</span><br><span class="line">                      &quot;details&quot; : [ ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看数值，tfidf多少分，tfnorm归一化后多少分</p>
<p><img src="/images/2020120601.png" alt="image-20201206201041743"></p>
<p>多字段查询索引内有query分词后的结果，因为title比overview命中更重要，因此需要加权重。</p>
<h3 id="6-多字段查询优化"><a href="#6-多字段查询优化" class="headerlink" title="6.多字段查询优化"></a>6.多字段查询优化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;basketball with cartoom aliens&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title^10&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;tie_break&quot;:0.3</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;error&quot; : &#123;</span><br><span class="line">    &quot;root_cause&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">        &quot;reason&quot; : &quot;[multi_match] query does not support [tie_break]&quot;,</span><br><span class="line">        &quot;line&quot; : 6,</span><br><span class="line">        &quot;col&quot; : 16</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;type&quot; : &quot;parsing_exception&quot;,</span><br><span class="line">    &quot;reason&quot; : &quot;[multi_match] query does not support [tie_break]&quot;,</span><br><span class="line">    &quot;line&quot; : 6,</span><br><span class="line">    &quot;col&quot; : 16</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot; : 400</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继续深入查询"><a href="#继续深入查询" class="headerlink" title="继续深入查询"></a>继续深入查询</h2><h3 id="1-bool查询"><a href="#1-bool查询" class="headerlink" title="1.bool查询"></a>1.bool查询</h3><blockquote>
<p>must：必须都是true</p>
<p>must not： 必须都是false</p>
<p>should：其中有一个为true即可，但true的越多得分越高</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;: &#123; </span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line"></span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 23,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 103,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 14.092542,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 14.092542,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.687689,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.652669,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.450155,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 11.37727,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.803101,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.5949,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1740&quot;,</span><br><span class="line">        &quot;_score&quot; : 9.010006,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;How to Lose Friends &amp; Alienate People&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;He&#39;s across the pond, and out of his depth.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2008&#x2F;10&#x2F;2&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;16.785866&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Narrator&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Philippe Labro&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;&quot;&quot;A British writer struggles to fit in at a high-profile magazine in New York. Based on Toby Young&#39;s memoir &quot;How to Lose Friends &amp; Alienate People&quot;.&quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;453&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.579647,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Space Jam&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get ready to jam.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1996&#x2F;11&#x2F;15&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.125715&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cameron Poe&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nicolas Cage&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In a desperate attempt to win a basketball match and earn their freedom, the Looney Tunes seek the aid of retired basketball champion, Michael Jordan.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2842&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.242802,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Just Wright&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In this game every shot counts.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;5&#x2F;14&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.409253&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Quentin Jacobsen&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nat Wolff&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A physical therapist falls for the basketball player she is helping recover from a career-threatening injury.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-不同的multi-query的type"><a href="#2-不同的multi-query的type" class="headerlink" title="2.不同的multi_query的type"></a>2.不同的multi_query的type</h3><p>和multi_match得分不一样</p>
<p>因为multi_match有很多种type</p>
<p>best_fields:默认，取得分最高的作为对应的分数，最匹配模式,等同于dismax模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;dis_max&quot;: &#123; </span><br><span class="line">   &quot;queries&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 4512,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Avatar&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Enter the World of Pandora.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;12&#x2F;10&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;150.437577&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jake Sully&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Sam Worthington&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Spectre&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A Plan No One Escapes&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;10&#x2F;26&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;107.376788&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;James Bond&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Daniel Craig&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A cryptic message from Bond��s past sends him on a trail to uncover a sinister organization. While M battles political forces to keep the secret service alive, Bond peels back the layers of deceit to reveal the terrible truth behind SPECTRE.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;The Dark Knight Rises&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Legend Ends&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2012&#x2F;7&#x2F;16&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;112.31295&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Bruce Wayne &#x2F; Batman&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Christian Bale&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Following the death of District Attorney Harvey Dent, Batman assumes responsibility for Dent&#39;s crimes to protect the late attorney&#39;s reputation and is subsequently hunted by the Gotham City Police Department. Eight years later, Batman encounters the mysterious Selina Kyle and the villainous Bane, a new terrorist leader who overwhelms Gotham&#39;s finest. The Dark Knight resurfaces to protect a city that has branded him an enemy.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;John Carter&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Lost in our world, found in another.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2012&#x2F;3&#x2F;7&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;43.926995&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;John Carter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Taylor Kitsch&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;John Carter is a war-weary, former military captain who&#39;s inexplicably transported to the mysterious and exotic planet of Barsoom (Mars) and reluctantly becomes embroiled in an epic conflict. It&#39;s a world on the brink of collapse, and Carter rediscovers his humanity when he realizes the survival of Barsoom and its people rests in his hands.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Spider-Man 3&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The battle within.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;5&#x2F;1&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;115.699814&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Peter Parker &#x2F; Spider-Man&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Tobey Maguire&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;The seemingly invincible Spider-Man goes up against an all-new crop of villain �� including the shape-shifting Sandman. While Spider-Man��s superpowers are altered by an alien organism, his alter ego, Peter Parker, deals with nemesis Eddie Brock and also gets caught up in a love triangle.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;7&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Tangled&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;They&#39;re taking adventure to new lengths.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;11&#x2F;24&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;48.681969&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Flynn Rider (voice)&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Zachary Levi&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When the kingdom&#39;s most wanted-and most charming-bandit Flynn Rider hides out in a mysterious tower, he&#39;s taken hostage by Rapunzel, a beautiful and feisty tower-bound teen with 70 feet of magical, golden hair. Flynn&#39;s curious captor, who&#39;s looking for her ticket out of the tower where she&#39;s been locked away for years, strikes a deal with the handsome thief and the unlikely duo sets off on an action-packed escapade, complete with a super-cop horse, an over-protective chameleon and a gruff gang of pub thugs.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;8&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Avengers: Age of Ultron&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;A New Age Has Come.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2015&#x2F;4&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;134.279229&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Tony Stark &#x2F; Iron Man&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Robert Downey Jr.&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth��s Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;9&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Harry Potter and the Half-Blood Prince&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Dark Secrets Revealed&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;7&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;98.885637&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Harry Potter&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Daniel Radcliffe&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;As Harry begins his sixth year at Hogwarts, he discovers an old book marked as &#39;Property of the Half-Blood Prince&#39;, and begins to learn more about Lord Voldemort&#39;s dark past.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;10&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Batman v Superman: Dawn of Justice&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Justice or revenge&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2016&#x2F;3&#x2F;23&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;155.790452&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Bruce Wayne &#x2F; Batman&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Fearing the actions of a god-like Super Hero left unchecked, Gotham City��s own formidable, forceful vigilante takes on Metropolis��s most revered, modern-day savior, while the world wrestles with what sort of hero it really needs. And with Batman and Superman at war with one another, a new threat quickly arises, putting mankind in greater danger than it��s ever known before.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;11&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Superman Returns&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2006&#x2F;6&#x2F;28&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;57.925623&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Superman &#x2F; Clark Kent&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Brandon Routh&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Superman returns to discover his 5-year absence has allowed Lex Luthor to walk free, and that those he was closest too felt abandoned and have moved on. Luthor plots his ultimate revenge that could see millions killed and change the face of the planet forever, as well as ridding himself of the Man of Steel.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后使用explan看下 ((title:steve title:job) | (overview:steve overview:job))，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;best_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;valid&quot; : true,</span><br><span class="line">  &quot;explanations&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &quot;movie&quot;,</span><br><span class="line">      &quot;valid&quot; : true,</span><br><span class="line">      &quot;explanation&quot; : &quot;((overview:steve overview:job) | (title:steve title:job))&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以字段为单位分别计算分词的分数，然后取最好的一个,适用于最优字段匹配。</p>
<p>将其他因素以0.3的倍数考虑进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;dis_max&quot;: &#123; </span><br><span class="line">   &quot;queries&quot;: [</span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;title&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125;, </span><br><span class="line">    &#123; &quot;match&quot;: &#123; &quot;overview&quot;:&quot;basketball with cartoom aliens&quot;&#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;tie_breaker&quot;: 0.3</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 10,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 103,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 10.023938,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2550&quot;,</span><br><span class="line">        &quot;_score&quot; : 10.023938,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Love &amp; Basketball&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;All&#39;s fair in love and basketball.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2000&#x2F;4&#x2F;21&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;2.027393&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Laurie Strode&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jamie Lee Curtis&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A young African-American couple navigates the tricky paths of romance and athletics in this drama. Quincy McCall (Omar Epps) and Monica Wright (Sanaa Lathan) grew up in the same neighborhood and have known each other since childhood. As they grow into adulthood, they fall in love, but they also share another all-consuming passion: basketball. They&#39;ve followed the game all their lives and have no small amount of talent on the court. As Quincy and Monica struggle to make their relationship work, they follow separate career paths though high school and college basketball and, they hope, into stardom in big-league professional ball.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2389&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.952852,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;This Time It&#39;s War&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1986&#x2F;7&#x2F;18&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;67.66094&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Conner&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Jason Momoa&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;When Ripley&#39;s lifepod is found by a salvage crew over 50 years later, she finds that terra-formers are on the very planet they found the alien species. When the company sends a family of colonists out to investigate her story, all contact is lost with the planet and colonists. They enlist Ripley and the colonial marines to return and search for answers.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;839&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.881593,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien³&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The bitch is back.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1992&#x2F;5&#x2F;22&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;45.856409&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Beatrix &#39;The Bride&#39; Kiddo&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Uma Thurman&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;After escaping with Newt and Hicks from the alien planet, Ripley crash lands on Fiorina 161, a prison planet and host to a correctional facility. Unfortunately, although Newt and Hicks do not survive the crash, a more unwelcome visitor does. The prison does not allow weapons of any kind, and with aid being a long time away, the prisoners must simply survive in any way they can.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3144&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.859726,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In space no one can hear you scream.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1979&#x2F;5&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;94.184658&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Raimunda&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Penu00e9lope Cruz&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;During its return to the earth, commercial spaceship Nostromo intercepts a distress signal from a distant planet. When a three-member team of the crew discovers a chamber containing thousands of eggs on the planet, a creature inside one of the eggs attacks an explorer. The entire crew is unaware of the impending nightmare set to descend upon them when the alien parasite planted inside its unfortunate host is birthed.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;453&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.579647,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Space Jam&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;Get ready to jam.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1996&#x2F;11&#x2F;15&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;36.125715&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Cameron Poe&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nicolas Cage&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;In a desperate attempt to win a basketball match and earn their freedom, the Looney Tunes seek the aid of retired basketball champion, Michael Jordan.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1087&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.8832817,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens in the Attic&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The aliens vs. the Pearsons&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2009&#x2F;7&#x2F;31&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;13.707183&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Hova&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Julia Roberts&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;It&#39;s summer vacation, but the Pearson family kids are stuck at a boring lake house with their nerdy parents. That is until feisty, little, green aliens crash-land on the roof, with plans to conquer the house AND Earth! Using only their wits, courage and video game-playing skills, the youngsters must band together to defeat the aliens and save the world - but the toughest part might be keeping the whole thing a secret from their parents! Featuring an all-star cast including Ashley Tisdale, Andy Richter, Kevin Nealon, Tim Meadows and Doris Roberts, Aliens In The Attic is the most fun you can have on this planet!&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1214&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.644126,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Aliens vs Predator: Requiem&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The Last Place On Earth We Want To Be Is In The Middle&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2007&#x2F;12&#x2F;25&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;39.381913&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Alex Wyler&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Keanu Reeves&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A sequel to 2004&#39;s Alien vs. Predator, the iconic creatures from two of the scariest film franchises in movie history wage their most brutal battle ever - in our own backyard. The small town of Gunnison, Colorado becomes a war zone between two of the deadliest extra-terrestrial life forms - the Alien and the Predator. When a Predator scout ship crash-lands in the hills outside the town, Alien Facehuggers and a hybrid Alien&#x2F;Predator are released and begin to terrorize the town.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;741&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.5659513,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Alien: Resurrection&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;It&#39;s already too late.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1997&#x2F;11&#x2F;12&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;37.44963&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Jennings&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Ben Affleck&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;Two hundred years after Lt. Ripley died, a group of scientists clone her, hoping to breed the ultimate weapon. But the new Ripley is full of surprises �� as are the new aliens. Ripley must team with a band of smugglers to keep the creatures from reaching Earth.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2842&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.242802,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;Just Wright&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;In this game every shot counts.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;2010&#x2F;5&#x2F;14&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.409253&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Quentin Jacobsen&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Nat Wolff&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A physical therapist falls for the basketball player she is helping recover from a career-threatening injury.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;movie&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1890&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.92179,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;He Got Game&quot;,</span><br><span class="line">          &quot;tagline&quot; : &quot;The father, the son and the holy game.&quot;,</span><br><span class="line">          &quot;release_date&quot; : &quot;1998&#x2F;5&#x2F;1&quot;,</span><br><span class="line">          &quot;popularity&quot; : &quot;10.232599&quot;,</span><br><span class="line">          &quot;cast&quot; : &#123;</span><br><span class="line">            &quot;character&quot; : &quot;Megan&quot;,</span><br><span class="line">            &quot;name&quot; : &quot;Shoshana Bush&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;overview&quot; : &quot;A basketball player&#39;s father must try to convince him to go to a college so he can get a shorter sentence.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>most_fields:取命中的分值相加作为分数，同should match模式，加权共同影响模式</p>
<p>然后使用explain看下 ((title:steve title:job) | (overview:steve overview:job))~1.0，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;valid&quot; : true,</span><br><span class="line">  &quot;explanations&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot; : &quot;movie&quot;,</span><br><span class="line">      &quot;valid&quot; : true,</span><br><span class="line">      &quot;explanation&quot; : &quot;((overview:steve overview:job) | (title:steve title:job))~1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以字段为单位分别计算分词的分数，然后加在一起，适用于都有影响的匹配</p>
<p>cross_fields:以分词为单位计算栏位总分</p>
<p>然后使用explain看下 blended(terms:[title:steve, overview:steve]) blended(terms:[title:job, overview:job])，打分规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_validate&#x2F;query?explain</span><br><span class="line">&#123;</span><br><span class="line"> &#x2F;&#x2F;&quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>以词为单位，分别用词去不同的字段内取内容，拿高的分数后与其他词的分数相加，适用于词导向的匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;forum&#x2F;article&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">  &quot;multi_match&quot;: &#123;</span><br><span class="line">   &quot;query&quot;: &quot;Peter Smith&quot;,</span><br><span class="line">   &quot;type&quot;: &quot;cross_fields&quot;, </span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;fields&quot;: [&quot;author_first_name&quot;, &quot;author_last_name&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>要求Peter必须在author_first_name或author_last_name中出现</p>
<p>要求Smith必须在author_first_name或author_last_name中出</p>
<p>原来most_fiels，可能像Smith //Williams也可能会出现，因为most_fields要求只是任何一个field匹配了就可以，匹配的field越多，分数越高</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;explain&quot;: true, </span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;multi_match&quot;:&#123;</span><br><span class="line">   &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">   &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">   &quot;type&quot;:&quot;cross_fields&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下不同的评分规则</p>
<h3 id="3-query-string"><a href="#3-query-string" class="headerlink" title="3.query string"></a>3.query string</h3><p>方便的利用AND(+) OR(|) NOT(-)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;query_string&quot;:&#123;</span><br><span class="line">   &quot;fields&quot;:[&quot;title&quot;],</span><br><span class="line">   &quot;query&quot;:&quot;steve AND jobs&quot;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-过滤查询"><a href="#4-过滤查询" class="headerlink" title="4.过滤查询"></a>4.过滤查询</h3><p>filter过滤查询</p>
<p><strong>单条件过滤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;filter&quot;:&#123;</span><br><span class="line">     &quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>多条件过滤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;sort&quot;:[</span><br><span class="line">  &#123;&quot;popularity&quot;:&#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>带match打分的的filter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;must&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;Search&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回0结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;Search&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>有结果，但是返回score为0，因为bool中若有filter的话，即便should都不满足，只是返回为0分而已</p>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;bool&quot;:&#123;</span><br><span class="line">   &quot;should&quot;: [</span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;title&quot;:  &quot;life&quot;    &#125;&#125;, </span><br><span class="line">     &#123; &quot;match&quot;: &#123; &quot;tagline&quot;: &quot;Elasticsearch&quot; &#125;&#125; </span><br><span class="line">   ],</span><br><span class="line">   &quot;filter&quot;:[</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;steve&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;term&quot;:&#123;&quot;cast.name&quot;:&quot;gaspard&quot;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;release_date&quot;: &#123; &quot;lte&quot;: &quot;2015&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;,</span><br><span class="line">     &#123;&quot;range&quot;: &#123; &quot;popularity&quot;: &#123; &quot;gte&quot;: &quot;25&quot; &#125;&#125;&#125;</span><br><span class="line">     ]</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到分数</p>
<h1 id="查全率和查准率"><a href="#查全率和查准率" class="headerlink" title="查全率和查准率"></a>查全率和查准率</h1><blockquote>
<p>查全率：正确的结果有n个，实际查询出来正确的有m  <strong>查全率：</strong>m/n</p>
<p>查准率：查出的n个文档有m个正确  <strong>查准率：m/n</strong></p>
<p>两者不可兼得，但可以调整排序</p>
</blockquote>
<p>function score自定义打分</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">  &quot;function_score&quot;: &#123;</span><br><span class="line">   &#x2F;&#x2F;原始查询得到oldscore</span><br><span class="line">   &quot;query&quot;: &#123;   </span><br><span class="line">     &quot;multi_match&quot;:&#123;</span><br><span class="line">     &quot;query&quot;:&quot;steve job&quot;,</span><br><span class="line">     &quot;fields&quot;:[&quot;title&quot;,&quot;overview&quot;],</span><br><span class="line">     &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">     &quot;type&quot;:&quot;most_fields&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;functions&quot;: [</span><br><span class="line">   &#123;&quot;field_value_factor&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;popularity&quot;,  &#x2F;&#x2F;对应要处理的字段</span><br><span class="line">      &quot;modifier&quot;: &quot;log2p&quot;,  &#x2F;&#x2F;将字段值+2后，计算对数</span><br><span class="line">      &quot;factor&quot;: 10  &#x2F;&#x2F;字段预处理*10</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  ], </span><br><span class="line"> </span><br><span class="line">  &quot;score_mode&quot;: &quot;sum&quot;,  &#x2F;&#x2F;不同的field value之间的得分相加</span><br><span class="line">  &quot;boost_mode&quot;: &quot;sum&quot;  &#x2F;&#x2F;最后在与old value相加</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="相关性排序调整"><a href="#相关性排序调整" class="headerlink" title="相关性排序调整"></a>相关性排序调整</h1><blockquote>
<p><a href="https://www.cnblogs.com/orzlin/p/10496869.html" target="_blank" rel="noopener">https://www.cnblogs.com/orzlin/p/10496869.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch集群搭建</title>
    <url>/2020/10/11/ElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>ElasticSearch诞生于2010年，它采用的是分布式模式，这也印证了它名字中的“elastic”。谈到分布式，当然离不开集群，这里记录一下自己搭建集群的经验。</p>
<a id="more"></a>

<h3 id="一、版本"><a href="#一、版本" class="headerlink" title="一、版本"></a>一、版本</h3><ul>
<li><p>elasticsearch-7.7.1-windows-x86_64</p>
</li>
<li><p>elasticsearch-head-5.0.0</p>
</li>
</ul>
<h3 id="二、搭建"><a href="#二、搭建" class="headerlink" title="二、搭建"></a>二、搭建</h3><p>搭建主要分为三步：解压文件–》修改配置文件–》启动</p>
<h4 id="1-解压文件"><a href="#1-解压文件" class="headerlink" title="1.解压文件"></a>1.解压文件</h4><p>这里我是将文件解压到一个新的文件夹，注意文件路径名不要带有中文名。</p>
<p><img src="/images/2020101101.png" alt="image-20201011112800198"></p>
<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>修改config文件中的elasticsearch.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class="line"><span class="comment">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class="line"><span class="comment">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class="line"><span class="comment"># the most important settings you may want to configure for a production cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consult the documentation for further information on configuration options:</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">XXX</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群之间的通信</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#允许前端做跨域访问</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is ["127.0.0.1", "[::1]"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,"127.0.0.1:9302"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1:9300",</span> <span class="string">"127.0.0.1:9301"</span><span class="string">,"127.0.0.1:9302"]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the gateway module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br></pre></td></tr></table></figure>

<p>因为是单机搭建集群，这里是做的伪分布式配置，集群的区分主要是通过端口</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#集群名字</span></span><br><span class="line"><span class="string">cluster.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前配置所在机器的节点名</span></span><br><span class="line"><span class="string">node.name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址</span></span><br><span class="line"><span class="string">network.host</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置对外服务的http端口</span></span><br><span class="line"><span class="string">http.port</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置节点之间交互的tcp端口，默认是9300。</span></span><br><span class="line"><span class="string">transport.tcp.port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在启动此节点时传递要执行发现的主机的初始列表</span></span><br><span class="line"><span class="string">discovery.seed_hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用初始的一组符合主节点条件的节点引导集群</span></span><br><span class="line"><span class="string">cluster.initial_master_nodes</span></span><br></pre></td></tr></table></figure>

<p>另外两个节点更改一下端口即可</p>
<h4 id="3-启动集群"><a href="#3-启动集群" class="headerlink" title="3.启动集群"></a>3.启动集群</h4><p>node1:</p>
<p><img src="/images/2020101102.png" alt="node1"></p>
<p>node2:</p>
<p><img src="/images/2020101103.png" alt="node2"></p>
<p>node3:</p>
<p><img src="/images/2020101104.png" alt="node3"></p>
<p>总览：</p>
<p><img src="/images/2020101105.png" alt="nodes"></p>
]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch集群</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch搜索优化</title>
    <url>/2020/12/09/ElasticSearch%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>ElasticSearch搜索优化主要通过三个方面：</p>
<ol>
<li>定制化分词器</li>
<li>同义词扩展</li>
<li>相关性重塑</li>
</ol>
<a id="more"></a>

<h1 id="定制化分词器"><a href="#定制化分词器" class="headerlink" title="定制化分词器"></a>定制化分词器</h1><p>对于中文分词器，我们一般使用的是<code>elasticsearch-analysis-ik</code>，当然也可以在现成的分词器上加一些定制化的改造，让分词器更加“智能”。</p>
<h2 id="1-创建dic文件"><a href="#1-创建dic文件" class="headerlink" title="1.创建dic文件"></a>1.创建dic文件</h2><p>在es的node1节点创建<code>myword.dic</code>文件</p>
<p>然后将文件复制到其余的两个节点</p>
<h2 id="2-修改es配置文件"><a href="#2-修改es配置文件" class="headerlink" title="2.修改es配置文件"></a>2.修改es配置文件</h2><p><code>IKAnalyzer.cfg.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;properties.dtd&quot;&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;comment&gt;IK Analyzer 扩展配置&lt;&#x2F;comment&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">	&lt;entry key&#x3D;&quot;ext_dict&quot;&gt;myword.dic&lt;&#x2F;entry&gt;</span><br><span class="line">	 &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">	&lt;entry key&#x3D;&quot;ext_stopwords&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="line">	&lt;!-- &lt;entry key&#x3D;&quot;remote_ext_dict&quot;&gt;words_location&lt;&#x2F;entry&gt; --&gt;</span><br><span class="line">	&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="line">	&lt;!-- &lt;entry key&#x3D;&quot;remote_ext_stopwords&quot;&gt;words_location&lt;&#x2F;entry&gt; --&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>

<p>将文件复制到其余的两个节点</p>
<h2 id="3-热更新词库"><a href="#3-热更新词库" class="headerlink" title="3.热更新词库"></a>3.热更新词库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>http://yoursite.com/getCustomDic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Http请求需要返回两个头部，last-modified和etag</p>
<p>两者任何一个发生变化会重新更新，ik一分钟检测一次</p>
</blockquote>
<h1 id="同义词扩展"><a href="#同义词扩展" class="headerlink" title="同义词扩展"></a>同义词扩展</h1><p>同义词：</p>
<blockquote>
<p>语义相近或相同</p>
<p>品牌类目关联</p>
<p>搜索它等于搜索它</p>
</blockquote>
<h2 id="1-创建同义词文件"><a href="#1-创建同义词文件" class="headerlink" title="1.创建同义词文件"></a>1.创建同义词文件</h2><p>在集群的各节点上的该路径<code>elasticsearch\elasticsearch-node3\config\analysis-ik</code>加上同义词文件</p>
<p><img src="/images/202012091601.png" alt="image-20201209164003792"></p>
<h2 id="2-建立es索引"><a href="#2-建立es索引" class="headerlink" title="2.建立es索引"></a>2.建立es索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#加入同义词</span><br><span class="line">PUT &#x2F;myshop</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;my_synonym_filter&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;synonym&quot;,</span><br><span class="line">          &quot;synonyms_path&quot;:&quot;analysis-ik&#x2F;my_synonyms.txt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;analyzer&quot;:&#123;</span><br><span class="line">        &quot;ik_syno&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;:&quot;ik_smart&quot;,</span><br><span class="line">          &quot;filter&quot;:[&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ik_syno_max&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;:&quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;:[&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_syno_max&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_syno&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tags&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;whitespace&quot;,&quot;fielddata&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;remark_score&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price_per_man&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category_id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;category_name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_remark_score&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;seller_disabled_flag&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-同步数据"><a href="#3-同步数据" class="headerlink" title="3.同步数据"></a>3.同步数据</h2><p>通过logstash将数据同步到es中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logstash -f mysql&#x2F;jdbc.conf</span><br></pre></td></tr></table></figure>



<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>分词测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;shop&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;name&quot;</span><br><span class="line">  , &quot;text&quot;: &quot;xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>索引测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;shop&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;xxx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="相关性重塑"><a href="#相关性重塑" class="headerlink" title="相关性重塑"></a>相关性重塑</h1><blockquote>
<p>什么是相关性：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html</a></p>
</blockquote>
<p>相关性搜索</p>
<p>让搜索引擎理解语义</p>
<p>影响召回及排序</p>
<h2 id="重新构建es索引"><a href="#重新构建es索引" class="headerlink" title="重新构建es索引"></a>重新构建es索引</h2><p>采取词性影响召回策略模型 通过category_id</p>
<h2 id="引入Java代码："><a href="#引入Java代码：" class="headerlink" title="引入Java代码："></a>引入Java代码：</h2><p>构造分类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getCategoryIdByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer key : categoryWorkMap.keySet()) &#123;</span><br><span class="line">        List&lt;String&gt; tokenList = categoryWorkMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (tokenList.contains(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, List&lt;String&gt;&gt; categoryWorkMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    categoryWorkMap.put(<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    categoryWorkMap.put(<span class="number">2</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    categoryWorkMap.get(<span class="number">1</span>).add(<span class="string">"吃饭"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">1</span>).add(<span class="string">"下午茶"</span>);</span><br><span class="line"></span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"休息"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"睡觉"</span>);</span><br><span class="line">    categoryWorkMap.get(<span class="number">2</span>).add(<span class="string">"住宿"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构造分词函数识别器时调用<code>getCategoryIdByToken</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造分词函数识别器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyword</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">analyzeCategoryKeyword</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/shop/_analyze"</span>);</span><br><span class="line">    request.setJsonEntity(<span class="string">"&#123;"</span> + <span class="string">"  \"field\": \"name\","</span> + <span class="string">"  \"text\":\""</span> + keyword + <span class="string">"\"\n"</span> + <span class="string">"&#125;"</span>);</span><br><span class="line">    Response response = highLevelClient.getLowLevelClient().performRequest(request);</span><br><span class="line">    String responseStr = EntityUtils.toString(response.getEntity());</span><br><span class="line">    JSONObject jsonObject = JSONObject.parseObject(responseStr);</span><br><span class="line">    JSONArray jsonArray = jsonObject.getJSONArray(<span class="string">"tokens"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonArray.size(); i++) &#123;</span><br><span class="line">        String token = jsonArray.getJSONObject(i).getString(<span class="string">"token"</span>);</span><br><span class="line">        Integer categoryId = getCategoryIdByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (categoryId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.put(token, categoryId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop运行环境搭建</title>
    <url>/2020/03/27/Hadoop%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Hadoop运行环境搭建</p>
<a id="more"></a>

<h3 id="电脑配置要求："><a href="#电脑配置要求：" class="headerlink" title="电脑配置要求："></a>电脑配置要求：</h3><p>内存：最低8G，最好16G以上<br>硬盘：预留100G，实际上不妨数据大概不会超过20G</p>
<h3 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h3><p>Windows环境：Windows10<br>Linux环境：CentOS-6.10-x86_64-bin-DVD1<br>VMware：15.5.0 build-14665864</p>
<h3 id="所需文件"><a href="#所需文件" class="headerlink" title="所需文件"></a>所需文件</h3><p><strong>链接：</strong> <a href="https://pan.baidu.com/s/1X3Nfv5hBuJl6mGDNNcvnQA" target="_blank" rel="noopener">https://pan.baidu.com/s/1X3Nfv5hBuJl6mGDNNcvnQA</a><br>提取码：dgmt<br><strong>资源失效记得留言</strong></p>
<h3 id="检查是否开启虚拟机"><a href="#检查是否开启虚拟机" class="headerlink" title="检查是否开启虚拟机"></a>检查是否开启虚拟机</h3><p><img src="https://img-blog.csdnimg.cn/2020032710260212.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h3><p>1.选择自定义<br><img src="https://img-blog.csdnimg.cn/20200327103653439.png?x-oss-process=image" alt="在这里插入图片描述"><br>2.下一步<br><img src="https://img-blog.csdnimg.cn/2020032710440027.png?x-oss-process=image" alt="在这里插入图片描述"><br>3.稍后安装操作系统<br><img src="https://img-blog.csdnimg.cn/20200327104418203.png?x-oss-process=image" alt="在这里插入图片描述"><br>4.选择Linux 版本为Centos6 64位<br><img src="https://img-blog.csdnimg.cn/20200327104437670.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.虚拟机命名为Hadoop001<br><img src="https://img-blog.csdnimg.cn/20200327104457220.png?x-oss-process=image" alt="在这里插入图片描述"><br>6.处理机配置，这里配置最好对应下图：<br><img src="https://img-blog.csdnimg.cn/2020032710451572.png?x-oss-process=image" alt="在这里插入图片描述"><br><strong>注意:</strong> 如果电脑配置不足，虚拟机会自动提示，这里根据自己电脑配置调整即可<br><img src="https://img-blog.csdnimg.cn/20200327110559495.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>7.网络类型选择NAT<br><img src="https://img-blog.csdnimg.cn/20200327104532614.png?x-oss-process=image" alt="在这里插入图片描述"><br>8.I/O控制器类型选择LSI Logic<br><img src="https://img-blog.csdnimg.cn/20200327104555764.png?x-oss-process=image" alt="在这里插入图片描述"><br>9.磁盘类型选择SCSI<br><img src="https://img-blog.csdnimg.cn/20200327104618841.png?x-oss-process=image" alt="在这里插入图片描述"><br>10.创建新虚拟磁盘<br><img src="https://img-blog.csdnimg.cn/20200327104635294.png?x-oss-process=image" alt="在这里插入图片描述"><br>11.磁盘大小分配50G，将虚拟磁盘拆分成多个文件<br><img src="https://img-blog.csdnimg.cn/20200327104652738.png?x-oss-process=image" alt="在这里插入图片描述"><br>12.指定磁盘文件<br><img src="https://img-blog.csdnimg.cn/20200327104707478.png?x-oss-process=image" alt="在这里插入图片描述"><br>13.创建完成<br><img src="https://img-blog.csdnimg.cn/2020032710473853.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>14.在虚拟机配置中选择下载好的镜像文件<br><img src="https://img-blog.csdnimg.cn/20200327104750966.png?x-oss-process=image" alt="在这里插入图片描述"><br>15.选择第一个<br> <img src="https://img-blog.csdnimg.cn/20200327105929634.png?x-oss-process=image" alt="在这里插入图片描述"><br>16.选择skip<br><img src="https://img-blog.csdnimg.cn/20200327105959950.png?x-oss-process=image" alt="在这里插入图片描述"><br>17.选择next<br><img src="https://img-blog.csdnimg.cn/20200327110029718.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>18.语言环境选择英文<br><img src="https://img-blog.csdnimg.cn/20200327110101712.png?x-oss-process=image" alt="在这里插入图片描述"><br>19.选择输入法<br><img src="https://img-blog.csdnimg.cn/20200327110230645.png?x-oss-process=image" alt="在这里插入图片描述"><br>20.选择Basic Storage Devices<br><img src="https://img-blog.csdnimg.cn/20200327110259402.png?x-oss-process=image" alt="在这里插入图片描述"><br>21.同意即可<br><img src="https://img-blog.csdnimg.cn/20200327110344102.png?x-oss-process=image" alt="在这里插入图片描述"><br>22.主机命名<br><img src="https://img-blog.csdnimg.cn/20200327110434306.png?x-oss-process=image" alt="在这里插入图片描述"><br>23.配置Configure Network<br><img src="https://img-blog.csdnimg.cn/20200327110518430.png?x-oss-process=image" alt="在这里插入图片描述"><br>24.勾选即可<br><img src="https://img-blog.csdnimg.cn/20200327110749262.png?x-oss-process=image" alt="在这里插入图片描述"><br>25.选择相应的时区<br><img src="https://img-blog.csdnimg.cn/20200327110908993.png?x-oss-process=image" alt="在这里插入图片描述"><br>26.密码设个123456就行了<br><img src="https://img-blog.csdnimg.cn/20200327110937171.png?x-oss-process=image" alt="在这里插入图片描述"><br>27.选择Use All Space<br><img src="https://img-blog.csdnimg.cn/20200327111016724.png?x-oss-process=image0" alt="在这里插入图片描述"><br>28.write changes to disk<br><img src="https://img-blog.csdnimg.cn/20200327111055987.png?x-oss-process=image" alt="在这里插入图片描述"><br>29.选择Basic<br><img src="https://img-blog.csdnimg.cn/20200327111132984.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>30.系统开始初始化<br><img src="https://img-blog.csdnimg.cn/20200327111233395.png?x-oss-process=image" alt="在这里插入图片描述"><br>31.可见系统已经安装成功，reboot重启即可<img src="https://img-blog.csdnimg.cn/20200327111308432.png?x-oss-process=image" alt="在这里插入图片描述"><br>32.进入系统界面<br><img src="https://img-blog.csdnimg.cn/20200327111408414.png?x-oss-process=image" alt="在这里插入图片描述"><br>因为hadoop实验需要3个服务器，另外两个可以使用克隆安装<br>33.选择下一步<img src="https://img-blog.csdnimg.cn/20200327111548739.png?x-oss-process=image" alt="在这里插入图片描述"><br>34.下一步<br><img src="https://img-blog.csdnimg.cn/20200327111614282.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>35.克隆类型选择链接克隆，尽量节省磁盘空间<br><img src="https://img-blog.csdnimg.cn/2020032711163713.png?x-oss-process=image" alt="在这里插入图片描述"><br>36.命名<br><img src="https://img-blog.csdnimg.cn/20200327111730702.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327111810391.png?x-oss-process=image" alt="在这里插入图片描述"><br>37.可以看到安装完成之后的情形<br><img src="https://img-blog.csdnimg.cn/20200327111851452.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327111909745.png" alt="在这里插入图片描述"></p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-配置网卡"><a href="#1-配置网卡" class="headerlink" title="1.配置网卡"></a>1.配置网卡</h4><p><img src="https://img-blog.csdnimg.cn/20200327112637566.png" alt="在这里插入图片描述"><br>输入上面的命令可以查看hadoop01的网络环境：如下图所示<br><img src="https://img-blog.csdnimg.cn/20200327112644781.png" alt="在这里插入图片描述"><br>然后开始修改hadoop02，hadoop03的网络配置<br><img src="https://img-blog.csdnimg.cn/20200327112715134.png?x-oss-process=image" alt="在这里插入图片描述"><br>改动如下图所示：<br>也就是将上面的配置删除，下面的NAME=”eth1” 改成eth0<br><img src="https://img-blog.csdnimg.cn/20200327112733595.png" alt="在这里插入图片描述"><br>hadoop03的操作和hadoop02的一样</p>
<p><strong>注意：</strong> 这里的MAC地址不能一样，如果一样，就需要自动生成一个<br><img src="https://img-blog.csdnimg.cn/20200327113128393.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="2-配置静态ip"><a href="#2-配置静态ip" class="headerlink" title="2.配置静态ip"></a>2.配置静态ip</h4><p>修改hadoop01，02，03的网络配置文件(ifcfg-eth0)<br><img src="https://img-blog.csdnimg.cn/20200327113449436.png" alt="在这里插入图片描述"><br>可以查看配置文件的内容如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200327113458775.png" alt="在这里插入图片描述"><br>将网络配置改为下面的：<br><img src="https://img-blog.csdnimg.cn/20200327113507394.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>验证网络配置：<br><img src="https://img-blog.csdnimg.cn/20200327113527171.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里使用静态IP，ip地址分别是134 135 136<br>hadoop02和hadoop03的操作和hadoop01的一样，重复即可</p>
<h4 id="3-配置虚拟机网络"><a href="#3-配置虚拟机网络" class="headerlink" title="3.配置虚拟机网络"></a>3.配置虚拟机网络</h4><p>首先需要检查是否开启了5个服务<br>在控制面板的服务里面可以看到是否开启<br><img src="https://img-blog.csdnimg.cn/20200327112000348.png" alt="在这里插入图片描述"><br>1.编辑-&gt;虚拟网络编辑器<br><img src="https://img-blog.csdnimg.cn/20200327114410335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdTEzNDAzMDgzNTA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.配置网络编辑器<br><img src="https://img-blog.csdnimg.cn/20200327114500515.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200327114550386.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327114917915.png?x-oss-process=image" alt="在这里插入图片描述"><br>NAT设置如图所示：<br><img src="https://img-blog.csdnimg.cn/20200327114628469.png?x-oss-process=image" alt="在这里插入图片描述"><br>DHCP设置如图所示：<br><img src="https://img-blog.csdnimg.cn/2020032711470347.png?x-oss-process=image" alt="在这里插入图片描述"><br>修改VMware network<br><img src="https://img-blog.csdnimg.cn/20200327114710335.png" alt="在这里插入图片描述"><br>将VMnet8的ipv4修改为下图所示<br><img src="https://img-blog.csdnimg.cn/20200327114717792.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="4-主机名映射配置"><a href="#4-主机名映射配置" class="headerlink" title="4.主机名映射配置"></a>4.主机名映射配置</h4><p><img src="https://img-blog.csdnimg.cn/20200327115555637.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115608830.png" alt="在这里插入图片描述"></p>
<h4 id="5-IP映射配置"><a href="#5-IP映射配置" class="headerlink" title="5.IP映射配置"></a>5.IP映射配置</h4><p><img src="https://img-blog.csdnimg.cn/20200327115618260.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115627958.png" alt="在这里插入图片描述"></p>
<h4 id="6-windows的hosts配置"><a href="#6-windows的hosts配置" class="headerlink" title="6.windows的hosts配置"></a>6.windows的hosts配置</h4><p>修改Windows下的hosts文件<br><img src="https://img-blog.csdnimg.cn/20200327115930695.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327115937887.png" alt="在这里插入图片描述"></p>
<p><strong>注意：</strong>网络配置完成记得重启网络服务<br><code>service network restart</code>或者重启服务器<code>reboot</code><br>完成以上步骤，网络配置就算完成</p>
<h4 id="7-测试网络配置"><a href="#7-测试网络配置" class="headerlink" title="7.测试网络配置"></a>7.测试网络配置</h4><p>接下来测试网络配置是否完成<br><img src="https://img-blog.csdnimg.cn/20200327120013734.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<blockquote>
<p>ifcfg-eth0 配置参数说明<br>1.TYPE：配置文件接口类型。在/etc/sysconfig/network-scripts/目录有多种网络配置文件，有Ethernet 、IPsec等类型，网络接口类型为Ethernet。<br>2.DEVICE：网络接口名称<br>3.BOOTPROTO：系统启动地址协议<br>4.none：不使用启动地址协议<br>5.bootp：BOOTP协议<br>6.dhcp：DHCP动态地址协议<br>7.static：静态地址协议<br>8.ONBOOT：系统启动时是否激活<br>            yes：系统启动时激活该网络接口<br>            no：系统启动时不激活该网络接口<br>9.IPADDR：IP地址<br>10.NETMASK：子网掩码<br>11.GATEWAY：网关地址<br>12.BROADCAST：广播地址<br>13.HWADDR/MACADDR：MAC地址。只需设置其中一个，同时设置时不能相互冲突。<br>14.PEERDNS：是否指定DNS。如果使用DHCP协议，默认为yes</p>
</blockquote>
<h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>输入<code>rpm -qa|grep ssh</code>查看ssh是否安装<br><img src="https://img-blog.csdnimg.cn/20200327121043104.png" alt="在这里插入图片描述"><br>如果没有安装：<code>yum install openssh-server</code></p>
<h3 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h3><p>1.为什么要免密登录<br>Hadoop节点众多，所以一般在主节点启动从节点，这个时候就需要程序自动在主节点登录<br>到从节点中，如果不能免密就每次都要输入密码，非常麻烦<br>2. 免密SSH登录的原理<br>需要先在B节点配置A节点的公钥<br>A节点请求B节点要球登录<br>B节点使用A节点的公钥，加密一段随机文本<br>A节点使用私钥解密，并发回给B节点<br>B节点验证文本是否正确</p>
<p><img src="https://img-blog.csdnimg.cn/20200327121318858.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>这里为了更方便的操作，使用secureCRT文件<br>打开secureCRT文件，new Session创建相应的session连接<br>1.new Session<img src="https://img-blog.csdnimg.cn/20200327122809177.png" alt="在这里插入图片描述"><br>2.下一步<br><img src="https://img-blog.csdnimg.cn/20200327122947738.png?x-oss-process=image" alt="在这里插入图片描述"><br>3.填写相应信息<br><img src="https://img-blog.csdnimg.cn/20200327123020515.png?x-oss-process=image" alt="在这里插入图片描述"><br>4.SFTP协议<img src="https://img-blog.csdnimg.cn/20200327123105814.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.命名<br><img src="https://img-blog.csdnimg.cn/2020032712314534.png?x-oss-process=image" alt="在这里插入图片描述"><br>最后效果：<br> <img src="https://img-blog.csdnimg.cn/20200327123215433.png" alt="在这里插入图片描述"><br> 配置完成之后虚拟机就可以后台运行了<br><img src="https://img-blog.csdnimg.cn/20200327124339234.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里为了软件的美观，可以进行相应的设置<br>这里推荐一个配色方案：<br><a href="https://blog.51cto.com/sandshell/2109176" target="_blank" rel="noopener">SecureCRT优化调整、永久设置、保护眼睛和配色方案</a></p>
<h4 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h4><p>1.在三台机器执行以下命令，生成公钥与私钥<br><code>ssh-keygen -t rsa</code><br>一直回车就行了<br><img src="https://img-blog.csdnimg.cn/20200327123828820.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>2.复制<code>ssh-copy-id hadoop01</code><br><img src="https://img-blog.csdnimg.cn/20200327123939763.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327123952454.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327124005151.png?x-oss-process=image" alt="在这里插入图片描述"><br>将第一台机器的公钥拷贝到其他机器<br><code>scp /root/.ssh/authorized_keys hadoop02:/root/.ssh</code><br><code>scp /root/.ssh/authorized_keys hadoop03:/root/.ssh</code><br><img src="https://img-blog.csdnimg.cn/20200327124148240.png" alt="在这里插入图片描述"><br>如果3台机器可以相互访问，说明配置成功<br><img src="https://img-blog.csdnimg.cn/20200327124153657.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="hadoop安装"><a href="#hadoop安装" class="headerlink" title="hadoop安装"></a>hadoop安装</h3><blockquote>
<p>Hadoop集群部署模式 </p>
<ol>
<li>在独立模式下，所有程序都在单个VM上执行，调试Hadoop集群的MapReduce程序也非常方便。一般情况下，该模式常用于学习或开发阶段进行调试程序。</li>
<li>在伪分布式模式下，Hadoop程序的守护进程都运行在一台节点上，该模式主要用于调试Hadoop分布式程序的代码，以及程序执行是否正确。伪分布式模式是完全分布式模式的一个特例。</li>
<li>在完全分布式模式下，Hadoop的守护进程分别运行在由多个主机措建的集群上，不同节点担任不同的角色，在实际工作应用开发中，通常使用该模式构建企业级Hadoop系统。</li>
</ol>
</blockquote>
<blockquote>
<p>从JDK版本7u71以后，JAVA将会在同一时间发布两个版本的JDK，其中： </p>
<ol>
<li>奇数版本为BUG修正并全部通过检验的版本，官方强烈推荐使用这个版本。</li>
<li>偶数版本包含了奇数版本所有的内容，以及未被验证的BUG修复，Oracle官方表示：除非你深受BUG困扰，否则不推荐您使用这个版本。</li>
</ol>
</blockquote>
<p><a href="http://hbase.apache.org/book.html#basic.prerequisites" target="_blank" rel="noopener">http://hbase.apache.org/book.html#basic.prerequisites</a><br><a href="http://hive.apache.org/downloads.html" target="_blank" rel="noopener">http://hive.apache.org/downloads.html</a><br><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>根据官网推荐，使用如下软件配置<br><img src="https://img-blog.csdnimg.cn/202003271247571.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="1-上传文件并创建相应文件"><a href="#1-上传文件并创建相应文件" class="headerlink" title="1.上传文件并创建相应文件"></a>1.上传文件并创建相应文件</h4><p>1.创建文件：在根目录下创建下图文件<br><img src="https://img-blog.csdnimg.cn/2020032712490655.png" alt="在这里插入图片描述"></p>
<p>2.通过命令将文件拖进software文件中<br>安装上传文件命令<code>yum install -y lrzsz</code><br>执行命令rz，上传文件<br>执行命令sz，下载文件<br><img src="https://img-blog.csdnimg.cn/20200327125021970.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h4><p>解压jdk文件到/export/servers/路径下<br><code>tar -zxvf jdk-8u201-linux-x64.tar.gz -C /export/servers/</code><br>将jdk文件移动到jdk路径下<br><code>mv jdk1.8.0_201 jdk</code></p>
<p>4.添加环境变量<br><code>vim /etc/profile</code><br>添加下列代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;export&#x2F;servers&#x2F;jdk</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure>
<p>添加完成之后记得<code>source /etc/profile</code>使配置生效<br>测试：<br><code>java -version</code><br><img src="https://img-blog.csdnimg.cn/20200327125713207.png" alt="在这里插入图片描述"><br><code>which java</code><br><img src="https://img-blog.csdnimg.cn/20200327125729409.png" alt="在这里插入图片描述"></p>
<h4 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h4><p>1.解压<br><code>tar -zxvf hadoop-2.7.7.tar.gz -C /export/servers/</code><br>2.编写<code>/etc/profile文件</code><br><code>vim /etc/profile</code><br>添加下列命令：<br><img src="https://img-blog.csdnimg.cn/20200327125936586.png" alt="在这里插入图片描述"><br>配置完成之后：<code>source /etc/profile</code><br> <img src="https://img-blog.csdnimg.cn/20200327125950742.png" alt="在这里插入图片描述"><br> 测试：<br> <code>hadoop version</code>查看是否配置完成<img src="https://img-blog.csdnimg.cn/2020032713000287.png" alt="在这里插入图片描述"></p>
<h3 id="hadoop入门案例："><a href="#hadoop入门案例：" class="headerlink" title="hadoop入门案例："></a>hadoop入门案例：</h3><p><img src="https://img-blog.csdnimg.cn/20200327130134643.png" alt="在这里插入图片描述"><br>1.进入hadoop-2.7.7下面<br>2.创建一个input文件夹<br>3.将Hadoop的xml配置文件复制到input<br>xml配置文件是etc/hadoop/*.xml’</p>
<p>4.执行share目录下的MapReduce程序<br><code>hadoop jar hadoop-mapreduce-examples-2.7.2.jar grep input output &#39;dfs[a-z.]+&#39;</code><br><img src="https://img-blog.csdnimg.cn/20200327130119673.png?x-oss-process=image" alt="在这里插入图片描述"><br>5.在<strong>hadoop-2.7.7路径下</strong>查看输出结果<br><code>cat output/*</code></p>
<p><strong>注意:</strong> hadoop jar 是命令，hadoop-mapreduce-examples-2.7.7.jar是自己写的mr代码，input 输入文件夹，output 输出文件夹</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop集群搭建</title>
    <url>/2020/03/28/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Hadoop集群搭建之前记得完成hadoop运行环境的搭建</p>
</blockquote>
<a id="more"></a>
<p>hadoop集群搭建：<br><img src="https://img-blog.csdnimg.cn/20200327140632968.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>也就是要修改以下文件<br><img src="https://img-blog.csdnimg.cn/20200327140653262.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>1.使用sublime文件<br>配置方法：<a href="https://blog.csdn.net/liu1340308350/article/details/105139669" target="_blank" rel="noopener">https://blog.csdn.net/liu1340308350/article/details/105139669</a><br>2.直接在secureCRT中配置<br>这里我是使用第一种方法配置的</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"># or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"># distributed with this work for additional information</span></span><br><span class="line"><span class="comment"># regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"># to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"># "License"); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"># with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Hadoop-specific environment variables here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The only required environment variable is JAVA_HOME.  All others are</span></span><br><span class="line"><span class="comment"># optional.  When running a distributed configuration it is best to</span></span><br><span class="line"><span class="comment"># set JAVA_HOME in this file, so that it is correctly defined on</span></span><br><span class="line"><span class="comment"># remote nodes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The java implementation to use.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/<span class="built_in">export</span>/servers/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># The jsvc implementation to use. Jsvc is required to run secure datanodes</span></span><br><span class="line"><span class="comment"># that bind to privileged ports to provide authentication of data transfer</span></span><br><span class="line"><span class="comment"># protocol.  Jsvc is not required if SASL is configured for authentication of</span></span><br><span class="line"><span class="comment"># data transfer protocol using non-privileged ports.</span></span><br><span class="line"><span class="comment">#export JSVC_HOME=$&#123;JSVC_HOME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$&#123;HADOOP_CONF_DIR:-"/etc/hadoop"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra Java CLASSPATH elements.  Automatically insert capacity-scheduler.</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$HADOOP_HOME</span>/contrib/capacity-scheduler/*.jar; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$HADOOP_CLASSPATH</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$HADOOP_CLASSPATH</span>:<span class="variable">$f</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLASSPATH=<span class="variable">$f</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum amount of heap to use, in MB. Default is 1000.</span></span><br><span class="line"><span class="comment">#export HADOOP_HEAPSIZE=</span></span><br><span class="line"><span class="comment">#export HADOOP_NAMENODE_INIT_HEAPSIZE=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra Java runtime options.  Empty by default.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"<span class="variable">$HADOOP_OPTS</span> -Djava.net.preferIPv4Stack=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command specific options appended to HADOOP_OPTS when specified</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_NAMENODE_OPTS=<span class="string">"-Dhadoop.security.logger=<span class="variable">$&#123;HADOOP_SECURITY_LOGGER:-INFO,RFAS&#125;</span> -Dhdfs.audit.logger=<span class="variable">$&#123;HDFS_AUDIT_LOGGER:-INFO,NullAppender&#125;</span> <span class="variable">$HADOOP_NAMENODE_OPTS</span>"</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_DATANODE_OPTS=<span class="string">"-Dhadoop.security.logger=ERROR,RFAS <span class="variable">$HADOOP_DATANODE_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECONDARYNAMENODE_OPTS=<span class="string">"-Dhadoop.security.logger=<span class="variable">$&#123;HADOOP_SECURITY_LOGGER:-INFO,RFAS&#125;</span> -Dhdfs.audit.logger=<span class="variable">$&#123;HDFS_AUDIT_LOGGER:-INFO,NullAppender&#125;</span> <span class="variable">$HADOOP_SECONDARYNAMENODE_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_NFS3_OPTS=<span class="string">"<span class="variable">$HADOOP_NFS3_OPTS</span>"</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_PORTMAP_OPTS=<span class="string">"-Xmx512m <span class="variable">$HADOOP_PORTMAP_OPTS</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following applies to multiple commands (fs, dfs, fsck, distcp etc)</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_CLIENT_OPTS=<span class="string">"-Xmx512m <span class="variable">$HADOOP_CLIENT_OPTS</span>"</span></span><br><span class="line"><span class="comment">#HADOOP_JAVA_PLATFORM_OPTS="-XX:-UsePerfData $HADOOP_JAVA_PLATFORM_OPTS"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># On secure datanodes, user to run the datanode as after dropping privileges.</span></span><br><span class="line"><span class="comment"># This **MUST** be uncommented to enable secure HDFS if using privileged ports</span></span><br><span class="line"><span class="comment"># to provide authentication of data transfer protocol.  This **MUST NOT** be</span></span><br><span class="line"><span class="comment"># defined if SASL is configured for authentication of data transfer protocol</span></span><br><span class="line"><span class="comment"># using non-privileged ports.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_USER=<span class="variable">$&#123;HADOOP_SECURE_DN_USER&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where log files are stored.  $HADOOP_HOME/logs by default.</span></span><br><span class="line"><span class="comment">#export HADOOP_LOG_DIR=$&#123;HADOOP_LOG_DIR&#125;/$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where log files are stored in the secure data environment.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_LOG_DIR=<span class="variable">$&#123;HADOOP_LOG_DIR&#125;</span>/<span class="variable">$&#123;HADOOP_HDFS_USER&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># HDFS Mover specific parameters</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># Specify the JVM options to be used when starting the HDFS Mover.</span></span><br><span class="line"><span class="comment"># These options will be appended to the options specified as HADOOP_OPTS</span></span><br><span class="line"><span class="comment"># and therefore may override any similar flags set in HADOOP_OPTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># export HADOOP_MOVER_OPTS=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># Advanced Users Only!</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The directory where pid files are stored. /tmp by default.</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> this should be set to a directory that can only be written to by </span></span><br><span class="line"><span class="comment">#       the user that will run the hadoop daemons.  Otherwise there is the</span></span><br><span class="line"><span class="comment">#       potential for a symlink attack.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_PID_DIR=<span class="variable">$&#123;HADOOP_PID_DIR&#125;</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_SECURE_DN_PID_DIR=<span class="variable">$&#123;HADOOP_PID_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A string representing this instance of hadoop. $USER by default.</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_IDENT_STRING=<span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p>也就是修改JDK路径<br><img src="https://img-blog.csdnimg.cn/20200327142029116.png" alt="在这里插入图片描述"><br><strong>注意：</strong> JAVA_HOME的路径按照你自己的路径来</p>
<h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">		  &lt;value&gt;hdfs://hadoop01:9000&lt;/value&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">       &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;/<span class="built_in">export</span>/servers/hadoop-2.7.7/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">	    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">     &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">		 &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop02:50090&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>fs.defaultFS表示我们对HDFS的访问路径<br>dfs.replication指定副本数量，也就是一个文件存几遍<br>dfs.namenode.secondary.http-address表示2nn的访问路径</p>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><p>系统里面没有mapred-site.xml文件，则需要复制一个<br><code>cp mapred-site.xml.template mapred-site.xml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- 指定MR运行在Yarn上 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt; </span><br><span class="line">  &lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop01:10020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!-- 历史服务器web端地址 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop01:19888&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;hadoop01&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- Reducer获取数据的方式 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;!-- 日志保留时间设置7天 --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;	</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<h4 id="slaves"><a href="#slaves" class="headerlink" title="slaves"></a>slaves</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br><span class="line">hadoop03</span><br></pre></td></tr></table></figure>
<h4 id="上传配置"><a href="#上传配置" class="headerlink" title="上传配置"></a>上传配置</h4><p>将以上修改的文件上传到服务器中：<br><strong>右键–&gt;SFTP/FTP–&gt;Upload File</strong><br>对应下图文件：<br>注意：只要是修改过的文件都需要Upload<br><img src="https://img-blog.csdnimg.cn/20200327142853963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdTEzNDAzMDgzNTA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="配置文件分发"><a href="#配置文件分发" class="headerlink" title="配置文件分发"></a>配置文件分发</h3><p>让hadoop02、03和01保持一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /etc/profile hadoop02:/etc/profile</span><br><span class="line">scp /etc/profile hadoop03:/etc/profile</span><br><span class="line">scp -r /<span class="built_in">export</span>/ hadoop02:/</span><br><span class="line">scp -r /<span class="built_in">export</span>/ hadoop03:/</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200327143347362.png?x-oss-process=image" alt="在这里插入图片描述"><br>scp /etc/profile hadoop02:/etc/profile这句是发环境变量<br>scp -r /export/ hadoop02:/这句是发hadoop整个文件夹</p>
<p><strong>注意：</strong> 命令执行完之后在hadoop02和hadoop03上执行<code>source /etc/profile</code></p>
<p>配置完以上的文件，那么集群基本配置就已经完成</p>
<h3 id="执行格式化"><a href="#执行格式化" class="headerlink" title="执行格式化"></a>执行格式化</h3><p>在hadoop01中执行下列命令<br><code>hdfs namenode -format</code><br><img src="https://img-blog.csdnimg.cn/20200327143553474.png?x-oss-process=image" alt="在这里插入图片描述"><br>在上图看到下图内容则说明文件配置成功<br><img src="https://img-blog.csdnimg.cn/20200327143544630.png" alt="在这里插入图片描述"></p>
<h3 id="查看hadoop信息"><a href="#查看hadoop信息" class="headerlink" title="查看hadoop信息"></a>查看hadoop信息</h3><p><img src="https://img-blog.csdnimg.cn/20200327143748685.png" alt="在这里插入图片描述"><br><strong>注意：</strong> 第一次进入没有data文件，需要启动namenode<br><img src="https://img-blog.csdnimg.cn/20200327143802429.png" alt="在这里插入图片描述"><br>下图是hadoop文件的树形结构：<br><img src="https://img-blog.csdnimg.cn/202003271451261.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327145141354.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327145153230.png?x-oss-process=image" alt="在这里插入图片描述"><br><strong>注意：</strong><br>如果想让文件显示树形结构，需要安装tree文件：<code>yum -y install tree</code><br><img src="https://img-blog.csdnimg.cn/20200327143812869.png" alt="在这里插入图片描述"><br>查看版本信息：clusterID必须保持一致<br><img src="https://img-blog.csdnimg.cn/2020032714382229.png" alt="在这里插入图片描述"><br><strong>注意：</strong><br>1.如果后面出现集群找不到数据的情况，那就是因为NameNode和DataNode的集群id不一致<br>2.格式化NameNode，会产生新的集群id</p>
<h3 id="启动HDFS和YARN"><a href="#启动HDFS和YARN" class="headerlink" title="启动HDFS和YARN"></a>启动HDFS和YARN</h3><p><img src="https://img-blog.csdnimg.cn/20200327145625866.png" alt="在这里插入图片描述"></p>
<p>hadoop01:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start resourcemanager</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<p>hadoop02:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br><span class="line">在节点hadoop02执行指令启动SecondaryNameNode进程</span><br><span class="line">hadoop-daemon.sh start secondarynamenode</span><br></pre></td></tr></table></figure>

<p>hadoop03:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-daemon.sh start datanode</span><br><span class="line">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<h4 id="脚本一键启动"><a href="#脚本一键启动" class="headerlink" title="脚本一键启动"></a>脚本一键启动</h4><p>在主节点hadoop01上执行指令<code>start-dfs.sh</code>或<code>stop-dfs.sh</code>启动/关闭所有HDFS服务进程<br>在主节点hadoop01上执行指令<code>start-yarn.sh</code>或<code>stop-yarn.sh</code>启动/关闭所有YARN服务进程；<br>在主节点hadoop01上执行<code>start-all.sh</code>或<code>stop-all.sh</code>指令，直接启动/关闭整个Hadoop集群服务。</p>
<h4 id="查看是否启动"><a href="#查看是否启动" class="headerlink" title="查看是否启动"></a>查看是否启动</h4><p>hadoop01，02，03的情况如下图所示：<br>hadoop01:<br><img src="https://img-blog.csdnimg.cn/20200327150056763.png" alt="在这里插入图片描述"><br>hadoop02:<br><img src="https://img-blog.csdnimg.cn/20200327150104128.png" alt="在这里插入图片描述"><br>hadoop03:<br><img src="https://img-blog.csdnimg.cn/20200327150110367.png" alt="在这里插入图片描述"></p>
<h4 id="配置jps快捷键"><a href="#配置jps快捷键" class="headerlink" title="配置jps快捷键"></a>配置jps快捷键</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建文件夹 /root/bin</span><br><span class="line">touch jpsall</span><br><span class="line">vim jpsall</span><br><span class="line">chmod 777 jpsall</span><br></pre></td></tr></table></figure>
<p>jpsall文件内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hadoop01 hadoop02 hadoop03</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">echo ===================== <span class="variable">$i</span> ======================</span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">"source /etc/profile &amp;&amp; jps | grep -v Jps"</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>配置完成就不再需要单独运行jps了<br><strong>测试：</strong><br><img src="https://img-blog.csdnimg.cn/20200327151641623.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h4 id="游览器访问"><a href="#游览器访问" class="headerlink" title="游览器访问"></a>游览器访问</h4><p>Hadoop集群正常启动后，它默认开放了两个端口50070和8088 ，需要关闭防火墙才能访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> hadoop02和hadoop03的防火墙也需要关闭<br>关闭防火墙之后，在游览器中输入下列网址即可访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://hadoop01:50070/</span><br><span class="line">http://hadoop01:8088</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200327150457137.png?x-oss-process=image" alt="在这里插入图片描述"><br>检查3个datanode是否显示：<br><img src="https://img-blog.csdnimg.cn/20200327150537481.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327150555548.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>执行命令报错：<br><code>export HADOOP_ROOT_LOGGER=DEBUG,console
hdfs dfs -ls /</code><br><img src="https://img-blog.csdnimg.cn/20200327151905501.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327151915561.png" alt="在这里插入图片描述"><br>查阅debug报错信息，可以看到问题是glib版本不够</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-下载对应文件"><a href="#1-下载对应文件" class="headerlink" title="1.下载对应文件"></a>1.下载对应文件</h5><p>下载glibc-2.14.tar.bz2<br>地址为：<a href="http://ftp.ntu.edu.tw/gnu/glibc/" target="_blank" rel="noopener">http://ftp.ntu.edu.tw/gnu/glibc/</a><br>下载glibc-linuxthreads-2.5.tar.bz2<br>地址为：<a href="http://ftp.ntu.edu.tw/gnu/glibc/" target="_blank" rel="noopener">http://ftp.ntu.edu.tw/gnu/glibc/</a></p>
<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">tar -xjvf glibc-2.14.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> glibc-2.14</span><br><span class="line">tar -xjvf ../glibc-linuxthreads-2.5.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">"-g -O2"</span></span><br><span class="line">glibc-2.14/configure --prefix=/usr --<span class="built_in">disable</span>-profile --<span class="built_in">enable</span>-add-ons -</span><br><span class="line">-with-headers=/usr/include --with-binutils=/usr/bin --<span class="built_in">disable</span>-sanitychecks</span><br><span class="line">make//编译，执行很久(5-10分钟)，可能出错，出错再重新执行</span><br><span class="line">make install</span><br><span class="line">ll /lib64/libc.so.6</span><br></pre></td></tr></table></figure>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="https://img-blog.csdnimg.cn/2020032715242188.png" alt="在这里插入图片描述"></p>
<h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p><img src="https://img-blog.csdnimg.cn/20200327152654363.png" alt="在这里插入图片描述"><br>可知集群已经上hdfs了：<br><img src="https://img-blog.csdnimg.cn/20200327152702853.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327152719538.png" alt="在这里插入图片描述"></p>
<p>由下图可知集群测试成功：<br>看到3个备份，集群数据统一<br><img src="https://img-blog.csdnimg.cn/20200327152854544.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-2.7.7.jar wordcount /wordcount/input /wordcount/output</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> output文件不能存在<br><img src="https://img-blog.csdnimg.cn/20200327153113296.png?x-oss-process=image" alt="在这里插入图片描述"><br>到这一步为止，表示集群运行正常</p>
<h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><p><img src="https://img-blog.csdnimg.cn/20200327154728635.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327154806819.png" alt="在这里插入图片描述"><br>可以看到无法访问页面：</p>
<p><img src="https://img-blog.csdnimg.cn/20200327154856858.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里就需要继续编辑vim mapred-site.xml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 历史服务器端地址 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; </span><br><span class="line">&lt;value&gt;hadoop01:10020&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;!-- 历史服务器web端地址 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; </span><br><span class="line">    &lt;value&gt;hadoop01:19888&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>启动历史服务器<br><code>mr-jobhistory-daemon.sh start historyserver</code></p>
<p>可以看到下图显示：<br><img src="https://img-blog.csdnimg.cn/2020032715502952.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h3 id="日志聚集"><a href="#日志聚集" class="headerlink" title="日志聚集"></a>日志聚集</h3><p><strong>目的：</strong> 应用运行完成以后，将程序运行日志信息上传到HDFS系统上。</p>
<p>这里需要配置yarn-site.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 日志聚集功能使能 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; </span><br><span class="line">&lt;value&gt;<span class="literal">true</span>&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;!-- 日志保留时间设置7天 --&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt; </span><br><span class="line">&lt;value&gt;604800&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>1.重启NodeManager 、ResourceManager和HistoryServer<br>2..删除HDFS上已经存在的输出文件<br><code>hdfs dfs -rm -R /wordcount/output</code><br>3.执行WordCount程序<br>4.查看日志聚集<br>点击log文件<br><img src="https://img-blog.csdnimg.cn/20200327155302493.png" alt="在这里插入图片描述"><br>可以看到：<br><img src="https://img-blog.csdnimg.cn/20200327155318637.png?x-oss-process=image" alt="在这里插入图片描述"><br>那么现在开始，每个任务都开起了实时日志收集功能，日志保存7天，全部可以在cluster中查看了</p>
<h3 id="集群时间同步"><a href="#集群时间同步" class="headerlink" title="集群时间同步"></a>集群时间同步</h3><p>这里以hadoop01作为基准时间，02、03跟他一致</p>
<h4 id="1-查看是否有ntp文件，系统默认安装"><a href="#1-查看是否有ntp文件，系统默认安装" class="headerlink" title="1.查看是否有ntp文件，系统默认安装"></a>1.查看是否有ntp文件，系统默认安装</h4><p><code>rpm -qa|grep ntp</code><br><img src="https://img-blog.csdnimg.cn/20200327160254904.png" alt="在这里插入图片描述"></p>
<h4 id="2-vim-etc-ntp-conf"><a href="#2-vim-etc-ntp-conf" class="headerlink" title="2.vim /etc/ntp.conf"></a>2.vim /etc/ntp.conf</h4><p><img src="https://img-blog.csdnimg.cn/2020032716040257.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327160414790.png?x-oss-process=image" alt="在这里插入图片描述"><br>修改点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、授权192.168.1.0-192.168.1.255网段上的所有机器可以从这台机器上查询和同步时间</span><br><span class="line">将  <span class="comment">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap为</span></span><br><span class="line">restrict 192.168.200.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line">2、集群在局域网中，不使用其他互联网上的时间</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">为</span><br><span class="line"></span><br><span class="line"><span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line">3、当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步</span><br><span class="line">server 127.127.1.0</span><br><span class="line"></span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure>
<h4 id="3-vim-etc-sysconfig-ntpd"><a href="#3-vim-etc-sysconfig-ntpd" class="headerlink" title="3.vim /etc/sysconfig/ntpd"></a>3.vim /etc/sysconfig/ntpd</h4><p>让硬件时间与系统时间一起同步<code>SYNC_HWCLOCK=yes</code><br><img src="https://img-blog.csdnimg.cn/20200327160618712.png" alt="在这里插入图片描述"><br>配置文件保存之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">重新启动ntpd服务</span><br><span class="line">service ntpd status</span><br><span class="line"></span><br><span class="line">设置ntpd服务开机启动</span><br><span class="line">chkconfig ntpd on</span><br></pre></td></tr></table></figure>

<h4 id="4-在hadoop2和hadoop3上配置"><a href="#4-在hadoop2和hadoop3上配置" class="headerlink" title="4.在hadoop2和hadoop3上配置"></a>4.在hadoop2和hadoop3上配置</h4><p><code>crontab -e</code> </p>
<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * /usr/sbin/ntpdate hadoop01</span><br></pre></td></tr></table></figure>
<p>这样会让hadoop02和hadoop03每10分钟与时间服务器同步一次</p>
<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>修改hadoop02的当前时间：<br><img src="https://img-blog.csdnimg.cn/20200327160931558.png" alt="在这里插入图片描述"><br>然后输入<code>mail</code>,系统会提示时间已经修改<br><img src="https://img-blog.csdnimg.cn/20200327161036874.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200327161056816.png?x-oss-process=image" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop集群</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea快捷键</title>
    <url>/2020/09/11/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Idea快捷键记录</p>
<a id="more"></a>

<h1 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">去掉空白： Ctrl + Shift + J</span><br><span class="line">格式化代码： Ctrl + Alt + L</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Idea快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP页面El表达式不起作用</title>
    <url>/2020/11/22/JSP%E9%A1%B5%E9%9D%A2El%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>首先查看web.xml文件 查看jsp servlet版本是多少？</p>
<a id="more"></a>

<p>头文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>此时的jsp servlet的版本为2.3，<strong>Servlet2.3或者更早的JSP页面默认是不使用EL表达式的</strong>，即不解析EL表达式，所以要不就是使用更高版本的jsp servlet。这样比较麻烦，这里Java提供了一各属性来解决这个问题，使2.3或更早版本能使用El表达式，该属性为<code>&lt;%@page isELIgnored=&quot;false&quot; %&gt;</code>默认是true，表示暂时不解析，此时我们在jsp页面头文件中设置为false，再次运行，此时jsp页面就会解析El表达式</p>
<p>jsp约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JSP</category>
      </categories>
      <tags>
        <tag>JSP</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM学习笔记</title>
    <url>/2020/12/20/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="为什么学习JVM"><a href="#为什么学习JVM" class="headerlink" title="为什么学习JVM"></a>为什么学习JVM</h1><p>1.面试需要</p>
<p>2.更深入的理解Java</p>
<ul>
<li>一个类是如何加载到JVM的</li>
<li>它在JVM中是如何存储的</li>
<li>如何运行的</li>
<li>方法是如何调用的</li>
<li>运行时内存怎么分配的</li>
<li>产生垃圾后是如何回收的</li>
</ul>
<p>3.排查解决故障</p>
<ul>
<li>内存溢出导致宕机了</li>
<li>CPU使用率居高不下</li>
<li>频繁卡顿</li>
<li>应用越跑越慢</li>
</ul>
<p>4.性能调优</p>
<ul>
<li>合理的分配内存</li>
<li>调整参数</li>
<li>选择GC垃圾回收器</li>
<li>第三方中间件的适配</li>
</ul>
<a id="more"></a>

<h1 id="2-认识JVM规范"><a href="#2-认识JVM规范" class="headerlink" title="2 认识JVM规范"></a>2 认识JVM规范</h1><h1 id="3-类加载、连接和初始化"><a href="#3-类加载、连接和初始化" class="headerlink" title="3.类加载、连接和初始化"></a>3.类加载、连接和初始化</h1><h1 id="4-内存分配"><a href="#4-内存分配" class="headerlink" title="4 内存分配"></a>4 内存分配</h1><h1 id="5-字节码执行引擎"><a href="#5-字节码执行引擎" class="headerlink" title="5 字节码执行引擎"></a>5 字节码执行引擎</h1><h1 id="6-垃圾回收"><a href="#6-垃圾回收" class="headerlink" title="6 垃圾回收"></a>6 垃圾回收</h1><h1 id="7-高效并发"><a href="#7-高效并发" class="headerlink" title="7  高效并发"></a>7  高效并发</h1><h1 id="8-性能监控与故障处理工具"><a href="#8-性能监控与故障处理工具" class="headerlink" title="8 性能监控与故障处理工具"></a>8 性能监控与故障处理工具</h1><h1 id="9-JVM调优"><a href="#9-JVM调优" class="headerlink" title="9 JVM调优"></a>9 JVM调优</h1>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java I/O详解</title>
    <url>/2020/12/27/Java-I-O%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>I/O</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射详解</title>
    <url>/2020/12/27/Java%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程</title>
    <url>/2020/08/04/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>Java多线程知识总结</p>
<a id="more"></a>

<h3 id="一-基本概念：程序、进程、线程"><a href="#一-基本概念：程序、进程、线程" class="headerlink" title="一.基本概念：程序、进程、线程"></a>一.基本概念：程序、进程、线程</h3><p>程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。<br>进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。也就是生命周期</p>
<blockquote>
<p>如：运行的QQ，运行中的MP3播放器<br>程序是静态的，进程是动态的<br>进程作为资源分配的单位，系统在运行时会为每个进程不同的内存区域。</p>
</blockquote>
<p>线程(thread)：进程可以进一步细化为线程，是一个程序内部的一条执行路径。</p>
<blockquote>
<p>若一个进程同一时间并行执行多个线程，就是支持多线程的。<br>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(PC)，线程切换的开销小<br>一个进程中的多个线程共享相同的内存单元/内存地址空间-&gt;它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能带来安全的隐患。</p>
</blockquote>
<p><strong>单核CPU与多核CPU的理解</strong></p>
<p>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”。但是因为CPU时间单元特别短，所以感觉不出来。</p>
<p>多核CPU</p>
<p><strong>并发与并行</strong></p>
<p>并行：多个CPU同时执行多个任务。例如：多个人同时做不同的事情。</p>
<p>并发：一个CPU（采用时间片）同时执行多个任务。例如：秒杀，多个人做一件事。</p>
<p><strong>多线程的优点</strong></p>
<p>1.提高应用程序的响应。对图形化界面更有意义，可以增强用户体验。</p>
<p>2.提高计算机系统CPU的利用率</p>
<p>3.改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p>
<h3 id="二-线程的创建和使用"><a href="#二-线程的创建和使用" class="headerlink" title="二.线程的创建和使用"></a>二.线程的创建和使用</h3><p>多线程的创建，方式一：继承与Thread类</p>
<p>1.创建一个类继承于Thread类的子类</p>
<p>2.重写Thread类的run()  ——》将此线程执行的操作声明在run()中</p>
<p>3.创建Thread类的子类的对象</p>
<p>4.通过此对象调用start()</p>
<p><strong>线程的调度</strong>：</p>
<h3 id="三-线程的生命周期"><a href="#三-线程的生命周期" class="headerlink" title="三.线程的生命周期"></a>三.线程的生命周期</h3><p>要想实现多线程，必须在主线程中创建新的线程对象。任何线程一般具有5种状态，即创建，就绪，运行，阻塞，终止。下面分别介绍一下这几种状态：</p>
<ul>
<li>创建状态 </li>
</ul>
<p>在程序中用构造方法创建了一个线程对象后，新的线程对象便处于新建状态，此时它已经有了相应的内存空间和其他资源，但还处于不可运行状态。新建一个线程对象可采用Thread 类的构造方法来实现，例如 “Thread thread=new Thread()”。</p>
<ul>
<li>就绪状态 </li>
</ul>
<p>新建线程对象后，调用该线程的 start() 方法就可以启动线程。当线程启动时，线程进入就绪状态。此时，线程将进入线程队列排队，等待 CPU 服务，这表明它已经具备了运行条件。</p>
<ul>
<li>运行状态 </li>
</ul>
<p>当就绪状态被调用并获得处理器资源时，线程就进入了运行状态。此时，自动调用该线程对象的 run() 方法。run() 方法定义该线程的操作和功能。</p>
<ul>
<li>阻塞状态 </li>
</ul>
<p>一个正在执行的线程在某些特殊情况下，如被人为挂起或需要执行耗时的输入/输出操作，会让 CPU 暂时中止自己的执行，进入阻塞状态。在可执行状态下，如果调用sleep(),suspend(),wait() 等方法，线程都将进入阻塞状态，发生阻塞时线程不能进入排队队列，只有当引起阻塞的原因被消除后，线程才可以转入就绪状态。</p>
<ul>
<li>死亡状态 </li>
</ul>
<p>线程调用 stop() 方法时或 run() 方法执行结束后，即处于死亡状态。处于死亡状态的线程不具有继续运行的能力。</p>
<p>在此提出一个问题，Java 程序每次运行至少启动几个线程？</p>
<p>回答：至少启动两个线程，每当使用 Java 命令执行一个类时，实际上都会启动一个 JVM，每一个JVM实际上就是在操作系统中启动一个线程，Java 本身具备了垃圾的收集机制。所以在 Java 运行时至少会启动两个线程，一个是 main 线程，另外一个是垃圾收集线程。</p>
<h3 id="四-线程的同步"><a href="#四-线程的同步" class="headerlink" title="四.线程的同步"></a>四.线程的同步</h3><h3 id="五-线程的通信"><a href="#五-线程的通信" class="headerlink" title="五.线程的通信"></a>五.线程的通信</h3><h3 id="六-JDK5-0新增线程创建方式"><a href="#六-JDK5-0新增线程创建方式" class="headerlink" title="六.JDK5.0新增线程创建方式"></a>六.JDK5.0新增线程创建方式</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器详解</title>
    <url>/2020/12/27/Java%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常详解</title>
    <url>/2020/12/27/Java%E5%BC%82%E5%B8%B8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口详解</title>
    <url>/2020/12/27/Java%E6%8E%A5%E5%8F%A3%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java泛型详解</title>
    <url>/2020/12/27/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解详解</title>
    <url>/2020/12/27/Java%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象详解</title>
    <url>/2020/12/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaSE基础</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装配置大全</title>
    <url>/2020/11/27/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>Linux各种版本安装配置</p>
<a id="more"></a>

<h1 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjg4NDEzNA==&mid=2247488461&idx=1&sn=3199f4d7f6854ab450a088135122d2ff&chksm=f9a1c004ced64912098b6e1b1d4406dbcc8858a6fc7b9d9e76196e33f28b613f940dd6d682dc&sessionid=1606460612&scene=126&clicktime=1606460870&enterid=1606460870&ascene=3&devicetype=android-27&version=2700143f&nettype=3gnet&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=A%2F6Xg4qYU%2FwWCE0t8HkjwzY%3D&pass_ticket=Mq6%2FQAWSPqK%2FgoRY6hwN80HcANi%2FWrcs4QkV5e%2BUTRSlviV9nk6vBi1LDmOauhub&wx_header=1" target="_blank" rel="noopener">CentOS 7 安装教程</a></p>
<h1 id="Ubuntu-20-04"><a href="#Ubuntu-20-04" class="headerlink" title="Ubuntu 20.04"></a>Ubuntu 20.04</h1><p><a href="https://mp.weixin.qq.com/s/vkLZ_3Jp4HdQ8PDIMYsGEw" target="_blank" rel="noopener">Ubuntu安装教程</a></p>
<h1 id="CentOS7磁盘操作"><a href="#CentOS7磁盘操作" class="headerlink" title="CentOS7磁盘操作"></a>CentOS7磁盘操作</h1><h2 id="linux磁盘分区扩容"><a href="#linux磁盘分区扩容" class="headerlink" title="linux磁盘分区扩容"></a>linux磁盘分区扩容</h2><p>大概分为以下几步：</p>
<ol>
<li>分区fdisk</li>
<li>格式化mkfs</li>
<li>挂载mount</li>
</ol>
<blockquote>
<p>详细操作：<a href="https://www.cnblogs.com/chenmh/p/5096592.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenmh/p/5096592.html</a></p>
</blockquote>
<p><strong>其他操作：</strong></p>
<p>du 查看文件数据占用多少磁盘空间<br>swap交换分区 是一种通过在磁盘中预先划分一定的空军，然后就讲把内存中暂时不常用的数据临时存放在磁盘中，以便腾出物理内存空间让更活跃的程序服务来使用的技术，其设计目的是为了解决真实物理内存不足的问题</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis三剑客</title>
    <url>/2020/11/19/MyBatis%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    <content><![CDATA[<p>MyBatis-generator</p>
<p>MyBatis-plugin</p>
<p>MyBatis-PageHelper</p>
<a id="more"></a>

<h1 id="Mybatis-generator代码自动生成"><a href="#Mybatis-generator代码自动生成" class="headerlink" title="Mybatis-generator代码自动生成"></a>Mybatis-generator代码自动生成</h1><p>mybatis-generator是一款流行的自动代码生成工具。</p>
<p>这里简述一下开发步骤：</p>
<h2 id="1-maven依赖配置"><a href="#1-maven依赖配置" class="headerlink" title="1.maven依赖配置"></a>1.maven依赖配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-新建配置文件generatorConfig-xml"><a href="#2-新建配置文件generatorConfig-xml" class="headerlink" title="2.新建配置文件generatorConfig.xml"></a>2.新建配置文件generatorConfig.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></span><br><span class="line"><span class="comment">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span></span><br><span class="line"><span class="comment">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span></span><br><span class="line"><span class="comment">&lt;properties resource="" url="" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></span><br><span class="line"><span class="comment">     location属性指明加载jar/zip包的全路径</span></span><br><span class="line"><span class="comment">&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    context:生成一组对象的环境 </span></span><br><span class="line"><span class="comment">    id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">    defaultModelType:指定生成对象的样式</span></span><br><span class="line"><span class="comment">        1，conditional：类似hierarchical；</span></span><br><span class="line"><span class="comment">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span></span><br><span class="line"><span class="comment">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span></span><br><span class="line"><span class="comment">    targetRuntime:</span></span><br><span class="line"><span class="comment">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span></span><br><span class="line"><span class="comment">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span></span><br><span class="line"><span class="comment">    introspectedColumnImpl：类全限定名，用于扩展MBG</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">defaultModelType</span>=<span class="string">"hierarchical"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoDelimitKeywords"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xmlFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></span><br><span class="line"><span class="comment">        @<span class="doctag">TODO:</span>是否可以扩展</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///pss"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 </span></span><br><span class="line"><span class="comment">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">            false：默认,</span></span><br><span class="line"><span class="comment">                scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></span><br><span class="line"><span class="comment">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span></span><br><span class="line"><span class="comment">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></span><br><span class="line"><span class="comment">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></span><br><span class="line"><span class="comment">            是否创建一个不可变的类，如果为true，</span></span><br><span class="line"><span class="comment">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></span><br><span class="line"><span class="comment">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span></span><br><span class="line"><span class="comment">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span></span><br><span class="line"><span class="comment">                1，属性名相同，类型相同，有相同的getter/setter方法；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></span><br><span class="line"><span class="comment">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span></span><br><span class="line"><span class="comment">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span></span><br><span class="line"><span class="comment">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span></span><br><span class="line"><span class="comment">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span></span><br><span class="line"><span class="comment">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></span><br><span class="line"><span class="comment">        选择的table会生成一下文件：</span></span><br><span class="line"><span class="comment">        1，SQL map文件</span></span><br><span class="line"><span class="comment">        2，生成一个主键类；</span></span><br><span class="line"><span class="comment">        3，除了BLOB和主键的其他字段的类；</span></span><br><span class="line"><span class="comment">        4，包含BLOB的类；</span></span><br><span class="line"><span class="comment">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span></span><br><span class="line"><span class="comment">        6，Mapper接口（可选）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        tableName（必要）：要生成对象的表名；</span></span><br><span class="line"><span class="comment">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span></span><br><span class="line"><span class="comment">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span></span><br><span class="line"><span class="comment">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span></span><br><span class="line"><span class="comment">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span></span><br><span class="line"><span class="comment">            4，否则，使用指定的大小写格式查询；</span></span><br><span class="line"><span class="comment">        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span></span><br><span class="line"><span class="comment">        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        可选：</span></span><br><span class="line"><span class="comment">        1，schema：数据库的schema；</span></span><br><span class="line"><span class="comment">        2，catalog：数据库的catalog；</span></span><br><span class="line"><span class="comment">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span></span><br><span class="line"><span class="comment">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        5，enableInsert（默认true）：指定是否生成insert语句；</span></span><br><span class="line"><span class="comment">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span></span><br><span class="line"><span class="comment">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span></span><br><span class="line"><span class="comment">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span></span><br><span class="line"><span class="comment">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span></span><br><span class="line"><span class="comment">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span></span><br><span class="line"><span class="comment">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span></span><br><span class="line"><span class="comment">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span></span><br><span class="line"><span class="comment">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span></span><br><span class="line"><span class="comment">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span></span><br><span class="line"><span class="comment">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userinfo"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></span><br><span class="line"><span class="comment">        &lt;property name="rootClass" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeCatalog" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeSchema" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeTableName" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></span><br><span class="line"><span class="comment">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"selectAllOrderByClause"</span> <span class="attr">value</span>=<span class="string">"age desc,username asc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">            column:主键的列名；</span></span><br><span class="line"><span class="comment">            sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</span></span><br><span class="line"><span class="comment">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性</span></span><br><span class="line"><span class="comment">        &lt;generatedKey column="" sqlStatement=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span></span><br><span class="line"><span class="comment">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span></span><br><span class="line"><span class="comment">            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span></span><br><span class="line"><span class="comment">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">            如果使用了columnOverride元素，该属性无效；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;columnRenamingRule searchString="" replaceString=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></span><br><span class="line"><span class="comment">             column:要重新设置的列名；</span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个columnOverride元素哈~</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">value</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></span><br><span class="line"><span class="comment">             &lt;property name="javaType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></span><br><span class="line"><span class="comment">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">             &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">             &lt;property name="delimitedColumnName" value=""/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></span><br><span class="line"><span class="comment">             column:指定要忽略的列的名字；</span></span><br><span class="line"><span class="comment">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-执行"><a href="#3-执行" class="headerlink" title="3.执行"></a>3.执行</h2><p>命令行界面<code>mvn mybatis-generator:generate</code></p>
<h1 id="Mybatis-plugin插件"><a href="#Mybatis-plugin插件" class="headerlink" title="Mybatis-plugin插件"></a>Mybatis-plugin插件</h1><p><a href="https://github.com/rockjava/intellij-mybatis-plugin" target="_blank" rel="noopener">mybatis-plugin插件详情</a></p>
<h2 id="1-特点："><a href="#1-特点：" class="headerlink" title="1.特点："></a>1.特点：</h2><ul>
<li>提供Mapper接口与配置文件中对应SQL的导航</li>
<li>编辑XML文件时自动补全</li>
<li>自动检查Mapper XML文件中ID冲突</li>
<li>自动检查Mapper XML文件中错误的属性值</li>
<li>等等</li>
</ul>
<h2 id="2-个人推荐"><a href="#2-个人推荐" class="headerlink" title="2.个人推荐"></a>2.个人推荐</h2><p>mybatis-plugin是需要购买授权的，这里我推荐MyBatisX</p>
<p><img src="/images/2020111904.png" alt="image-20201119203540933"></p>
<h1 id="Mybatis-PageHelper"><a href="#Mybatis-PageHelper" class="headerlink" title="Mybatis-PageHelper"></a>Mybatis-PageHelper</h1><p>开源网站：<a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.13&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://liuurick.github.io/2020/10/25/SpringBoot集成MyBatis的分页插件PageHelper/" target="_blank" rel="noopener">Mybatis-PageHelper个人博客记录</a></p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Mybatis-generator</tag>
        <tag>Mybatis-plugin</tag>
        <tag>Mybatis-PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis二级缓存的一个小细节</title>
    <url>/2020/10/23/MyBatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>记录一个小细节</p>
<a id="more"></a>

<p>​    Mybatis的一级缓存是SqlSession级别的缓存，当在同一个SqlSession中执行两次相同的SQL语句时，会将第一次执行查询的数据存入一级缓存中，第二次查询时会从缓存中获取数据，而不用再去数据库中查询，从而提高了查询性能。</p>
<p>​    Mybatis的二级缓存是mapper级别的缓存，多个SqlSession共用二级缓存，他们使用的同一个mapper的SQL语句操作数据库，获得的会存放在二级缓存中。</p>
<p>Mybatis默认没有开启二级缓存，需要在Mybatis的配置文件mybatis-config.xml中开启，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>settings元素要放在properties元素之后，typeAliases元素之前，否则配置文件会报错。</code></p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中count(字段) ，count(主键 id) ，count(1)和count(*)的区别</title>
    <url>/2020/11/18/MySQL%E4%B8%ADcount-%E5%AD%97%E6%AE%B5-%EF%BC%8Ccount-%E4%B8%BB%E9%94%AE-id-%EF%BC%8Ccount-1-%E5%92%8Ccount-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><strong>注：下面的讨论和结论是基于 InnoDB 引擎的。</strong></p>
<a id="more"></a>

<blockquote>
<p>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）</p>
</blockquote>
<p>count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p>
<p>所以，count(*)、count(1)和count(主键 id) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p>
<p>至于分析性能差别的时候，记住这么几个原则：</p>
<ul>
<li>server 层要什么就给什么；</li>
<li>InnoDB 只给必要的值；</li>
<li>现在的优化器只优化了 count(*) 的语义为“取行数”，其他“显而易见”的优化并没有做。</li>
</ul>
<p><strong>count(可空字段)</strong></p>
<p>扫描全表，读到server层，判断字段可空，拿出该字段所有值，判断每一个值是否为空，不为空则累加</p>
<p><strong>count(非空字段)与count(主键 id)</strong></p>
<p>扫描全表，读到server层，判断字段不可空，按行累加。</p>
<p><strong>count(1)</strong></p>
<p>扫描全表，但不取值，server层收到的每一行都是1，判断不可能是null，按值累加。</p>
<p><strong>注意：</strong>count(1)执行速度比count(主键 id)快的原因：从引擎返回 id 会涉及到解析数据行，以及拷贝字段值的操作。</p>
<p><strong>count(*)</strong></p>
<p>MySQL 执行count(<em>)在优化器做了专门优化。因为count(</em>)返回的行一定不是空。扫描全表，但是不取值，按行累加。</p>
<blockquote>
<p>看到这里，你会说优化器就不能自己判断一下吗，主键 id 肯定是非空的，为什么不能按照 count(<em>) 来处理，多么简单的优化。当然 MySQL 专门针对这个语句进行优化也不是不可以。但是这种需要专门优化的情况太多了，而且 MySQL 已经优化过 count(</em>) 了，你直接使用这种语句就可以了。</p>
</blockquote>
<p><strong>性能对比结论</strong></p>
<p><strong>count(可空字段) &lt; count(非空字段) = count(主键 id) &lt; count(1) ≈ count(*)</strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库中的Date,DateTime,TimeStamp和Time类型</title>
    <url>/2020/11/18/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84Date-DateTime-TimeStamp%E5%92%8CTime%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><strong>DATETIME</strong>类型用在你需要同时包含日期和时间信息的值时。MySQL检索并且以’YYYY-MM-DD HH:MM:SS’格式显示DATETIME值，支持的范围是’1000-01-01 00:00:00’到’9999-12-31 23:59:59’。（“支持”意味着尽管更早的值可能工作，但不能保证他们可以。）</p>
<a id="more"></a>

<p><strong>DATE</strong>类型用在你仅需要日期值时，没有时间部分。MySQL检索并且以’YYYY-MM-DD’格式显示DATE值，支持的范围是’1000-01-01’到’9999-12-31’。</p>
<p><strong>TIMESTAMP</strong>列类型提供一种类型，你可以使用它自动地用当前的日期和时间标记INSERT或UPDATE的操作。</p>
<p><strong>TIME</strong>数据类型表示一天中的时间。MySQL检索并且以”HH:MM:SS”格式显示TIME值。支持的范围是’00:00:00’到’23:59:59’。</p>
<p>创建数据库表测试：</p>
<p><img src="/images/2020111501.png" alt="image-20201115191901682"></p>
<p><img src="http://www.linuxidc.com/upload/2012_08/120811102669351.jpg" alt="img"></p>
<p><strong>datetime和timestamp的区别：</strong><br>1.datetime 的日期范围比较大；如果有1970年以前的数据还是要用datetime.但是timestamp 所占存储空间比较小。<br>2.timestamp 类型的列还有个特性：默认情况下，在 insert, update 数据时，timestamp 列会自动以当前时间（CURRENT_TIMESTAMP）填充/更新。</p>
<p>3.timestamp比较受时区timezone的影响以及MYSQL版本和服务器的<strong>SQL</strong> MODE的影响.</p>
<p>使用一个常用的格式集的任何一个，你可以指定DATETIME、</p>
<p><strong>DATE和TIMESTAMP值：</strong><br>‘YYYY-MM-DD HH:MM:SS’或’YY-MM-DD HH:MM:SS’格式的一个字符串,允许一种”宽松”的语法:任何标点可用作在日期部分和时间部分之间的分隔符。例如，’98-12-31 11:30:45’、’98.12.31 11+30+45’、’98/12/31 11<em>30</em>45’和‘98@12@31 11^30^45’是等价的。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL日期类型</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库集群-PXC方案</title>
    <url>/2020/12/13/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E7%BE%A4-PXC%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>docker中安装pxc集群比较简单，这里尝试在centos7安装MySQL集群</p>
<a id="more"></a>

<h1 id="一-安装环境"><a href="#一-安装环境" class="headerlink" title="一.安装环境"></a>一.安装环境</h1><p>Centos7</p>
<p>MySQL：5.7.22</p>
<p>Mycat</p>
<h1 id="二-创建PXC集群"><a href="#二-创建PXC集群" class="headerlink" title="二.创建PXC集群"></a>二.创建PXC集群</h1><h2 id="2-1-CentOS安装PerconaServer数据库"><a href="#2-1-CentOS安装PerconaServer数据库" class="headerlink" title="2.1 CentOS安装PerconaServer数据库"></a>2.1 CentOS安装PerconaServer数据库</h2><blockquote>
<p>官网下载网址：<a href="https://www.percona.com/downloads/Percona-Server-5.7/LATEST/" target="_blank" rel="noopener">https://www.percona.com/downloads/Percona-Server-5.7/LATEST/</a></p>
</blockquote>
<h2 id="2-2-安装PXC组建集群"><a href="#2-2-安装PXC组建集群" class="headerlink" title="2.2 安装PXC组建集群"></a>2.2 安装PXC组建集群</h2><h2 id="2-3-PXC集群的常用管理-数据库集群使用"><a href="#2-3-PXC集群的常用管理-数据库集群使用" class="headerlink" title="2.3 PXC集群的常用管理-数据库集群使用"></a>2.3 PXC集群的常用管理-数据库集群使用</h2><h2 id="2-4-PXC集群的常用管理-状态参数"><a href="#2-4-PXC集群的常用管理-状态参数" class="headerlink" title="2.4 PXC集群的常用管理-状态参数"></a>2.4 PXC集群的常用管理-状态参数</h2><h2 id="2-5-PXC节点的上线与关闭"><a href="#2-5-PXC节点的上线与关闭" class="headerlink" title="2.5 PXC节点的上线与关闭"></a>2.5 PXC节点的上线与关闭</h2><h2 id="2-6-MySQL集群中间件比较"><a href="#2-6-MySQL集群中间件比较" class="headerlink" title="2.6 MySQL集群中间件比较"></a>2.6 MySQL集群中间件比较</h2><h2 id="2-7-配置MyCat负载均衡"><a href="#2-7-配置MyCat负载均衡" class="headerlink" title="2.7 配置MyCat负载均衡"></a>2.7 配置MyCat负载均衡</h2><h2 id="2-8-数据切分"><a href="#2-8-数据切分" class="headerlink" title="2.8 数据切分"></a>2.8 数据切分</h2><h2 id="2-9-父子表"><a href="#2-9-父子表" class="headerlink" title="2.9 父子表"></a>2.9 父子表</h2><h2 id="2-10-组建双机热备的MyCat集群-构建高可用的MyCat集群"><a href="#2-10-组建双机热备的MyCat集群-构建高可用的MyCat集群" class="headerlink" title="2.10 组建双机热备的MyCat集群-构建高可用的MyCat集群"></a>2.10 组建双机热备的MyCat集群-构建高可用的MyCat集群</h2><h2 id="2-11-组建双机热备的MyCat集群-利用keepalived抢占虚拟IP"><a href="#2-11-组建双机热备的MyCat集群-利用keepalived抢占虚拟IP" class="headerlink" title="2.11 组建双机热备的MyCat集群-利用keepalived抢占虚拟IP"></a>2.11 组建双机热备的MyCat集群-利用keepalived抢占虚拟IP</h2><h2 id="2-12-Sysbench基准测试-安装Sysbench"><a href="#2-12-Sysbench基准测试-安装Sysbench" class="headerlink" title="2.12 Sysbench基准测试-安装Sysbench"></a>2.12 Sysbench基准测试-安装Sysbench</h2><h2 id="2-13-Sysbench基准测试-使用Sysbench"><a href="#2-13-Sysbench基准测试-使用Sysbench" class="headerlink" title="2.13 Sysbench基准测试-使用Sysbench"></a>2.13 Sysbench基准测试-使用Sysbench</h2><h2 id="2-14-tpcc-mysql压力测试"><a href="#2-14-tpcc-mysql压力测试" class="headerlink" title="2.14 tpcc-mysql压力测试"></a>2.14 tpcc-mysql压力测试</h2><h1 id="三-PXC集群原理"><a href="#三-PXC集群原理" class="headerlink" title="三.PXC集群原理"></a>三.PXC集群原理</h1><h2 id="3-1-binlog日志"><a href="#3-1-binlog日志" class="headerlink" title="3.1 binlog日志"></a>3.1 binlog日志</h2><h2 id="3-2-PXC同步原理"><a href="#3-2-PXC同步原理" class="headerlink" title="3.2 PXC同步原理"></a>3.2 PXC同步原理</h2><h1 id="四-业务需求与MySQL架构设计"><a href="#四-业务需求与MySQL架构设计" class="headerlink" title="四. 业务需求与MySQL架构设计"></a>四. 业务需求与MySQL架构设计</h1><h2 id="4-1-MySQL的5种特殊架构设计"><a href="#4-1-MySQL的5种特殊架构设计" class="headerlink" title="4.1 MySQL的5种特殊架构设计"></a>4.1 MySQL的5种特殊架构设计</h2><h2 id="4-2-数据库设计原则"><a href="#4-2-数据库设计原则" class="headerlink" title="4.2 数据库设计原则"></a>4.2 数据库设计原则</h2><h1 id="五-数据库常见业务处理"><a href="#五-数据库常见业务处理" class="headerlink" title="五.数据库常见业务处理"></a>五.数据库常见业务处理</h1><h1 id="六-数据备份与恢复"><a href="#六-数据备份与恢复" class="headerlink" title="六.数据备份与恢复"></a>六.数据备份与恢复</h1>]]></content>
      <categories>
        <category>PXC</category>
      </categories>
      <tags>
        <tag>PXC集群</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2020/11/20/MySQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<p>MySQL的深入学习主要分为5个部分，分别是：</p>
<ul>
<li>MySQL的架构介绍</li>
<li>索引优化分析</li>
<li>查询截取分析</li>
<li>MySQL锁机制</li>
<li>主从复制</li>
</ul>
<a id="more"></a>

<h1 id="一-mysql的架构介绍"><a href="#一-mysql的架构介绍" class="headerlink" title="一.mysql的架构介绍"></a>一.mysql的架构介绍</h1><h2 id="1-MysqlLinux版本的安装–mysql5-5"><a href="#1-MysqlLinux版本的安装–mysql5-5" class="headerlink" title="1. MysqlLinux版本的安装–mysql5.5"></a>1. MysqlLinux版本的安装–mysql5.5</h2><h3 id="1-1-下载地址"><a href="#1-1-下载地址" class="headerlink" title="1.1 下载地址"></a>1.1 下载地址</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p>
<h3 id="1-2-检查当前系统是否安装过mysql"><a href="#1-2-检查当前系统是否安装过mysql" class="headerlink" title="1.2 检查当前系统是否安装过mysql"></a>1.2 检查当前系统是否安装过mysql</h3><p>查询命令：<code>rpm -qa|grep -i mysql</code></p>
<p>删除命令：<code>rpm -e RPM软件包名（改名字是上一个命令查出来的名字）</code></p>
<h3 id="1-3-安装mysql服务端-注意提示-与客户端"><a href="#1-3-安装mysql服务端-注意提示-与客户端" class="headerlink" title="1.3 安装mysql服务端(注意提示)与客户端"></a>1.3 安装mysql服务端(注意提示)与客户端</h3><p>安装路径：</p>
<p><img src="/images/2020112201.png" alt="image-20201122172644460"></p>
<p>上传并解压文件：</p>
<p><code>tar -xvf MySQL-5.5.62-1.el7.x86_64.rpm-bundle.tar</code></p>
<p><img src="/images/2020112202.png" alt="image-20201122210059330"></p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-server-5.5.62-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-client-5.5.62-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>注意：这里可能会出现错误：</p>
<blockquote>
<p>conflicts with file from package mariadb-libs-1:5.5.56-2.el7.x86_641</p>
</blockquote>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122210437197.png" alt="image-20201122210437197"></p>
<p>与mariadb冲突，删除mariadb即可！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e mariadb-libs-1:5.5.65-1.el7.x86_64 --nodeps</span><br></pre></td></tr></table></figure>



<h3 id="1-4-查看Mysql安装时创建的mysql用户和mysql组"><a href="#1-4-查看Mysql安装时创建的mysql用户和mysql组" class="headerlink" title="1.4 查看Mysql安装时创建的mysql用户和mysql组"></a>1.4 查看Mysql安装时创建的mysql用户和mysql组</h3><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122204405232.png" alt="image-20201122204405232"></p>
<p>或者也可以执行mysqladmin –version 命令，类似java -version，如果可以查看消息，说明成功</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122210850349.png" alt="image-20201122210850349"></p>
<h3 id="1-5-mysql服务的启动和停止"><a href="#1-5-mysql服务的启动和停止" class="headerlink" title="1.5 mysql服务的启动和停止"></a>1.5 mysql服务的启动和停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></figure>

<p>查看进程：</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122211604756.png" alt="image-20201122211604756"></p>
<p><strong>注意：</strong>可能会报下面的错误</p>
<blockquote>
<p>Starting MySQL. ERROR! The server quit without updating PID file (/var/lib/mysql/localhost.localdomain.pid).</p>
</blockquote>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122211244330.png" alt="image-20201122211244330"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解决步骤：</span><br><span class="line">yum -y install autoconf</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql_install_db --user&#x3D;mysql</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<p>解答参考页面：<a href="https://www.cnblogs.com/weibanggang/p/11230528.html" target="_blank" rel="noopener">https://www.cnblogs.com/weibanggang/p/11230528.html</a></p>
<h3 id="1-6-mysql的ROOT密码设置"><a href="#1-6-mysql的ROOT密码设置" class="headerlink" title="1.6 mysql的ROOT密码设置"></a>1.6 mysql的ROOT密码设置</h3><p>首次会直接连接成功，因为mysql默认没有密码。</p>
<p>修改密码可以按照Service中的提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password 123456</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122212503860.png" alt="image-20201122212503860"></p>
<h3 id="1-7-自启动mysql服务"><a href="#1-7-自启动mysql服务" class="headerlink" title="1.7 自启动mysql服务"></a>1.7 自启动mysql服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></table></figure>

<p><code>chkconfig --list|grep mysql</code></p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122213038046.png" alt="image-20201122213038046"></p>
<h3 id="1-8-修改配置文件位置"><a href="#1-8-修改配置文件位置" class="headerlink" title="1.8 修改配置文件位置"></a>1.8 修改配置文件位置</h3><p>5.5版本：<code>cp /usr/share/mysql/my-huge.cnf /etc/my.cnf</code></p>
<p>5.6版本：<code>cp /usr/share/mysql/my-default.cnf /etc/my.cnf</code></p>
<h3 id="1-9-修改字符集和数据存储路径"><a href="#1-9-修改字符集和数据存储路径" class="headerlink" title="1.9 修改字符集和数据存储路径"></a>1.9 修改字符集和数据存储路径</h3><p>查看字符集：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%char%&#39;;</span><br><span class="line">show variables like &#39;%character%&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122220007001.png" alt="image-20201122220007001"></p>
<p>修改my.cnf文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#password	&#x3D; your_password</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line">socket		&#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line"># Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"># The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">port		&#x3D; 3306</span><br><span class="line"></span><br><span class="line">character-set-client-handshake &#x3D; FALSE</span><br><span class="line">character-set-server &#x3D; utf8mb4</span><br><span class="line">collation-server &#x3D; utf8mb4_general_ci</span><br><span class="line"></span><br><span class="line">socket		&#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size &#x3D; 384M</span><br><span class="line">max_allowed_packet &#x3D; 1M</span><br><span class="line">table_open_cache &#x3D; 512</span><br><span class="line">sort_buffer_size &#x3D; 2M</span><br><span class="line">read_buffer_size &#x3D; 2M</span><br><span class="line">read_rnd_buffer_size &#x3D; 8M</span><br><span class="line">myisam_sort_buffer_size &#x3D; 64M</span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line">query_cache_size &#x3D; 32M</span><br><span class="line"># Try number of CPU&#39;s*2 for thread_concurrency</span><br><span class="line">thread_concurrency &#x3D; 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line"></span><br><span class="line"># required unique id between 1 and 2^32 - 1</span><br><span class="line"># defaults to 1 if master-host is not set</span><br><span class="line"># but will not function as a master if omitted</span><br><span class="line">server-id	&#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet &#x3D; 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size &#x3D; 256M</span><br><span class="line">sort_buffer_size &#x3D; 256M</span><br><span class="line">read_buffer &#x3D; 2M</span><br><span class="line">write_buffer &#x3D; 2M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>

<p>修改完成之后重启mysql服务</p>
<h3 id="1-10-Mysql的安装位置"><a href="#1-10-Mysql的安装位置" class="headerlink" title="1.10 Mysql的安装位置"></a>1.10 Mysql的安装位置</h3><p>在linux下查看安装目录 ps -ef|grep mysql</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122212059724.png" alt="image-20201122212059724"></p>
<h2 id="2-Mysql配置文件"><a href="#2-Mysql配置文件" class="headerlink" title="2.Mysql配置文件"></a>2.Mysql配置文件</h2><h3 id="2-1-二进制日志log-bin"><a href="#2-1-二进制日志log-bin" class="headerlink" title="2.1 二进制日志log-bin"></a>2.1 二进制日志log-bin</h3><p>主要用作主重复制</p>
<h3 id="2-2-错误日志log-error"><a href="#2-2-错误日志log-error" class="headerlink" title="2.2 错误日志log-error"></a>2.2 错误日志log-error</h3><p>默认是关闭的,记录严重的警告和错误信息,每次启动和关闭的详细信息等.</p>
<h3 id="2-3-查询日志log"><a href="#2-3-查询日志log" class="headerlink" title="2.3 查询日志log"></a>2.3 查询日志log</h3><p>默认关闭,记录查询的sql语句，如果开启会减低mysql的整体性能，因为记录日志也是需要消耗系统资源的</p>
<h3 id="2-4-数据文件"><a href="#2-4-数据文件" class="headerlink" title="2.4 数据文件"></a>2.4 数据文件</h3><p>在Windows下，D:\ProgramFiles\MySQL\MySQLServer5.5\data目录下可以挑选很多库；</p>
<p>在Linux下，看看当前系统中的全部库后再进去（默认路径：/var/lib/mysql）。    </p>
<p><strong>数据文件：</strong>    </p>
<p>​    frm文件：存放表结构</p>
<p>​    myd文件：存放表数据</p>
<p>​    myi文件：存放表索引</p>
<h3 id="2-5-如何配置"><a href="#2-5-如何配置" class="headerlink" title="2.5 如何配置"></a>2.5 如何配置</h3><p>windows：my.ini文件</p>
<p>Linux：/etc/my.cnf文件</p>
<h2 id="3-Mysql逻辑架构介绍"><a href="#3-Mysql逻辑架构介绍" class="headerlink" title="3.Mysql逻辑架构介绍"></a>3.Mysql逻辑架构介绍</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201123095017572.png" alt="image-20201123095017572"></p>
<h3 id="3-1-连接层"><a href="#3-1-连接层" class="headerlink" title="3.1 连接层"></a>3.1 连接层</h3><p>最上层是一些客户端和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>
<p><strong>Connectors：</strong>指的是不同语言中与SQL的交互</p>
<p><strong>Connection Pool</strong>: 连接池<br>管理缓冲用户连接，线程处理等需要缓存的需求。负责监听对 MySQL Server 的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上 MySQL Server 的客户端请求都会被分配（或创建）一个连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server 与客户端的通信，接受客户端的命令请求，传递 Server 端的结果信息等。线程管理模块则负责管理维护这些连接线程。包括线程的创建，线程的 cache 等。</p>
<h3 id="3-2-服务层"><a href="#3-2-服务层" class="headerlink" title="3.2 服务层"></a>3.2 服务层</h3><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行，所有跨存储引擎的功能也在这一层实现，如过程，函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化，如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>
<p>*<em>Management Serveices &amp; Utilities： *</em>系统管理和控制工具</p>
<p><strong>SQL Interface: SQL接口</strong><br>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface<br><strong>Parser: 解析器</strong><br>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。<br>在 MySQL中我们习惯将所有 Client 端发送给 Server 端的命令都称为 query ，在 MySQL Server 里面，连接线程接收到客户端的一个 Query 后，会直接将该 query 传递给专门负责将各种 Query 进行分类然后转发给各个对应的处理模块。</p>
<p>​        主要功能：<br>​        a . 将SQL语句进行语义和语法的分析，分解成数据结构，然后按照不同的操作类型进行分类，然后做出针对性的转发到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。<br>​        b.  如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</p>
<p><strong>Optimizer: 查询优化器</strong></p>
<p>SQL语句在查询之前会使用查询优化器对查询进行优化。就是优化客户端请求的 query（sql语句） ，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果<br>他使用的是“<strong>选取-投影-联接</strong>”策略进行查询。<br>       用一个例子就可以理解： select uid,name from user where gender = 1;<br>       这个select 查询先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤<br>       这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤<br>       将这两个查询条件联接起来生成最终查询结果</p>
<p><strong>Cache和Buffer： 查询缓存</strong><br>他的主要功能是将客户端提交 给MySQL 的 Select 类 query 请求的返回结果集 cache 到内存中，与该 query 的一个 hash 值 做一个对应。该 Query 所取数据的基表发生任何数据的变化之后， MySQL 会自动使该 query 的Cache 失效。在读写比例非常高的应用系统中， Query Cache 对性能的提高是非常显著的。当然它对内存的消耗也是非常大的。<br>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</p>
<h3 id="3-3-引擎层"><a href="#3-3-引擎层" class="headerlink" title="3.3 引擎层"></a>3.3 引擎层</h3><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p>
<p><strong>存储引擎接口模块</strong>：可以说是 MySQL 数据库中最有特色的一点了。目前各种数据库产品中，基本上只有 MySQL 可以实现其底层数据存储引擎的插件式管理。这个模块实际上只是 一个抽象类，但正是因为它成功地将各种数据处理高度抽象化，才成就了今天 MySQL 可插拔存储引擎的特色。<br>     从上图可以看出，MySQL区别于其他数据库的最重要的特点就是其插件式的表存储引擎。MySQL插件式的存储引擎架构提供了一系列标准的管理和服务支持，这些标准与存储引擎本身无关，可能是每个数据库系统本身都必需的，如SQL分析器和优化器等，而存储引擎是底层物理结构的实现，每个存储引擎开发者都可以按照自己的意愿来进行开发。<br><strong>注意：</strong>存储引擎是基于表的，而不是数据库。</p>
<h3 id="3-4-存储层"><a href="#3-4-存储层" class="headerlink" title="3.4 存储层"></a>3.4 存储层</h3><p>数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p>
<p><strong>查询说明：</strong></p>
<p><strong><img src="https://img2018.cnblogs.com/blog/1491092/201906/1491092-20190604210526387-1627086664.png" alt="img"></strong></p>
<p>首先，mysql的查询流程大致是：</p>
<ul>
<li><p>mysql客户端通过协议与mysql服务器建连接，发送查询语句，先检查查询缓存，如果命中(一模一样的sql才能命中)，直接返回结果，否则进行语句解析,也就是说，在解析查询之前，服务器会先访问查询缓存(query cache)——它存储SELECT语句以及相应的查询结果集。如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。</p>
</li>
<li><p>语法解析器和预处理：首先mysql通过关键字将SQL语句进行解析，并生成一颗对应的“解析树”。mysql解析器将使用mysql语法规则验证和解析查询；预处理器则根据一些mysql规则进一步检查解析数是否合法。</p>
</li>
<li><p>查询优化器当解析树被认为是合法的了，并且由优化器将其转化成执行计划。一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划。。</p>
</li>
<li><p>然后，mysql默认使用的BTREE索引，并且一个大致方向是:无论怎么折腾sql，至少在目前来说，mysql最多只用到表中的一个索引。</p>
</li>
</ul>
<h2 id="4-Mysql存储引擎"><a href="#4-Mysql存储引擎" class="headerlink" title="4.Mysql存储引擎"></a>4.Mysql存储引擎</h2><p>常用命令：</p>
<p>查看mysql现在提供什么存储引擎</p>
<p><code>show engines;</code></p>
<p>查看mysql当前默认的存储引擎</p>
<p><code>show variables like &#39;%storage_engine%&#39;</code></p>
<p>MyISAM和InnoDB对比：</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201123100931321.png" alt="image-20201123100931321"></p>
<h1 id="二-索引优化分析"><a href="#二-索引优化分析" class="headerlink" title="二.索引优化分析"></a>二.索引优化分析</h1><h2 id="1-性能下降SQL慢-，执行时间长-，等待时间长的原因分析"><a href="#1-性能下降SQL慢-，执行时间长-，等待时间长的原因分析" class="headerlink" title="1.性能下降SQL慢 ，执行时间长 ，等待时间长的原因分析"></a>1.性能下降SQL慢 ，执行时间长 ，等待时间长的原因分析</h2><p>主要有以下原因：</p>
<ul>
<li><p>查询语句写的烂</p>
</li>
<li><p>索引失效</p>
<p>​    单值索引/复合索引失效</p>
</li>
<li><p>关联查询太多join(设计缺陷或不得已的需求)</p>
</li>
<li><p>服务器调优及各个参数设置(缓冲\线程数等)</p>
</li>
</ul>
<h2 id="2-常见通用的join查询"><a href="#2-常见通用的join查询" class="headerlink" title="2.常见通用的join查询"></a>2.常见通用的join查询</h2><h3 id="2-1-SQL执行顺序"><a href="#2-1-SQL执行顺序" class="headerlink" title="2.1 SQL执行顺序"></a>2.1 SQL执行顺序</h3><p><strong>手写：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;query_list&gt; <span class="keyword">FROM</span> &lt;left_table&gt;</span><br><span class="line">&lt;<span class="keyword">join</span> <span class="keyword">type</span>&gt; <span class="keyword">JOIN</span> &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;wherer_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_list&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;<span class="keyword">limit</span> <span class="built_in">number</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>机读：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM &lt;left_table&gt; </span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN &lt;right_table&gt;</span><br><span class="line">WHERE &lt;where_condition&gt;</span><br><span class="line">GROUP BY &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> &lt;query_list&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p><img src="https://images2015.cnblogs.com/blog/1054685/201706/1054685-20170626154318664-711238691.jpg" alt="img"></p>
<p>Join图</p>
<p><img src="https://images2015.cnblogs.com/blog/1054685/201706/1054685-20170626113414446-2016950911.jpg" alt="img"></p>
<h3 id="2-2-MySQL数据库实例"><a href="#2-2-MySQL数据库实例" class="headerlink" title="2.2 MySQL数据库实例"></a>2.2 MySQL数据库实例</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db_test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h4 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2.使用数据库"></a>2.使用数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db_test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<h4 id="3-查看数据库"><a href="#3-查看数据库" class="headerlink" title="3.查看数据库"></a>3.查看数据库</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;show tables; //返回当前数据库下的所有表的名称</span><br><span class="line">或者也可以直接用以下命令</span><br><span class="line">mysql&gt;show tables from databaseName;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建表、添加数据"><a href="#4-创建表、添加数据" class="headerlink" title="4.创建表、添加数据"></a>4.创建表、添加数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_dept`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'部门主键'</span>,</span><br><span class="line">  <span class="string">`deptName`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门名称'</span>,</span><br><span class="line">  <span class="string">`locAdd`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'楼层'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'员工主键'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工姓名'</span>,</span><br><span class="line">  <span class="string">`deptId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门外键'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_dept_id`</span> (<span class="string">`deptId`</span>)</span><br><span class="line">  <span class="comment">#CONSTRAINT `fk_dept_id` FOREIGN KEY (`deptId`) REFERENCES `tb_dept` (`id`) COMMENT '部门外键设置, 已经注释掉。'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'RD'</span>, <span class="string">'11'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'HR'</span>, <span class="string">'12'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'MK'</span>, <span class="string">'13'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'MIS'</span>, <span class="string">'14'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_dept`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'FD'</span>, <span class="string">'15'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'王二'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'麻子'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'小马'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'马旭'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'小丁'</span>, <span class="string">'4'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tb_emp`</span> <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'小西'</span>, <span class="string">'5'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>tb_emp表数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp;</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">| id | name   | deptId |</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |</span><br><span class="line">|  2 | 李四   |      1 |</span><br><span class="line">|  3 | 王二   |      1 |</span><br><span class="line">|  4 | 麻子   |      2 |</span><br><span class="line">|  5 | 小马   |      2 |</span><br><span class="line">|  6 | 马旭   |      3 |</span><br><span class="line">|  7 | 小丁   |      4 |</span><br><span class="line">|  8 | 小西   |     51 |</span><br><span class="line">+<span class="comment">----+--------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>tb_dept表数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_dept;</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">| id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">|  1 | RD       | 11     |</span><br><span class="line">|  2 | HR       | 12     |</span><br><span class="line">|  3 | MK       | 13     |</span><br><span class="line">|  4 | MIS      | 14     |</span><br><span class="line">|  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">----+----------+--------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>笛卡儿积：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp, tb_dept;</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  1 | 张三   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  1 | 张三   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  1 | 张三   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  1 | 张三   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  2 | 李四   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  2 | 李四   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  2 | 李四   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |  2 | HR       | 12     |</span><br><span class="line">|  3 | 王二   |      1 |  3 | MK       | 13     |</span><br><span class="line">|  3 | 王二   |      1 |  4 | MIS      | 14     |</span><br><span class="line">|  3 | 王二   |      1 |  5 | FD       | 15     |</span><br><span class="line">|  4 | 麻子   |      2 |  1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  4 | 麻子   |      2 |  3 | MK       | 13     |</span><br><span class="line">|  4 | 麻子   |      2 |  4 | MIS      | 14     |</span><br><span class="line">|  4 | 麻子   |      2 |  5 | FD       | 15     |</span><br><span class="line">|  5 | 小马   |      2 |  1 | RD       | 11     |</span><br><span class="line">|  5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |  3 | MK       | 13     |</span><br><span class="line">|  5 | 小马   |      2 |  4 | MIS      | 14     |</span><br><span class="line">|  5 | 小马   |      2 |  5 | FD       | 15     |</span><br><span class="line">|  6 | 马旭   |      3 |  1 | RD       | 11     |</span><br><span class="line">|  6 | 马旭   |      3 |  2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|  6 | 马旭   |      3 |  4 | MIS      | 14     |</span><br><span class="line">|  6 | 马旭   |      3 |  5 | FD       | 15     |</span><br><span class="line">|  7 | 小丁   |      4 |  1 | RD       | 11     |</span><br><span class="line">|  7 | 小丁   |      4 |  2 | HR       | 12     |</span><br><span class="line">|  7 | 小丁   |      4 |  3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">|  7 | 小丁   |      4 |  5 | FD       | 15     |</span><br><span class="line">|  8 | 小西   |     51 |  1 | RD       | 11     |</span><br><span class="line">|  8 | 小西   |     51 |  2 | HR       | 12     |</span><br><span class="line">|  8 | 小西   |     51 |  3 | MK       | 13     |</span><br><span class="line">|  8 | 小西   |     51 |  4 | MIS      | 14     |</span><br><span class="line">|  8 | 小西   |     51 |  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">40 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表和tb_dept中公共的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; inner join tb_dept d on e.deptId = d.id;</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">+<span class="comment">----+--------+--------+----+----------+--------+</span></span><br><span class="line">7 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表中全部的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_emp 表中独有的数据, tb_dept 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">|  1 | 张三   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  2 | 李四   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  3 | 王二   |      1 |    1 | RD       | 11     |</span><br><span class="line">|  4 | 麻子   |      2 |    2 | HR       | 12     |</span><br><span class="line">|  5 | 小马   |      2 |    2 | HR       | 12     |</span><br><span class="line">|  6 | 马旭   |      3 |    3 | MK       | 13     |</span><br><span class="line">|  7 | 小丁   |      4 |    4 | MIS      | 14     |</span><br><span class="line">|  8 | 小西   |     51 | NULL | NULL     | NULL   |　　　　</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_dept表中全部的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_dept 表中独有的数据, tb_emp 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">|    1 | 张三   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    2 | 李四   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    3 | 王二   |      1 |  1 | RD       | 11     |</span><br><span class="line">|    4 | 麻子   |      2 |  2 | HR       | 12     |</span><br><span class="line">|    5 | 小马   |      2 |  2 | HR       | 12     |</span><br><span class="line">|    6 | 马旭   |      3 |  3 | MK       | 13     |</span><br><span class="line">|    7 | 小丁   |      4 |  4 | MIS      | 14     |</span><br><span class="line">| NULL | NULL   |   NULL |  5 | FD       | 15     |     </span><br><span class="line">+<span class="comment">------+--------+--------+----+----------+--------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where d.id is null;</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">| id | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">|  8 | 小西   |     51 | NULL | NULL     | NULL   |</span><br><span class="line">+<span class="comment">----+--------+--------+------+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_dept表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where e.deptId is null;</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">| id   | name | deptId | id | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">| NULL | NULL |   NULL |  5 | FD       | 15     |</span><br><span class="line">+<span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp和tb_dept表中所有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; full outer join tb_dept d on e.deptId = d.id;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'full outer join tb_dept d on e.deptId = d.id'</span> <span class="keyword">at</span> line <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>出错原因：mysql 中不支持这种连接方式。</p>
<p><strong>解决办法：</strong>左连接数据和右连接数据相加，将公共的部分去重。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e </span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; union　　　　　#去重</span><br><span class="line">    -&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#该条数据为 tb_emp 表中独有的数据, tb_dept 表中的字段用 null 占位</span></span><br><span class="line"><span class="comment">#该条数据为 tb_dept 表中独有的数据, tb_emp 表中的字段用 null 占位</span></span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">|    1 | 张三   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    2 | 李四   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    3 | 王二   |      1 |    1 | RD       | 11     |</span><br><span class="line">|    4 | 麻子   |      2 |    2 | HR       | 12     |</span><br><span class="line">|    5 | 小马   |      2 |    2 | HR       | 12     |</span><br><span class="line">|    6 | 马旭   |      3 |    3 | MK       | 13     |</span><br><span class="line">|    7 | 小丁   |      4 |    4 | MIS      | 14     |</span><br><span class="line">|    8 | 小西   |     51 | NULL | NULL     | NULL   |　　　　</span><br><span class="line">| NULL | NULL   |   NULL |    5 | FD       | 15     |　　　 </span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<p><strong>查询tb_emp和tb_dept表中独有的数据：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from tb_emp e</span><br><span class="line">    -&gt; left join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where d.id is null</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select * from tb_emp e</span><br><span class="line">    -&gt; right join tb_dept d on e.deptId = d.id</span><br><span class="line">    -&gt; where e.deptId is null;</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">| id   | name   | deptId | id   | deptName | locAdd |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">|    8 | 小西   |     51 | NULL | NULL     | NULL   |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | FD       | 15     |</span><br><span class="line">+<span class="comment">------+--------+--------+------+----------+--------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h2 id="3-索引简介"><a href="#3-索引简介" class="headerlink" title="3.索引简介"></a>3.索引简介</h2><h3 id="3-1-索引概述"><a href="#3-1-索引概述" class="headerlink" title="3.1 索引概述"></a>3.1 索引概述</h3><blockquote>
<p>索引（在 MySQL 中也叫“键key”）是存储引擎快速找到记录的一种数据结构</p>
<p>​                                                                                                                                                            ——《高性能MySQL》</p>
</blockquote>
<ul>
<li>索引(Index) 是帮助MySQL高效获取数据的数据结构。<strong>索引的本质就是数据结构</strong>。 索引的目的在于提高查询效率，可以类比字典，可以简单的理解为“排好序的快速查找数据结构”。</li>
<li>在数据本身之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构就是索引。</li>
<li>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</li>
<li>我们平时所说的索引，如果没有特别指明，都是指B树结构组织的索引。</li>
</ul>
<p><strong>二叉树算法图：</strong></p>
<p><strong><a href="https://images2015.cnblogs.com/blog/1054685/201706/1054685-20170627085051383-985324526.png" target="_blank" rel="noopener"><img src="https://images2015.cnblogs.com/blog/1054685/201706/1054685-20170627085051383-985324526.png" alt="img"></a></strong></p>
<p>​    为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定复杂度内获取到相应数据，从而快速的检索出符合条件的记录。</p>
<h3 id="3-2-索引的优势"><a href="#3-2-索引的优势" class="headerlink" title="3.2 索引的优势"></a>3.2 索引的优势</h3><ol>
<li>创建索引可以提高数据检索的效率，降低数据库的IO成本。</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li>
</ol>
<h3 id="3-3-索引的劣势"><a href="#3-3-索引的劣势" class="headerlink" title="3.3 索引的劣势"></a>3.3 索引的劣势</h3><ol>
<li>索引其实也是一张表，该表保存了主键与索引字段，并指向实体的记录，所以索引列也是要占用空间的。</li>
<li>索引虽然提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要调整因为更新所带来的键值变化后的索引信息。</li>
<li>索引只是提高效率的一个因素，如果MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。</li>
</ol>
<h3 id="3-4-MySQL索引分类"><a href="#3-4-MySQL索引分类" class="headerlink" title="3.4 MySQL索引分类"></a>3.4 MySQL索引分类</h3><ol>
<li>单值索引：一个索引只包含一个单列，一个表可以有多个单列索引。</li>
<li>唯一索引：索引列的值必须唯一，但允许有空值。</li>
<li>复合索引：一个索引包含多个列。</li>
</ol>
<h4 id="1-主键索引-PRIMARY-KEY"><a href="#1-主键索引-PRIMARY-KEY" class="headerlink" title="1.主键索引 PRIMARY KEY"></a>1.主键索引 PRIMARY KEY</h4><p>它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</p>
<p><strong>注意：</strong>一个表只能有一个主键</p>
<p><img src="http://songwenjie.vip/blog/180802/1c7D2F0f76.png?imageslim" alt="mark"></p>
<h4 id="2-唯一索引-UNIQUE"><a href="#2-唯一索引-UNIQUE" class="headerlink" title="2.唯一索引 UNIQUE"></a>2.唯一索引 UNIQUE</h4><p>唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p>
<p>可以通过<code>ALTER TABLE table_name ADD UNIQUE (column);</code>创建唯一索引</p>
<p><img src="http://songwenjie.vip/blog/180802/DBdFeKE8Fk.png?imageslim" alt="mark"></p>
<p><img src="http://songwenjie.vip/blog/180802/L2jl91b6J6.png?imageslim" alt="mark"></p>
<p>可以通过<code>ALTER TABLE table_name ADD UNIQUE (column1,column2);</code>创建唯一组合索引</p>
<p><img src="http://songwenjie.vip/blog/180802/mihd7Hm5i6.png?imageslim" alt="mark"></p>
<p><img src="http://songwenjie.vip/blog/180802/bJbdFA9AcL.png?imageslim" alt="mark"></p>
<h4 id="3-普通索引-INDEX"><a href="#3-普通索引-INDEX" class="headerlink" title="3.普通索引 INDEX"></a>3.普通索引 INDEX</h4><p>最基本的索引，它没有任何限制。</p>
<p>可以通过<code>ALTER TABLE table_name ADD INDEX index_name (column);</code>创建普通索引</p>
<p><img src="http://songwenjie.vip/blog/180802/17CmJIIJhD.png?imageslim" alt="mark"></p>
<p><img src="http://songwenjie.vip/blog/180802/4fA7L6kBBm.png?imageslim" alt="mark"></p>
<h4 id="4-组合索引-INDEX"><a href="#4-组合索引-INDEX" class="headerlink" title="4.组合索引 INDEX"></a>4.组合索引 INDEX</h4><p>组合索引，即一个索引包含多个列。多用于避免回表查询。</p>
<p>可以通过<code>ALTER TABLE table_name ADD INDEX index_name(column1, column2, column3);</code>创建组合索引</p>
<p><img src="http://songwenjie.vip/blog/180802/CLGIKiAC6J.png?imageslim" alt="mark"></p>
<p><img src="http://songwenjie.vip/blog/180802/295B9bGi67.png?imageslim" alt="mark"></p>
<h4 id="5-全文索引-FULLTEXT"><a href="#5-全文索引-FULLTEXT" class="headerlink" title="5.全文索引 FULLTEXT"></a>5.全文索引 FULLTEXT</h4><p>全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。</p>
<p>可以通过<code>ALTER TABLE table_name ADD FULLTEXT (column);</code>创建全文索引</p>
<p><img src="http://songwenjie.vip/blog/180802/AjfLLkhdH1.png?imageslim" alt="mark"></p>
<p><img src="http://songwenjie.vip/blog/180802/bA1a1m49cL.png?imageslim" alt="mark"></p>
<p>索引一经创建不能修改，如果要修改索引，只能删除重建。可以使用<code>DROP INDEX index_name ON table_name;</code>删除索引。</p>
<h3 id="3-5-索引的基本语法"><a href="#3-5-索引的基本语法" class="headerlink" title="3.5 索引的基本语法"></a>3.5 索引的基本语法</h3><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX indexName ON tableName(colName(length));。——如果是CHAR、VARCHAR类型，length可以小于字段实际长度，若是BLOB和TEXT类型，必须指定length。</span><br><span class="line"></span><br><span class="line">ALTER tableName ADD [UNIQUE] INDEX indexName ON (colName(length));。</span><br></pre></td></tr></table></figure>

<h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX [indexName] ON tableName;</span><br></pre></td></tr></table></figure>

<h4 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM tableName;</span><br></pre></td></tr></table></figure>



<h4 id="使用ALTER命令四种方式添加数据表的索引："><a href="#使用ALTER命令四种方式添加数据表的索引：" class="headerlink" title="使用ALTER命令四种方式添加数据表的索引："></a>使用ALTER命令四种方式添加数据表的索引：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tableName ADD PRIMARY KEY(column_list); 该语句添加一个主键，这意味着索引值必须唯一，且不能为null。</span><br><span class="line">ALTER TABLE tableName ADD UNIQUE indexName(column_list);该语句创建索引的值必须唯一(null除外，null可能会出现多次)。</span><br><span class="line">ALTER TABLE tableName ADD INDEX indexName(column_list);该语句添加普通索引，索引值可出现多次。</span><br><span class="line">AKTER TABLE tableName ADD FULLTEXT indexName(column_list);该语句指定索引为FULLTEXT，用于全文索引。</span><br></pre></td></tr></table></figure>



<h3 id="3-6-MySQL索引结构："><a href="#3-6-MySQL索引结构：" class="headerlink" title="3.6 MySQL索引结构："></a>3.6 MySQL索引结构：</h3><ol>
<li><p><strong>BTree索引</strong></p>
<p><a href="https://blog.csdn.net/tongdanping/article/details/79878302#3、BTree索引和B%2BTree索引" target="_blank" rel="noopener">BTree详解</a></p>
</li>
<li><p>Hash索引</p>
</li>
<li><p>full-text全文索引</p>
</li>
<li><p>R-Tree索引 </p>
</li>
</ol>
<h3 id="3-7-哪些情况需要创建索引："><a href="#3-7-哪些情况需要创建索引：" class="headerlink" title="3.7 哪些情况需要创建索引："></a>3.7 哪些情况需要创建索引：</h3><ol>
<li>主键自动建立唯一索引。</li>
<li>频繁作为查询的条件的字段应该创建索引查询中与其他表关联的字段，外键关系建立索引。</li>
<li>查询中与其他表关联的字段，外键关系建立索引</li>
<li>查询中的排序字段适合创建索引，排序字段若通过索引去访问将大大提高排序速率。</li>
<li>查询中统计或者分组字段适合创建索引。</li>
<li>频繁更新的字段不适合创建索引，因为每次更新不单单是更新了记录还会更新索引，加重IO负担</li>
<li>Where条件里用不到的字段不创建索引</li>
<li>单值/组合索引的选择问题，who？（在高并发下倾向创建组合索引）</li>
</ol>
<h3 id="3-8-哪些情况不要创建索引："><a href="#3-8-哪些情况不要创建索引：" class="headerlink" title="3.8 哪些情况不要创建索引："></a>3.8 哪些情况不要创建索引：</h3><ol>
<li><p>表记录太少。</p>
</li>
<li><p>经常增删改的表。</p>
</li>
<li><p>数据重复且分布平均的表字段，因此应该只为经常查询和经常排序的数据列建立索引。<br>注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201129201618523.png" alt="image-20201129201618523"></p>
</li>
</ol>
<h2 id="4-性能分析"><a href="#4-性能分析" class="headerlink" title="4.性能分析"></a>4.性能分析</h2><h3 id="4-1-MySQL查询优化器-MySQL-Query-Optimizer"><a href="#4-1-MySQL查询优化器-MySQL-Query-Optimizer" class="headerlink" title="4.1 MySQL查询优化器(MySQL Query Optimizer)"></a>4.1 MySQL查询优化器(MySQL Query Optimizer)</h3><p>1.Mysql中有专门负责优化SELECT语句的优化器模块，主要工作：通过技术分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间）</p>
<p>2.当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQL Query Optimizer时，MySQL Query Optimizer首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件，结构调整等。然后分析Query中的Hint信息（如果有），看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</p>
<h3 id="4-2-MySQL常见瓶颈"><a href="#4-2-MySQL常见瓶颈" class="headerlink" title="4.2 MySQL常见瓶颈"></a>4.2 MySQL常见瓶颈</h3><ul>
<li>CPU:CPU在饱和的时候一般发生在数据装入在内存或从磁盘上读取数据时候</li>
<li>IO:磁盘I/O瓶颈发生在装入数据远大于内存容量时</li>
<li>服务器硬件的性能瓶颈：top,free,iostat和vmstat来查看系统的性能状态</li>
</ul>
<h3 id="4-3-Explain"><a href="#4-3-Explain" class="headerlink" title="4.3 Explain"></a>4.3 Explain</h3><blockquote>
<p><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008131735</a></p>
</blockquote>
<h4 id="是什么（查看执行计划）"><a href="#是什么（查看执行计划）" class="headerlink" title="是什么（查看执行计划）"></a>是什么（查看执行计划）</h4><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈。</p>
<h4 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h4><p>表的读取顺序</p>
<p>数据读取操作的操作类型</p>
<p>哪些索引可以使用</p>
<p>哪些索引被实际使用</p>
<p>表之间的引用</p>
<p>每张表有多少行被优化器查询</p>
<h4 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h4><p>Explain+SQL语句</p>
<p>执行计划包含的信息</p>
<p><img src="https://images2018.cnblogs.com/blog/512541/201808/512541-20180803142201303-545775900.png" alt="img"></p>
<p>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</p>
<h5 id="概要描述："><a href="#概要描述：" class="headerlink" title="概要描述："></a>概要描述：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id:选择标识符</span><br><span class="line">select_type:表示查询的类型。</span><br><span class="line">table:输出结果集的表</span><br><span class="line">partitions:匹配的分区</span><br><span class="line">type:表示表的连接类型</span><br><span class="line">possible_keys:表示查询时，可能使用的索引</span><br><span class="line">key:表示实际使用的索引</span><br><span class="line">key_len:索引字段的长度</span><br><span class="line">ref:列与索引的比较</span><br><span class="line">rows:扫描出的行数(估算的行数)</span><br><span class="line">filtered:按表条件过滤的行百分比</span><br><span class="line">Extra:执行情况的描述和说明</span><br></pre></td></tr></table></figure>

<p><strong>下面对这些字段出现的可能进行解释：</strong></p>
<h5 id="1-id"><a href="#1-id" class="headerlink" title="1.id"></a>1.id</h5><p>SELECT识别符。这是SELECT的查询序列号</p>
<p><strong>我的理解是SQL执行的顺序的标识，SQL从大到小的执行</strong></p>
<p>​        1.id相同时，执行顺序由上至下</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202131914359.png" alt="image-20201202131914359"></p>
<p>​        2.如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202131931919.png" alt="image-20201202131931919"></p>
<p>​        3.id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202131954051.png" alt="image-20201202131954051"></p>
<h5 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2.select_type"></a>2.select_type</h5><p>   <strong><em>\</em>示查询中每个select子句的类型**</strong></p>
<p>(1) SIMPLE(简单SELECT，不使用UNION或子查询等)</p>
<p>(2) PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p>
<p>(3) UNION(UNION中的第二个或后面的SELECT语句)</p>
<p>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>
<p>(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p>
<p>(6) SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p>
<p>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p>
<p>(8) DERIVED(派生表的SELECT, FROM子句的子查询)</p>
<p>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>
<h5 id="3-table"><a href="#3-table" class="headerlink" title="3.table"></a>3.table</h5><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p>
<h5 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h5><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称<strong>访问类型</strong>。</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202132947918.png" alt="image-20201202132947918"></p>
<p>性能从最好到最差依次是：<strong>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</strong></p>
<p>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，这个也可以忽略不计</p>
<p>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键至于where列表中，MySQL就能将该查询转换为一个常量</p>
<p>eq_ref：唯一性索引，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</p>
<p>ref：非唯一索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p>
<p>NULL：MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>
<p>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询，这种范围扫描索引扫描比全表扫描要好，因为他只需要开始索引的某一点，而结束语另一点，不用扫描全部索引。</p>
<p>index：Full Index Scan,index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）</p>
<p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>
<p><strong>备注：</strong>一般来说，得保证查询只是达到range级别，最好达到ref</p>
<h5 id="5-possible-keys"><a href="#5-possible-keys" class="headerlink" title="5.possible_keys"></a>5.possible_keys</h5><p><strong>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</strong></p>
<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>
<h5 id="6-Key"><a href="#6-Key" class="headerlink" title="6.Key"></a>6.Key</h5><p><strong>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</strong></p>
<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>
<h5 id="7-key-len"><a href="#7-key-len" class="headerlink" title="7.key_len"></a>7.key_len</h5><p><strong>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</strong></p>
<p>不损失精确性的情况下，长度越短越好 </p>
<h5 id="8-ref"><a href="#8-ref" class="headerlink" title="8.ref"></a>8.ref</h5><p><strong>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</strong></p>
<h5 id="9-rows"><a href="#9-rows" class="headerlink" title="9.rows"></a>9.rows</h5><p> <strong>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</strong></p>
<h5 id="10-Extra"><a href="#10-Extra" class="headerlink" title="10.Extra"></a>10.Extra</h5><p><strong>该列包含MySQL解决查询的详细信息。</strong></p>
<p><strong>有以下几种情况：</strong></p>
<p>1.Using filesort：说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成排序操作成为“文件排序”</p>
<p>2.Using temporary：使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by 和分组查询 group by</p>
<p>3.Using index：表示相应的select操作中使用了覆盖索引（Coveing Index）,避免访问了表的数据行，效率不错！<br>                        如果同时出现using where，表明索引被用来执行索引键值的查找；<br>                        如果没有同时出现using where，表面索引用来读取数据而非执行查找动作。</p>
<p>​                        <strong>覆盖索引（Covering Index）</strong></p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202134700929.png" alt="image-20201202134700929"></p>
<p>4.Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>
<p>5.Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>
<p>6.Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p>
<p>7.Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>
<p>8.distinct：优化distinct，在找到第一匹配的元组后即停止找同样值的工作</p>
<p>9.No tables used：Query语句中使用from dual 或不含任何from子句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- explain select now() from dual;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong><br>• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况<br>• EXPLAIN不考虑各种Cache<br>• EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br>• 部分统计信息是估算的，并非精确值<br>• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。**</p>
<p>通过收集统计信息不可能存在结果</p>
<p>热身case：</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202134800435.png" alt="image-20201202134800435"></p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202134808051.png" alt="image-20201202134808051"></p>
<h2 id="5-索引优化"><a href="#5-索引优化" class="headerlink" title="5.索引优化"></a>5.索引优化</h2><h3 id="索引分析"><a href="#索引分析" class="headerlink" title="索引分析"></a>索引分析</h3><h3 id="索引失效（应该避免）"><a href="#索引失效（应该避免）" class="headerlink" title="索引失效（应该避免）"></a>索引失效（应该避免）</h3><h3 id="一般性建议"><a href="#一般性建议" class="headerlink" title="一般性建议"></a>一般性建议</h3><h1 id="三-查询截取分析"><a href="#三-查询截取分析" class="headerlink" title="三.查询截取分析"></a>三.查询截取分析</h1><blockquote>
<p>联表查询时始终以小结果集驱动大结果集：<a href="https://www.cnblogs.com/shamo89/p/8733025.html" target="_blank" rel="noopener">https://www.cnblogs.com/shamo89/p/8733025.html</a></p>
<p>MySQL性能调优——Query 的优化：<a href="https://www.cnblogs.com/shamo89/p/8733139.html" target="_blank" rel="noopener">https://www.cnblogs.com/shamo89/p/8733139.html</a></p>
<p>MySQL索引原理及慢查询优化：<a href="https://tech.meituan.com/2014/06/30/mysql-index.html" target="_blank" rel="noopener">https://tech.meituan.com/2014/06/30/mysql-index.html</a></p>
</blockquote>
<h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><h2 id="批量数据脚本"><a href="#批量数据脚本" class="headerlink" title="批量数据脚本"></a>批量数据脚本</h2><h2 id="Show-profiles"><a href="#Show-profiles" class="headerlink" title="Show profiles"></a>Show profiles</h2><h2 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h2><h1 id="四-MySQL锁机制"><a href="#四-MySQL锁机制" class="headerlink" title="四.MySQL锁机制"></a>四.MySQL锁机制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="三锁"><a href="#三锁" class="headerlink" title="三锁"></a>三锁</h2><h1 id="五-主从复制"><a href="#五-主从复制" class="headerlink" title="五.主从复制"></a>五.主从复制</h1><blockquote>
<p><a href="https://www.jianshu.com/p/faf0127f1cb2" target="_blank" rel="noopener">https://www.jianshu.com/p/faf0127f1cb2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL高级</tag>
      </tags>
  </entry>
  <entry>
    <title>@NotBlank,@NotEmpty,@NotNull三种注解</title>
    <url>/2020/12/18/NotBlank-NotEmpty-NotNull%E4%B8%89%E7%A7%8D%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@NotBlank 用于 String 判断空格</span><br><span class="line">@NotEmpty 用于集合</span><br><span class="line">@NotNull 用在基本类型上</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>PXC方案的一些改进</title>
    <url>/2020/11/09/PXC%E6%96%B9%E6%A1%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>之前MySQL集群搭建使用的是PXC方案，最后想想还是有很多地方需要改进：</p>
<p>主要分为两点：1.负载均衡的高可用方案  2.引入热备份数据</p>
<a id="more"></a>

<h3 id="1-负载均衡的高可用方案"><a href="#1-负载均衡的高可用方案" class="headerlink" title="1.负载均衡的高可用方案"></a>1.负载均衡的高可用方案</h3><p>虽然之前的MySQL集群也有负载均衡，但是haproxy是单节点的，不具备高可用。。。</p>
<h4 id="1-1-安装Keepalived"><a href="#1-1-安装Keepalived" class="headerlink" title="1.1 安装Keepalived"></a>1.1 安装Keepalived</h4><p>进入容器<br><code>docker exec -it h1 bash</code><br>在容器中安装<br><code>apt-get update</code><br><code>apt-get install keepalived</code></p>
<h4 id="1-2-Keepalived配置文件"><a href="#1-2-Keepalived配置文件" class="headerlink" title="1.2 Keepalived配置文件"></a>1.2 Keepalived配置文件</h4><p>在容器中<br><code>vim /etc/keepalived/keepalived.conf</code><br>如果容器没有安装vim，请输入命令：<code>apt-get install vim</code><br>然后在文件里贴上配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.10.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>state 是keepalived的身份（MASTER主服务，BACKUP备服务器）。主服务要抢占虚拟IP，备用服务器不会抢占IP</li>
<li>interface 网卡设备</li>
<li>virtual_router_id 虚拟路由标识，MASTER和BACKUP的虚拟路由标识必须一致。标识可以是 0 ～ 255</li>
<li>priority 权重</li>
<li>advert_int 心跳检测秒，MASTER与BACKUP节点间同步检查的时间间。主备之间必须一致。</li>
<li>authentication 主从服务器验证方式。主备必须使用相同的密码才能正常通信</li>
<li>virtual_ipaddress 虚拟IP地址，可以设置多个虚拟IP地址，每行一个</li>
</ul>
<h4 id="1-3-启动keepalived"><a href="#1-3-启动keepalived" class="headerlink" title="1.3 启动keepalived"></a>1.3 启动keepalived</h4><p>在容器里输入命令：<code>service keepalived start</code><br>因为不能直接停止容器，所以为了正常退出不关闭容器，使用Ctrl+P+Q进行退出容器<br>检验：在宿主机中，我们使用：ping 172.10.0.201，检测是否真正启动</p>
<p><img src="/images/2020110901.png" alt="image-20201109224438458"></p>
<p><img src="/images/2020110902.png" alt="image-20201109225321905"></p>
<h3 id="2-MySQL集群-热备份数据"><a href="#2-MySQL集群-热备份数据" class="headerlink" title="2.MySQL集群 热备份数据"></a>2.MySQL集群 热备份数据</h3><h4 id="2-1-冷备份："><a href="#2-1-冷备份：" class="headerlink" title="2.1 冷备份："></a>2.1 冷备份：</h4><p>冷备份是一种常见的备份方式，通常做法是先关闭数据库，然后在拷贝数据文件。</p>
<p>这种方式简单安全，mysqldump就是典型的冷备份技术。</p>
<p>冷备份的弊端也很大，比如大型网站无法做到关闭业务备份数据，所以冷备份不是最佳选择<br>当然在之前提到的PXC集群中，我们可以中断某个节点，单独备份数据，再上线。</p>
<h4 id="2-2-热备份："><a href="#2-2-热备份：" class="headerlink" title="2.2 热备份："></a>2.2 热备份：</h4><p>热备份是在系统运行的状态下备份数据，也是难度最大的备份，Mysql常见的热备份有LVM和XtraBackup两种方案。<br>这里我使用的是XtraBackup方案实现热备份，XtraBackup是一款基于InnoDB的在线热备工具，具有开源免费，支持在线热备，占用磁盘空间小，能够非常快速地备份与恢复Mysql数据库等特点</p>
<p><strong>优势：</strong></p>
<ul>
<li><p>备份过程中不锁表、快速可靠</p>
</li>
<li><p>备份过程中不会打断正在执行的事务</p>
</li>
<li><p>能够基于压缩等功能节约磁盘空间和流量</p>
</li>
</ul>
<p><strong>每天进行一次增量备份，每周进行一次全量备份</strong></p>
<p><strong>全量备份：</strong>备份全部数据。备份过程时间长，占用空间大</p>
<p><strong>增量备份：</strong>只备份变化的数据。备份时间短，占用空间小</p>
<h4 id="2-3-全量数据热备份"><a href="#2-3-全量数据热备份" class="headerlink" title="2.3 全量数据热备份"></a>2.3 全量数据热备份</h4><p>1.创建数据卷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create backup</span><br></pre></td></tr></table></figure>

<p>2.选择数据节点映射数据卷</p>
<p>​    先停止节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop node1</span><br></pre></td></tr></table></figure>

<p>​    删除node1重新创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm node1</span><br></pre></td></tr></table></figure>

<p>​    创建node1</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=<span class="number">123456</span> -v v1:/<span class="keyword">var</span>/lib/mysql -v backup:/<span class="keyword">data</span> --privileged -e CLUSTER_JOIN=node2 --name=node1 --net=net1 --ip <span class="number">172.10</span><span class="number">.0</span><span class="number">.2</span> pxc</span><br></pre></td></tr></table></figure>



<p><strong>PXC容器中安装XtraBackup，并执行备份</strong></p>
<p>进入节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it node1 bash</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> update</span><br><span class="line">apt-<span class="keyword">get</span> install percona-xtrabackup<span class="number">-24</span></span><br></pre></td></tr></table></figure>

<p>全量备份</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> /<span class="keyword">data</span>/backup/full</span><br></pre></td></tr></table></figure>

<p>容器内备份数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;backup&#x2F;full</span><br><span class="line">退出容器</span><br><span class="line">exit</span><br><span class="line">查看数据卷目录</span><br><span class="line">docker inspect backup</span><br><span class="line">进入备份目录</span><br></pre></td></tr></table></figure>

<h4 id="2-4-全量数据冷还原"><a href="#2-4-全量数据冷还原" class="headerlink" title="2.4 全量数据冷还原"></a>2.4 全量数据冷还原</h4><p>数据库可以热备份，但是不能热还原。为了避免恢复过程中的数据同步。我们采用空白的MySQL还原数据，然后再建立PXC集群；还原数据前要将未提交的事务回滚，还原数据之后重启MySQL。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">rm -rf /<span class="keyword">var</span>/lib/mysql<span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<p>事务回滚</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> --apply-back /<span class="keyword">data</span>/backup/full/</span><br></pre></td></tr></table></figure>

<p>全量数据冷还原</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">innobackupex --user=root --password=<span class="number">123456</span> --<span class="built_in">copy</span>-back /data/backup/full/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PXC</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL集群</tag>
      </tags>
  </entry>
  <entry>
    <title>PXC脚本命令</title>
    <url>/2020/12/13/PXC%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>MySQL集群脚本命令</p>
<a id="more"></a>

<p>[TOC]</p>
<h1 id="一、安装Percona数据库"><a href="#一、安装Percona数据库" class="headerlink" title="一、安装Percona数据库"></a>一、安装Percona数据库</h1><h2 id="1-离线安装Percona"><a href="#1-离线安装Percona" class="headerlink" title="1. 离线安装Percona"></a>1. 离线安装Percona</h2><ul>
<li><p>进入RPM安装文件目录，执行下面的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl stop mysqld</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-在线安装Percona"><a href="#2-在线安装Percona" class="headerlink" title="2. 在线安装Percona"></a>2. 在线安装Percona</h2><ul>
<li><p>使用yum命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</span><br><span class="line">yum  install  Percona-Server-server-57</span><br></pre></td></tr></table></figure>
</li>
<li><p>管理MySQL服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-开放防火墙端口"><a href="#3-开放防火墙端口" class="headerlink" title="3. 开放防火墙端口"></a>3. 开放防火墙端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="4-修改MySQL配置文件"><a href="#4-修改MySQL配置文件" class="headerlink" title="4. 修改MySQL配置文件"></a>4. 修改MySQL配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character_set_server</span> = utf8</span><br><span class="line"><span class="attr">bind-address</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment">#跳过DNS解析</span></span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h2 id="5-禁止开机启动MySQL"><a href="#5-禁止开机启动MySQL" class="headerlink" title="5. 禁止开机启动MySQL"></a>5. 禁止开机启动MySQL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld off</span><br></pre></td></tr></table></figure>

<h2 id="6-初始化MySQL数据库"><a href="#6-初始化MySQL数据库" class="headerlink" title="6. 初始化MySQL数据库"></a>6. 初始化MySQL数据库</h2><ul>
<li><p>查看MySQL初始密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep "A temporary password"</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改MySQL密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建远程管理员账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'admin'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'Abc_123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'admin'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="二、创建PXC集群"><a href="#二、创建PXC集群" class="headerlink" title="二、创建PXC集群"></a>二、创建PXC集群</h1><h2 id="1-删除MariaDB程序包"><a href="#1-删除MariaDB程序包" class="headerlink" title="1. 删除MariaDB程序包"></a>1. 删除MariaDB程序包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove mari*</span><br></pre></td></tr></table></figure>

<h2 id="2-开放防火墙端口"><a href="#2-开放防火墙端口" class="headerlink" title="2. 开放防火墙端口"></a>2. 开放防火墙端口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4444/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4567/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent</span><br></pre></td></tr></table></figure>

<h2 id="3-关闭SELINUX"><a href="#3-关闭SELINUX" class="headerlink" title="3. 关闭SELINUX"></a>3. 关闭SELINUX</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p>把SELINUX属性值设置成disabled</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="4-离线安装PXC"><a href="#4-离线安装PXC" class="headerlink" title="4. 离线安装PXC"></a>4. 离线安装PXC</h2><ul>
<li><p>进入RPM文件目录，执行安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>参考第一章内容，修改MySQL配置文件、创建账户等操作</p>
</li>
</ul>
<h2 id="5-创建PXC集群"><a href="#5-创建PXC集群" class="headerlink" title="5. 创建PXC集群"></a>5. 创建PXC集群</h2><ul>
<li><p>停止MySQL服务</p>
</li>
<li><p>修改每个PXC节点的/etc/my.cnf文件（在不同节点上，注意调整文件内容）</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server-id</span>=<span class="number">1</span>  <span class="comment">#PXC集群中MySQL实例的唯一ID，不能重复，必须是数字</span></span><br><span class="line"><span class="attr">wsrep_provider</span>=/usr/lib64/galera3/libgalera_smm.so</span><br><span class="line"><span class="attr">wsrep_cluster_name</span>=pxc-cluster  <span class="comment">#PXC集群的名称</span></span><br><span class="line"><span class="attr">wsrep_cluster_address</span>=gcomm://<span class="number">192.168</span>.<span class="number">99.151</span>,<span class="number">192.168</span>.<span class="number">99.159</span>,<span class="number">192.168</span>.<span class="number">99.215</span></span><br><span class="line"><span class="attr">wsrep_node_name</span>=pxc1  <span class="comment">#当前节点的名称</span></span><br><span class="line"><span class="attr">wsrep_node_address</span>=<span class="number">192.168</span>.<span class="number">99.151</span>  <span class="comment">#当前节点的IP</span></span><br><span class="line"><span class="attr">wsrep_sst_method</span>=xtrabackup-v2  <span class="comment">#同步方法（mysqldump、rsync、xtrabackup）</span></span><br><span class="line"><span class="attr">wsrep_sst_auth</span>= admin:Abc_123456  <span class="comment">#同步使用的帐户</span></span><br><span class="line"><span class="attr">pxc_strict_mode</span>=ENFORCING  <span class="comment">#同步严厉模式</span></span><br><span class="line"><span class="attr">binlog_format</span>=ROW  <span class="comment">#基于ROW复制（安全可靠）</span></span><br><span class="line"><span class="attr">default_storage_engine</span>=InnoDB  <span class="comment">#默认引擎</span></span><br><span class="line"><span class="attr">innodb_autoinc_lock_mode</span>=<span class="number">2</span>  <span class="comment">#主键自增长不锁表</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主节点的管理命令（第一个启动的PXC节点）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysql@bootstrap.service</span><br><span class="line">systemctl stop mysql@bootstrap.service</span><br><span class="line">systemctl restart mysql@bootstrap.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>非主节点的管理命令（非第一个启动的PXC节点）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service start mysql</span><br><span class="line">service stop mysql</span><br><span class="line">service restart mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看PXC集群状态信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;wsrep_cluster%&#39; ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>按照上述配置方法，创建两组PXC集群</strong></p>
</li>
</ul>
<h2 id="6-PXC节点启动与关闭"><a href="#6-PXC节点启动与关闭" class="headerlink" title="6. PXC节点启动与关闭"></a>6. PXC节点启动与关闭</h2><ul>
<li>如果最后关闭的PXC节点是安全退出的，那么下次启动要最先启动这个节点，而且要以主节点启动</li>
<li>如果最后关闭的PXC节点不是安全退出的，那么要先修改<code>/var/lib/mysql/grastate.dat</code> 文件，把其中的<code>safe_to_bootstrap</code>属性值设置为1，再安装主节点启动</li>
</ul>
<h1 id="三、安装MyCat"><a href="#三、安装MyCat" class="headerlink" title="三、安装MyCat"></a>三、安装MyCat</h1><h2 id="1-JDK安装与配置"><a href="#1-JDK安装与配置" class="headerlink" title="1. JDK安装与配置"></a>1. JDK安装与配置</h2><ul>
<li><p>安装JDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索JDK版本</span></span><br><span class="line">yum search jdk </span><br><span class="line"><span class="meta">#</span><span class="bash">安装JDK1.8开发版</span></span><br><span class="line">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看JDK安装路径</span></span><br><span class="line">ls -lrt /etc/alternatives/java</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件结尾加上JDK路径，例如<span class="built_in">export</span>  JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.171-8.b10.el7_5.x86_64/</span></span><br><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2. 创建数据表"></a>2. 创建数据表</h2><ul>
<li><p>在两组PXC集群中分别创建t_user数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_user(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    username VARCHAR(200) NOT NULL,</span><br><span class="line">    password VARCHAR(2000) NOT NULL,</span><br><span class="line">    tel CHAR(11) NOT NULL,</span><br><span class="line">    locked TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,</span><br><span class="line">    INDEX idx_username(username) USING BTREE,</span><br><span class="line">    UNIQUE INDEX unq_username(username) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-MyCat安装与配置"><a href="#3-MyCat安装与配置" class="headerlink" title="3. MyCat安装与配置"></a>3. MyCat安装与配置</h2><ol>
<li><p>下载MyCat</p>
<p><a href="http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz" target="_blank" rel="noopener">http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.</a><a href="http://dl.mycat.io/1.6.5/Mycat-server-1.6.5-release-20180122220033-linux.tar.gz" target="_blank" rel="noopener">gz</a></p>
</li>
<li><p>上传MyCat压缩包到虚拟机</p>
</li>
<li><p>安装unzip程序包，解压缩MyCat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install unzip</span><br><span class="line">unzip MyCAT压缩包名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放防火墙8066和9066端口，关闭SELINUX</p>
</li>
<li><p>修改MyCat的bin目录中所有.sh文件的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod -R 777 .&#x2F;*.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyCat启动与关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> MyCat的bin目录</span></span><br><span class="line">./startup_nowrap.sh #启动MyCat</span><br><span class="line">ps -aux #查看系统进程</span><br><span class="line">kill -9 MyCat进程编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改server.xml文件，设置MyCat帐户和虚拟逻辑库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span><br><span class="line">&lt;mycat:server xmlns:mycat="http://io.mycat/"&gt;</span><br><span class="line">  	&lt;system&gt;</span><br><span class="line">  		&lt;property name="nonePasswordLogin"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useHandshakeV10"&gt;1&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useSqlStat"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useGlobleTableCheck"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="sequnceHandlerType"&gt;2&lt;/property&gt;</span><br><span class="line">  		&lt;property name="subqueryRelationshipCheck"&gt;false&lt;/property&gt;</span><br><span class="line">  		&lt;property name="processorBufferPoolType"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="handleDistributedTransactions"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useOffHeapForMerge"&gt;1&lt;/property&gt;</span><br><span class="line">      	&lt;property name="memoryPageSize"&gt;64k&lt;/property&gt;</span><br><span class="line">  		&lt;property name="spillsFileBufferSize"&gt;1k&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useStreamOutput"&gt;0&lt;/property&gt;</span><br><span class="line">  		&lt;property name="systemReserveMemorySize"&gt;384m&lt;/property&gt;</span><br><span class="line">  		&lt;property name="useZKSwitch"&gt;false&lt;/property&gt;</span><br><span class="line">  	&lt;/system&gt;</span><br><span class="line">    &lt;!--这里是设置的admin用户和虚拟逻辑库--&gt;</span><br><span class="line">  	&lt;user name="admin" defaultAccount="true"&gt;</span><br><span class="line">  		&lt;property name="password"&gt;Abc_123456&lt;/property&gt;</span><br><span class="line">  		&lt;property name="schemas"&gt;test&lt;/property&gt;</span><br><span class="line">  	&lt;/user&gt;</span><br><span class="line">&lt;/mycat:server&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="8">
<li><p>修改schema.xml文件，设置数据库连接和虚拟数据表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;</span><br><span class="line">  	&lt;!--配置数据表--&gt;</span><br><span class="line">  	&lt;schema name="test" checkSQLschema="false" sqlMaxLimit="100"&gt;</span><br><span class="line">  		&lt;table name="t_user" dataNode="dn1,dn2" rule="mod-long" /&gt;</span><br><span class="line">  	&lt;/schema&gt;</span><br><span class="line">  	&lt;!--配置分片关系--&gt;</span><br><span class="line">  	&lt;dataNode name="dn1" dataHost="cluster1" database="test" /&gt;</span><br><span class="line">  	&lt;dataNode name="dn2" dataHost="cluster2" database="test" /&gt;</span><br><span class="line">  	&lt;!--配置连接信息--&gt;</span><br><span class="line">  	&lt;dataHost name="cluster1" maxCon="1000" minCon="10" balance="2" </span><br><span class="line">                writeType="1" dbType="mysql" dbDriver="native" switchType="1"  </span><br><span class="line">                slaveThreshold="100"&gt;</span><br><span class="line">  		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">  		&lt;writeHost host="W1" url="192.168.99.151:3306" user="admin" </span><br><span class="line">                     password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W1R1" url="192.168.99.159:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W1R2" url="192.168.99.215:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  		&lt;writeHost host="W2" url="192.168.99.159:3306" user="admin" </span><br><span class="line">                     password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W2R1" url="192.168.99.151:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W2R2" url="192.168.99.215:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  	&lt;/dataHost&gt;</span><br><span class="line">  	&lt;dataHost name="cluster2" maxCon="1000" minCon="10" balance="2" </span><br><span class="line">                writeType="1" dbType="mysql" dbDriver="native" switchType="1"  </span><br><span class="line">                slaveThreshold="100"&gt;</span><br><span class="line">  		&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">  		&lt;writeHost host="W1" url="192.168.99.121:3306" user="admin"</span><br><span class="line">  				   password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W1R1" url="192.168.99.122:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W1R2" url="192.168.99.123:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  		&lt;writeHost host="W2" url="192.168.99.122:3306" user="admin"</span><br><span class="line">  				   password="Abc_123456"&gt;</span><br><span class="line">  			&lt;readHost host="W2R1" url="192.168.99.121:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  			&lt;readHost host="W2R2" url="192.168.99.123:3306" user="admin" </span><br><span class="line">                        password="Abc_123456" /&gt;</span><br><span class="line">  		&lt;/writeHost&gt;</span><br><span class="line">  	&lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改rule.xml文件，把mod-long的count值修改成2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;function name="mod-long" class="io.mycat.route.function.PartitionByMod"&gt;</span><br><span class="line">	&lt;property name="count"&gt;2&lt;/property&gt;</span><br><span class="line">&lt;/function&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启MyCat</p>
</li>
<li><p>向t_user表写入数据，感受数据的切分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE test;</span><br><span class="line">#第一条记录被切分到第二个分片</span><br><span class="line">INSERT INTO t_user(id,username,password,tel,locked) VALUES(1,&quot;A&quot;,HEX(AES_ENCRYPT(&#39;123456&#39;,&#39;HelloWorld&#39;)));</span><br><span class="line">#第二条记录被切分到第一个分片</span><br><span class="line">INSERT INTO t_user(id,username,password,tel,locked) VALUES(2,&quot;B&quot;,HEX(AES_ENCRYPT(&#39;123456&#39;,&#39;HelloWorld&#39;)));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4-配置父子表"><a href="#4-配置父子表" class="headerlink" title="4. 配置父子表"></a>4. 配置父子表</h2><ol>
<li><p>在conf目录下创建<code>customer-hash-int</code>文件，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">101</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">102</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">103</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">104</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">105</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">106</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在rule.xml文件中加入自定义<function>和<tableRule></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"customer-hash-int"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"io.mycat.route.function.PartitionByFileMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>customer-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-customer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span>sharding_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>customer-hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改schema.xml文件，添加父子表定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_customer"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"sharding-customer"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">"t_orders"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">joinKey</span>=<span class="string">"customer_id"</span> 	</span></span><br><span class="line"><span class="tag">                <span class="attr">parentKey</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyCat上执行如下SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE test;</span><br><span class="line">CREATE TABLE t_customer(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    username VARCHAR(200) NOT NULL,</span><br><span class="line">    sharding_id INT NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE t_orders(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    customer_id INT NOT NULL,</span><br><span class="line">    datetime TIMESTAMP DEFAULT CURRENT_TIMSTAMP</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向t_customer表和t_orders表写入数据，查看字表数据跟随父表切分到同一个分片</p>
</li>
</ol>
<h2 id="5-创建双机热备的MyCat集群"><a href="#5-创建双机热备的MyCat集群" class="headerlink" title="5. 创建双机热备的MyCat集群"></a>5. 创建双机热备的MyCat集群</h2><ol>
<li><p>用两个虚拟机实例，各自部署MyCat</p>
</li>
<li><p>用一个虚拟机实例部署Haproxy</p>
<ul>
<li><p>安装Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0&#x2F;8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">listen   admin_stats  </span><br><span class="line">    bind    0.0.0.0:4001</span><br><span class="line">    mode  http</span><br><span class="line">    stats uri       &#x2F;dbs</span><br><span class="line">    stats realm  Global\ statistics</span><br><span class="line">    stats auth    admin:abc123456</span><br><span class="line">listen   proxy-mysql</span><br><span class="line">    bind    0.0.0.0:3306  </span><br><span class="line">    mode  tcp </span><br><span class="line">    balance  roundrobin</span><br><span class="line">    option  tcplog       #日志格式</span><br><span class="line">    server   mycat_1  192.168.99.131:3306  check  port  8066  maxconn  2000  </span><br><span class="line">    server   mycat_2  192.168.99.132:3306  check  port  8066  maxconn  2000  </span><br><span class="line">    option  tcpka        #使用keepalive检测死链</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service haproxy start</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问Haproxy监控画面</p>
<p><a href="http://192.168.99.131:4001/dbs" target="_blank" rel="noopener">http://192.168.99.131:4001/dbs</a></p>
</li>
</ul>
</li>
<li><p>用另外一个虚拟机同样按照上述操作安装Haproxy</p>
</li>
<li><p>在某个Haproxy虚拟机实例上部署Keepalived</p>
<ul>
<li><p>开启防火墙的VRRP协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启VRRP</span></span><br><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --protocol  vrrp -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">应用设置</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  ens33</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.133</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure>
</li>
<li><p>ping 192.168.99.133</p>
</li>
</ul>
</li>
<li><p>在另外一个Haproxy虚拟机上，按照上述方法部署Keepalived</p>
</li>
<li><p>使用MySQL客户端连接192.168.99.133，执行增删改查数据</p>
</li>
</ol>
<h1 id="四、Sysbench基准测试"><a href="#四、Sysbench基准测试" class="headerlink" title="四、Sysbench基准测试"></a>四、Sysbench基准测试</h1><h2 id="1-安装Sysbench"><a href="#1-安装Sysbench" class="headerlink" title="1. 安装Sysbench"></a>1. 安装Sysbench</h2><ul>
<li><p>在线安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/</span><br><span class="line">repositories/akopytov/sysbench/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install sysbench</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地安装</p>
<ul>
<li><p>下载压缩文件</p>
<p><a href="https://codeload.github.com/akopytov/sysbench/zip/1.0" target="_blank" rel="noopener">https://</a><a href="https://codeload.github.com/akopytov/sysbench/zip/1.0" target="_blank" rel="noopener">codeload.github.com/akopytov/sysbench/zip/1.0</a></p>
</li>
<li><p>安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y automake libtool</span><br><span class="line">yum install -y mysql-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> sysbench</span></span><br><span class="line">./autogen.sh </span><br><span class="line">./configure </span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">sysbench --version</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="2-执行测试"><a href="#2-执行测试" class="headerlink" title="2. 执行测试"></a>2. 执行测试</h2><ul>
<li><p>准备测试库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench  /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-tables-count=10 --oltp-table-size=100000 prepare</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench  /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-test-mode=complex --threads=10 --time=300 --report-interval=10 run &gt;&gt; /home/mysysbench.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench /usr/share/sysbench/tests/include/oltp_legacy/oltp.lua --mysql-host=192.168.99.131 --mysql-port=3306 --mysql-user=admin --mysql-password=Abc_123456 --oltp-tables-count=10 cleanup</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="五、tpcc-mysql-压力测试"><a href="#五、tpcc-mysql-压力测试" class="headerlink" title="五、tpcc-mysql 压力测试"></a>五、tpcc-mysql 压力测试</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul>
<li><p>修改my.cnf配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>pxc_strict_mode=DISABLED</p>
</li>
<li><p>修改某个Haproxy的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server   mysql_1  192.168.99.151:3306  check  port  3306  weight  1  maxconn  2000</span><br><span class="line">server   mysql_2  192.168.99.159:3306  check  port  3306  weight  1  maxconn  2000</span><br><span class="line">server   mysql_3  192.168.99.215:3306  check  port  3306  weight  1  maxconn  2000</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动Haproxy</p>
</li>
<li><p>安装依赖程序包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc</span><br><span class="line">yum install -y mysql-devel</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-安装tpcc-mysql"><a href="#2-安装tpcc-mysql" class="headerlink" title="2. 安装tpcc-mysql"></a>2. 安装tpcc-mysql</h2><ul>
<li><p>下载压缩包</p>
<p><a href="https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/master" target="_blank" rel="noopener">https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/</a><a href="https://codeload.github.com/Percona-Lab/tpcc-mysql/zip/master" target="_blank" rel="noopener">master</a></p>
</li>
<li><p>执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> tpcc的src目录</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>create_table.sql</code>和<code>add_fkey_idx.sql</code>两个文件</p>
</li>
<li><p>执行数据初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tpcc_load -h 192.168.99.131 -d tpcc -u admin -p Abc_123456 -w</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行压力测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./tpcc_start -h 192.168.99.131 -d tpcc -u admin -p Abc_123456 -w 1 -c 5 -r 300 -l 600 -&gt;tpcc-output-log</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="六、导入数据"><a href="#六、导入数据" class="headerlink" title="六、导入数据"></a>六、导入数据</h1><h2 id="1-生成1000万条数据"><a href="#1-生成1000万条数据" class="headerlink" title="1. 生成1000万条数据"></a>1. 生成1000万条数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function">def <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> writer=<span class="keyword">new</span> FileWriter(<span class="string">"D:/data.txt"</span>)</span><br><span class="line">		<span class="keyword">var</span> buff=<span class="keyword">new</span> BufferedWriter(writer)</span><br><span class="line">		<span class="keyword">for</span>(i:<span class="number">1</span>..<span class="number">10000000</span>)&#123;</span><br><span class="line">			buff.write(i+<span class="string">",测试数据\n"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		buff.close</span><br><span class="line">		writer.close</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-执行文件切分"><a href="#2-执行文件切分" class="headerlink" title="2. 执行文件切分"></a>2. 执行文件切分</h2><ul>
<li><p>上传data.txt文件到linux</p>
</li>
<li><p>执行文件切分</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">split -l 1000000 -d data.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-准备数据库"><a href="#3-准备数据库" class="headerlink" title="3. 准备数据库"></a>3. 准备数据库</h2><ul>
<li><p>每个PXC分片只开启一个节点</p>
</li>
<li><p>修改PXC节点文件，然后重启PXC服务</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">innodb_flush_method</span> = O_DIRECT</span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">200</span>M</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建t_test数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_test(</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">    name VARCHAR(200) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MyCat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_test"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"cluster1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"W1"</span> <span class="attr">url</span>=<span class="string">"192.168.99.151:3306"</span> <span class="attr">user</span>=<span class="string">"admin"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">password</span>=<span class="string">"Abc_123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"cluster2"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"W1"</span> <span class="attr">url</span>=<span class="string">"192.168.99.121:3306"</span> <span class="attr">user</span>=<span class="string">"admin"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">password</span>=<span class="string">"Abc_123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="4-执行Java程序，多线程导入数据"><a href="#4-执行Java程序，多线程导入数据" class="headerlink" title="4. 执行Java程序，多线程导入数据"></a>4. 执行Java程序，多线程导入数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.xtend.lib.annotations.Accessors</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Accessors</span></span><br><span class="line">	File file;</span><br><span class="line">	</span><br><span class="line">	<span class="function">override <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> url=<span class="string">"jdbc:mysql://192.168.99.131:8066/test"</span></span><br><span class="line">		<span class="keyword">var</span> username=<span class="string">"admin"</span></span><br><span class="line">		<span class="keyword">var</span> password=<span class="string">"Abc_123456"</span></span><br><span class="line">		<span class="keyword">var</span> con=DriverManager.getConnection(url,username,password)</span><br><span class="line">		<span class="keyword">var</span> sql=<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">			load data local intfile '</span>/home/data/«file.name»<span class="string">' ignore into table t_test </span></span><br><span class="line"><span class="string">			character set '</span>utf8<span class="string">' </span></span><br><span class="line"><span class="string">			fields terminated by '</span>,<span class="string">' optionally enclosed by '</span>\<span class="string">"' </span></span><br><span class="line"><span class="string">			lines terminated by '\n' (id,name);</span></span><br><span class="line"><span class="string">		'''</span></span><br><span class="line"><span class="string">		var pst=con.prepareStatement(sql);</span></span><br><span class="line"><span class="string">		pst.execute</span></span><br><span class="line"><span class="string">		con.close</span></span><br><span class="line"><span class="string">		LoadData.updateNum();</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadData</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> <span class="keyword">int</span> end=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">static</span> pool=<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>,<span class="number">5</span>,<span class="number">60</span>,TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingQueue(<span class="number">200</span>))</span><br><span class="line">	<span class="function">def <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		DriverManager.registerDriver(<span class="keyword">new</span> Driver)</span><br><span class="line">		<span class="keyword">var</span> folder=<span class="keyword">new</span> File(<span class="string">"/home/data"</span>)</span><br><span class="line">		<span class="keyword">var</span> files=folder.listFiles</span><br><span class="line">		end=files.length <span class="comment">//线程池结束条件</span></span><br><span class="line">		files.forEach[one|</span><br><span class="line">			<span class="keyword">var</span> task=<span class="keyword">new</span> Task();</span><br><span class="line">			task.file=one;</span><br><span class="line">			pool.execute(task)</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">synchronized</span> def <span class="keyword">static</span> <span class="title">updateNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">if</span>(num==end)&#123;</span><br><span class="line">			pool.shutdown();</span><br><span class="line">			println(<span class="string">"执行结束"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、大数据归档"><a href="#七、大数据归档" class="headerlink" title="七、大数据归档"></a>七、大数据归档</h1><h2 id="1-安装TokuDB"><a href="#1-安装TokuDB" class="headerlink" title="1. 安装TokuDB"></a>1. 安装TokuDB</h2><ul>
<li><p>安装jemlloc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y jemalloc</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="section">[mysqld_safe]</span></span><br><span class="line"><span class="attr">malloc-lib</span>=/usr/lib64/libjemalloc.so.<span class="number">1</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启MySQL</p>
</li>
<li><p>开启Linux大页内存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装TokuDB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y Percona-Server-tokudb-57.x86_64</span><br><span class="line">ps-admin --enable -uroot -p</span><br><span class="line">service mysql restart</span><br><span class="line">ps-admin --enable -uroot -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看安装结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-配置Replication集群"><a href="#2-配置Replication集群" class="headerlink" title="2. 配置Replication集群"></a>2. 配置Replication集群</h2><ul>
<li><p>在两个TokuDB数据库上创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE USER &#39;backup&#39;@&#39;%&#39; IDENTIFIED BY &#39;Abc_123456&#39; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT super, reload, replication slave ON *.* TO &#39;backup&#39;@&#39;%&#39; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH  PRIVILEGES ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改两个TokuDB的配置文件，如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server_id</span> = <span class="number">101</span></span><br><span class="line"><span class="attr">log_bin</span> = mysql_bin</span><br><span class="line"><span class="attr">relay_log</span> = relay_bin</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server_id</span> = <span class="number">102</span></span><br><span class="line"><span class="attr">log_bin</span> = mysql_bin</span><br><span class="line"><span class="attr">relay_log</span> = relay_bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动两个TokuDB节点</p>
</li>
<li><p>分别在两个TokuDB上执行下面4句SQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭同步服务</span><br><span class="line">stop slave;</span><br><span class="line">#设置同步的Master节点</span><br><span class="line">change master to master_host&#x3D;&quot;192.168.99.155&quot;,master_port&#x3D;3306,master_user&#x3D;&quot;backup&quot;,</span><br><span class="line">master_password&#x3D;&quot;Abc_123456&quot;;</span><br><span class="line">#启动同步服务</span><br><span class="line">start slave;</span><br><span class="line">#查看同步状态</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭同步服务</span><br><span class="line">stop slave;</span><br><span class="line">#设置同步的Master节点</span><br><span class="line">change master to master_host&#x3D;&quot;192.168.99.102&quot;,master_port&#x3D;3306,master_user&#x3D;&quot;backup&quot;,</span><br><span class="line">master_password&#x3D;&quot;Abc_123456&quot;;</span><br><span class="line">#启动同步服务</span><br><span class="line">start slave;</span><br><span class="line">#查看同步状态</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-创建归档表"><a href="#3-创建归档表" class="headerlink" title="3. 创建归档表"></a>3. 创建归档表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_purchase (</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">	purchase_price DECIMAL(10,2) NOT NULL,</span><br><span class="line">	purchase_num INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_sum DECIMAL (10,2) NOT NULL,</span><br><span class="line">	purchase_buyer INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	company_id INT UNSIGNED NOT NULL,</span><br><span class="line">	goods_id INT UNSIGNED NOT NULL,</span><br><span class="line">	KEY idx_company_id(company_id),</span><br><span class="line">	KEY idx_goods_id(goods_id)</span><br><span class="line">)engine&#x3D;TokuDB;</span><br></pre></td></tr></table></figure>

<h2 id="4-配置Haproxy-Keepalived双机热备"><a href="#4-配置Haproxy-Keepalived双机热备" class="headerlink" title="4. 配置Haproxy+Keepalived双机热备"></a>4. 配置Haproxy+Keepalived双机热备</h2><ul>
<li><p>在两个节点上安装Haproxy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y haproxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">listen   admin_stats  </span><br><span class="line">    bind    0.0.0.0:4001</span><br><span class="line">    mode  http</span><br><span class="line">    stats uri       /dbs</span><br><span class="line">    stats realm  Global\ statistics</span><br><span class="line">    stats auth    admin:abc123456</span><br><span class="line">listen   proxy-mysql</span><br><span class="line">    bind    0.0.0.0:4002  </span><br><span class="line">    mode  tcp </span><br><span class="line">    balance  roundrobin</span><br><span class="line">    option  tcplog       #日志格式</span><br><span class="line">    server   backup_1  192.168.99.102:3306  check  port  3306  maxconn  2000  </span><br><span class="line">    server   backup_2  192.168.99.155:3306  check  port  3306  maxconn  2000  </span><br><span class="line">    option  tcpka        #使用keepalive检测死链</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Haproxy</p>
</li>
<li><p>开启防火墙的VRRP协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --direct --permanent --add-rule ipv4 filter INPUT 0 --protocol vrrp -j ACCEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>在两个节点上安装Keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑Keepalived配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  ens33</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.211</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Keepalived</p>
</li>
</ul>
<h2 id="5-准备归档数据"><a href="#5-准备归档数据" class="headerlink" title="5. 准备归档数据"></a>5. 准备归档数据</h2><ul>
<li><p>在两个PXC分片上创建进货表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_purchase (</span><br><span class="line">	id INT UNSIGNED PRIMARY KEY,</span><br><span class="line">	purchase_price DECIMAL(10,2) NOT NULL,</span><br><span class="line">	purchase_num INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_sum DECIMAL (10,2) NOT NULL,</span><br><span class="line">	purchase_buyer INT UNSIGNED NOT NULL,</span><br><span class="line">	purchase_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">	company_id INT UNSIGNED NOT NULL,</span><br><span class="line">	goods_id INT UNSIGNED NOT NULL,</span><br><span class="line">	KEY idx_company_id(company_id),</span><br><span class="line">	KEY idx_goods_id(goods_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置MyCat的schema.xml文件，并重启MyCat</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_purchase"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-执行数据归档"><a href="#6-执行数据归档" class="headerlink" title="6. 执行数据归档"></a>6. 执行数据归档</h2><ul>
<li><p>安装pt-archiver</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install percona-toolkit</span><br><span class="line">pt-archiver --version</span><br><span class="line">pt-archiver --help</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行数据归档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-archiver --source h=192.168.99.102,P=8066,u=admin,p=Abc_123456,D=test,t=t_purchase --dest h=192.168.99.102,P=3306,u=admin,p=Abc_123456,D=test,t=t_purchase --no-check-charset --where 'purchase_date&lt;"2018-09"' --progress 5000 --bulk-delete --bulk-insert --limit=10000 --statistics</span><br></pre></td></tr></table></figure>









</li>
</ul>
]]></content>
      <categories>
        <category>PXC</category>
      </categories>
      <tags>
        <tag>MySQL集群</tag>
        <tag>PXC</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis应用场景</title>
    <url>/2019/12/18/Redis%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>Redis以高性能著称，了解与掌握redis常用操作很有必要</p>
<a id="more"></a>

<blockquote>
<p>Redis安装：<a href="https://www.runoob.com/docker/docker-install-redis.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-install-redis.html</a></p>
</blockquote>
<blockquote>
<p>Redis可视化软件：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
</blockquote>
<p>Redis常见场景主要有以下几种:</p>
<h4 id="1-缓存"><a href="#1-缓存" class="headerlink" title="1.缓存"></a>1.缓存</h4><p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p>
<h4 id="2-排行榜"><a href="#2-排行榜" class="headerlink" title="2.排行榜"></a>2.排行榜</h4><p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p>
<h4 id="3-计数器"><a href="#3-计数器" class="headerlink" title="3.计数器"></a>3.计数器</h4><p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>
<h4 id="4-分布式会话"><a href="#4-分布式会话" class="headerlink" title="4.分布式会话"></a>4.分布式会话</h4><p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p>
<h4 id="5-分布式锁"><a href="#5-分布式锁" class="headerlink" title="5.分布式锁"></a>5.分布式锁</h4><p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的setnx功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p>
<h4 id="6-社交网络"><a href="#6-社交网络" class="headerlink" title="6. 社交网络"></a>6. 社交网络</h4><p>点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p>
<h4 id="7-最新列表"><a href="#7-最新列表" class="headerlink" title="7.最新列表"></a>7.最新列表</h4><p>Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p>
<h4 id="8-消息系统"><a href="#8-消息系统" class="headerlink" title="8.消息系统"></a>8.消息系统</h4><p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群搭建</title>
    <url>/2020/07/30/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>

<h3 id="1、Redis集群方案比较"><a href="#1、Redis集群方案比较" class="headerlink" title="1、Redis集群方案比较"></a>1、Redis集群方案比较</h3><ul>
<li><strong>哨兵模式</strong></li>
</ul>
<p><img src="/images/2020073001.jpg" alt="img"></p>
<p>在redis3.0以前的版本要实现集群一般是借助哨兵sentinel工具来监控master节点的状态，如果master节点异常，则会做主从切换，将某一台slave作为master，哨兵的配置略微复杂，并且性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在访问瞬断的情况</p>
<ul>
<li><strong>高可用集群模式</strong></li>
</ul>
<p><img src="/images/2020073002.png" alt="img"></p>
<p>redis集群是一个由多个主从节点群组成的分布式服务器群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到1000节点。redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单。</p>
<h3 id="2、redis高可用集群搭建"><a href="#2、redis高可用集群搭建" class="headerlink" title="2、redis高可用集群搭建"></a>2、redis高可用集群搭建</h3><ul>
<li><strong>redis安装</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载地址：http:&#x2F;&#x2F;redis.io&#x2F;download</span><br><span class="line">安装步骤：</span><br><span class="line"># 安装gcc</span><br><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line"># 把下载好的redis-3.0.0-rc2.tar.gz放在&#x2F;usr&#x2F;local文件夹下，并解压</span><br><span class="line">tar -zxvf redis-3.0.0-rc2.tar.gz</span><br><span class="line"></span><br><span class="line"># 进入到解压好的redis-3.0.0目录下，进行编译</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 进入到redis-3.0.0&#x2F;src目录下进行安装，安装完成验证src目录下是否已经生成了redis-server 、redis-cil</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># 建立俩个文件夹存放redis命令和配置文件</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 把redis-3.0.0下的redis.conf复制到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc下</span><br><span class="line">cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;</span><br><span class="line"></span><br><span class="line"># 移动redis-3.0.0&#x2F;src里的几个文件到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下</span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 启动并指定配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf（注意要使用后台启动，所以修改redis.conf里的daemonize改为yes)</span><br><span class="line"></span><br><span class="line"># 验证启动是否成功</span><br><span class="line">ps -ef | grep redis </span><br><span class="line"></span><br><span class="line"># 查看是否有redis服务或者查看端口</span><br><span class="line">netstat -tunpl | grep 6379</span><br><span class="line"></span><br><span class="line"># 进入redis客户端 </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli </span><br><span class="line"></span><br><span class="line"># 退出客户端</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line"># 退出redis服务： </span><br><span class="line">（1）pkill redis-server </span><br><span class="line">（2）kill 进程号                       </span><br><span class="line">（3）&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>redis集群搭建</strong></li>
</ul>
<p>redis集群需要至少要三个master节点，我们这里搭建三个master节点，并且给每个master再搭建一个slave节点，总共6个redis节点，由于节点数较多，这里采用在一台机器上创建6个redis实例，并将这6个redis实例配置成集群模式，所以这里搭建的是伪分布式集群模式，当然真正的分布式集群的配置方法几乎一样，搭建伪分布式集群的步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步：在&#x2F;usr&#x2F;local下创建文件夹redis-cluster，然后在其下面分别创建6个文件夾如下</span><br><span class="line">（1）mkdir -p &#x2F;usr&#x2F;local&#x2F;redis-cluster</span><br><span class="line">（2）mkdir 8001、 mkdir 8002、 mkdir 8003、 mkdir 8004、 mkdir 8005、 mkdir 8006</span><br><span class="line"></span><br><span class="line">第一步：把之前的redis.conf配置文件copy到8001下，修改如下内容：</span><br><span class="line">（1）daemonize yes</span><br><span class="line">（2）port 8001（分别对每个机器的端口号进行设置）</span><br><span class="line">（3）bind 192.168.0.61（必须要绑定当前机器的ip，这里方便redis集群定位机器，不绑定可能会出现循环查找集群节点机器的情况）</span><br><span class="line">（4）dir &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;8001&#x2F;（指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据）</span><br><span class="line">（5）cluster-enabled yes（启动集群模式）</span><br><span class="line">（6）cluster-config-file nodes-8001.conf（这里800x最好和port对应上）</span><br><span class="line">（7）cluster-node-timeout 5000</span><br><span class="line">（8）appendonly yes</span><br><span class="line"></span><br><span class="line">第三步：把修改后的配置文件，分别 copy到各个文夹下，注意每个文件要修改第2、4、6项里的端口号</span><br><span class="line">快捷复制命令：%s&#x2F;原目标&#x2F;目标地址&#x2F;g    </span><br><span class="line">第四步：由于 redis集群需要使用 ruby命令，所以我们需要安装 ruby</span><br><span class="line">（1）yum install ruby</span><br><span class="line">（2）yum install rubygems</span><br><span class="line">（3）gem install redis --version 3.0.0（安装redis和 ruby的接囗）</span><br><span class="line"></span><br><span class="line">第五步：分别启动6个redis实例，然后检查是否启动成功</span><br><span class="line">（1）&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;800*&#x2F;redis.conf</span><br><span class="line">（2）ps -ef | grep redis 查看是否启动成功</span><br><span class="line"></span><br><span class="line">第六步：在redis的安装目录下执行 redis-trib.rb命令</span><br><span class="line">（1）cd &#x2F;usr&#x2F;local&#x2F;redis-3.0.0&#x2F;src</span><br><span class="line">（2）.&#x2F;redis-trib.rb create --replicas 1 192.168.0.61:8001 192.168.0.61:8002 192.168.0.61:8003 192.168.0.61:8004 192.168.0.61:8005 192.168.0.61:8006</span><br><span class="line">新版本：redis-cli --cluster create 192.168.200.10:8001 192.168.200.10:8002  192.168.200.10:8003 192.168.200.10:8004 192.168.200.10:8005 192.168.200.10:8006  --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">第七步：验证集群：</span><br><span class="line">（1）连接任意一个客户端即可：.&#x2F;redis-cli -c -h -p (-c表示集群模式，指定ip地址和端口号）如：&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli -c -h 192.168.0.61 -p 800*</span><br><span class="line">（2）进行验证： cluster info（查看集群信息）、cluster nodes（查看节点列表）</span><br><span class="line">（3）进行数据操作验证</span><br><span class="line">（4）关闭集群则需要逐个进行关闭，使用命令：</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-cli -c -h 192.168.0.61 -p 800* shutdown</span><br><span class="line"></span><br><span class="line">PS：当出现集群无法启动时，删除redis的临时数据文件，再次重新启动每一个redis服务，然后重新构造集群环境。</span><br></pre></td></tr></table></figure>



<h3 id="3、Java操作redis集群"><a href="#3、Java操作redis集群" class="headerlink" title="3、Java操作redis集群"></a>3、Java操作redis集群</h3><p>借助redis的java客户端jedis可以操作以上集群，引用jedis版本的maven坐标如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>Java编写访问redis集群的代码非常简单，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.HostAndPort;</span><br><span class="line">import redis.clients.jedis.JedisCluster;</span><br><span class="line">import redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 访问redis集群</span><br><span class="line"> * @author aaron.rao</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RedisCluster </span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Set&lt;HostAndPort&gt; jedisClusterNode &#x3D; new HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8001));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8002));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8003));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8004));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8005));</span><br><span class="line">        jedisClusterNode.add(new HostAndPort(&quot;192.168.0.61&quot;, 8006));</span><br><span class="line">        </span><br><span class="line">        JedisPoolConfig config &#x3D; new JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(100);</span><br><span class="line">        config.setMaxIdle(10);</span><br><span class="line">        config.setTestOnBorrow(true);</span><br><span class="line">        JedisCluster jedisCluster &#x3D; new JedisCluster(jedisClusterNode, 6000, 10, config);</span><br><span class="line">        System.out.println(jedisCluster.set(&quot;student&quot;, &quot;aaron&quot;));</span><br><span class="line">        System.out.println(jedisCluster.set(&quot;age&quot;, &quot;18&quot;));</span><br><span class="line">        </span><br><span class="line">        System.out.println(jedisCluster.get(&quot;student&quot;));</span><br><span class="line">        System.out.println(jedisCluster.get(&quot;age&quot;));</span><br><span class="line">        </span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行效果如下：</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">aaron</span><br><span class="line">18</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis集群</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot前台页面get不到js,css文件</title>
    <url>/2020/09/28/SpringBoot%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2get%E4%B8%8D%E5%88%B0js%20css%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>今天遇到了一个让我很无语的问题，在导入css,js等静态文件之后，在前台获取不到相应的文件。。。。。为此调试了好几个小时。。。。。<br>没想到重启了idea之后问题就莫名好了。。。。暴风哭泣。。。。</p>
<p>下次一定要<br><strong>重启idea软件</strong><br><strong>重启idea软件</strong><br><strong>重启idea软件</strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot错误</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot启动时找不到或无法加载主类</title>
    <url>/2020/10/06/SpringBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E6%88%96%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E4%B8%BB%E7%B1%BB/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>

<p>在启动SpringBoot项目时，控制台页面突然报出下列错误：</p>
<blockquote>
<p>找不到或无法加载主类 com.xxx.xxxx.xxxxApplication</p>
</blockquote>
<p>一开始以为是项目打包的问题，于是启动<code>mvn clean install</code>。。。无果<br>只得硬着头皮一步步排查，最后是在workspace.xml文件中找到问题所在,也就是SPRING_BOOT_MAIN_CLASS的value并没有设置正确</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;component name&#x3D;&quot;RunManager&quot; selected&#x3D;&quot;Spring Boot.DianpingApplication&quot;&gt;</span><br><span class="line">   &lt;configuration name&#x3D;&quot;DianpingApplication&quot; type&#x3D;&quot;SpringBootApplicationConfigurationType&quot; factoryName&#x3D;&quot;Spring Boot&quot;&gt;</span><br><span class="line">     &lt;module name&#x3D;&quot;dianping&quot; &#x2F;&gt;</span><br><span class="line">     &lt;option name&#x3D;&quot;SPRING_BOOT_MAIN_CLASS&quot; value&#x3D;&quot;com.liuurick.dianping.DianpingApplication&quot; &#x2F;&gt;</span><br><span class="line">     &lt;method v&#x3D;&quot;2&quot;&gt;</span><br><span class="line">       &lt;option name&#x3D;&quot;Make&quot; enabled&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;method&gt;</span><br><span class="line">   &lt;&#x2F;configuration&gt;</span><br><span class="line"> &lt;&#x2F;component&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot错误</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实现邮件发送功能</title>
    <url>/2020/08/13/SpringBoot%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>SpringBoot实现邮件发送功能</p>
<a id="more"></a>

<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="POP3协议是什么？"><a href="#POP3协议是什么？" class="headerlink" title="POP3协议是什么？"></a>POP3协议是什么？</h4><p>POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本,它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。它是因特网电子邮件的第一个离线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。</p>
<h4 id="SMTP协议是什么？"><a href="#SMTP协议是什么？" class="headerlink" title="SMTP协议是什么？"></a>SMTP协议是什么？</h4><p>SMTP 的全称是Simple Mail Transfer Protocol，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。增加 SMTP 认证的目的是为了使用户避免受到垃圾邮件的侵扰。</p>
<h4 id="IMAP协议是什么？"><a href="#IMAP协议是什么？" class="headerlink" title="IMAP协议是什么？"></a>IMAP协议是什么？</h4><p>IMAP全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的。</p>
<h4 id="IMAP和POP3协议有什么不同呢？"><a href="#IMAP和POP3协议有什么不同呢？" class="headerlink" title="IMAP和POP3协议有什么不同呢？"></a>IMAP和POP3协议有什么不同呢？</h4><p>POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。</p>
<p>而IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。</p>
<p>同时，IMAP像POP3那样提供了方便的邮件下载服务，让用户能进行离线阅读。IMAP提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。此外，IMAP 更好地支持了从多个不同设备中随时访问新邮件。<br><img src="/images/2020081401.png" alt=""><br>总之，IMAP 整体上为用户带来更为便捷和可靠的体验。POP3 更易丢失邮件或多次下载相同的邮件，但 IMAP 通过邮件客户端与webmail 之间的双向同步功能很好地避免了这些问题。</p>
<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>对于邮箱功能，首先需要开启<code>POP3/SMTP服务</code>获取邮箱授权码。</p>
<p>在邮箱主页-&gt;设置-&gt;账户中可以看到</p>
<p><img src="/images/2020081402.png" alt=""></p>
<p>开启之后会获取一个授权码，用来第三方验证，具体的可以看官方教程。<a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=1001256&&id=28" target="_blank" rel="noopener">官方教程</a></p>
<h4 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h4><p>创建一个springboot项目，引入下方依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p> 然后修改application.properties 配置信息，这里我使用的是application.yml文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    port: 587</span><br><span class="line">    username: 2826803629@qq.com</span><br><span class="line">    password: xxxxwwnddfh</span><br><span class="line">    default-encoding: UTF-8</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          socketFactoryClass: javax.net.ssl.SSLsocketFactory</span><br><span class="line">        debug: true</span><br></pre></td></tr></table></figure>

<p>配置完成之后进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   JavaMailSender javaMailSender;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       SimpleMailMessage msg = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">       <span class="comment">//邮件主题</span></span><br><span class="line">       msg.setSubject(<span class="string">"测试邮件"</span>);</span><br><span class="line">       <span class="comment">//邮件内容</span></span><br><span class="line">       msg.setText(<span class="string">"hhhhhhh"</span>);</span><br><span class="line">       <span class="comment">//邮件发送者</span></span><br><span class="line">       msg.setFrom(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">       <span class="comment">//邮件接受者</span></span><br><span class="line">       msg.setTo(<span class="string">"xxx@qq.com"</span>);</span><br><span class="line">       <span class="comment">//发送邮件</span></span><br><span class="line">       javaMailSender.send(msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>有些同学可能会遇到下面的错误，这是授权码的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javax.mail.AuthenticationFailedException: 535 Login Fail. Please enter your authorization code to login. More information <span class="keyword">in</span> http://service.mail.qq.com/cgi-bin/<span class="built_in">help</span>?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span><br></pre></td></tr></table></figure>

<p>重新开启POP3/SMTP服务即可。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成MyBatis的分页插件PageHelper</title>
    <url>/2020/10/25/SpringBoot%E9%9B%86%E6%88%90MyBatis%E7%9A%84%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><a id="more"></a>

<p>首先说说MyBatis框架的PageHelper插件吧，它是一个非常好用的分页插件，通常我们的项目中如果集成了MyBatis的话，几乎都会用到它，因为分页的业务逻辑说复杂也不复杂，但是有插件我们何乐而不为？通常引入它们只需三步骤，不管是Spring集成还是SpringBoot集成都是老套路，这里就分开总结了。。。</p>
<h2 id="Spring集成PageHelper："><a href="#Spring集成PageHelper：" class="headerlink" title="Spring集成PageHelper："></a>Spring集成PageHelper：</h2><p><strong>第一步：pom文件引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis的分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：MyBatis的核心配置文件中引入配置项</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 【mybatis的核心配置文件】 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量设置别名(可以不配) 作用：就是在mapper.xml文件中直接写类名，也可以不用写全路径名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.liuurick.manager.po"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的分页插件PageHelper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库类型Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步：业务逻辑实现分页功能，我们只需将当前查询的页数page和每页显示的总条数rows传进去，然后Pagehelper已经帮我们分好数据了，只需在web层获取数据即可。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询商品列表：</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DatagridResult <span class="title">itemList</span><span class="params">(Integer page, Integer rows)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为了程序的严谨性，判断非空：</span></span><br><span class="line">    <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">        page = <span class="number">1</span>;   <span class="comment">//设置默认当前页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(page &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rows == <span class="keyword">null</span>)&#123;</span><br><span class="line">        rows = <span class="number">30</span>;    <span class="comment">//设置默认每页显示的商品数(因为jsp页面上默认写的就是30条)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、设置分页信息，包括当前页数和每页显示的总计数</span></span><br><span class="line">    PageHelper.startPage(page, rows);</span><br><span class="line">    <span class="comment">//2、执行查询</span></span><br><span class="line">    TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">    List&lt;TbItem&gt; list = tbItemMapper.selectByExample(example);</span><br><span class="line">    <span class="comment">//3、获取分页查询后的数据</span></span><br><span class="line">    PageInfo&lt;TbItem&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    <span class="comment">//4、封装需要返回的分页实体</span></span><br><span class="line">    DatagridResult result = <span class="keyword">new</span> DatagridResult();</span><br><span class="line">    <span class="comment">//设置获取到的总记录数total：</span></span><br><span class="line">    result.setTotal(pageInfo.getTotal());</span><br><span class="line">    <span class="comment">//设置数据集合rows：</span></span><br><span class="line">    result.setRows(list);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="springboot集成PageHelper："><a href="#springboot集成PageHelper：" class="headerlink" title="springboot集成PageHelper："></a>springboot集成PageHelper：</h2><p><strong>第一步：pom文件还是需要引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：这次直接是在项目的入口类application.java中直接设置PageHelper插件即可</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置mybatis的分页插件pageHelper</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(<span class="string">"offsetAsPageNum"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"rowBoundsWithCount"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"reasonable"</span>,<span class="string">"true"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"dialect"</span>,<span class="string">"mysql"</span>);    <span class="comment">//配置mysql数据库的方言</span></span><br><span class="line">    pageHelper.setProperties(properties);</span><br><span class="line">    <span class="keyword">return</span> pageHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：同理，使用插件实现分页功能，方式还是一样，只需将当前查询的页数和每页显示的条数穿进去即可，直接源码</strong></p>
<p>这是需要用到的分页实体，各位可以直接享用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.riemann.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 每页显示的总条数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 总条数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalNum;</span><br><span class="line">    <span class="comment">// 是否有下一页</span></span><br><span class="line">    <span class="keyword">private</span> Integer isMore;</span><br><span class="line">    <span class="comment">// 总页数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;</span><br><span class="line">    <span class="comment">// 开始索引</span></span><br><span class="line">    <span class="keyword">private</span> Integer startIndex;</span><br><span class="line">    <span class="comment">// 分页结果</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">(Integer currentPage, Integer pageSize, Integer totalNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="keyword">this</span>.totalNum = totalNum;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = (<span class="keyword">this</span>.totalNum+<span class="keyword">this</span>.pageSize-<span class="number">1</span>)/<span class="keyword">this</span>.pageSize;</span><br><span class="line">        <span class="keyword">this</span>.startIndex = (<span class="keyword">this</span>.currentPage-<span class="number">1</span>)*<span class="keyword">this</span>.pageSize;</span><br><span class="line">        <span class="keyword">this</span>.isMore = <span class="keyword">this</span>.currentPage &gt;= <span class="keyword">this</span>.totalPage?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(Integer currentPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(Integer pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalNum</span><span class="params">(Integer totalNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalNum = totalNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIsMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isMore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsMore</span><span class="params">(Integer isMore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isMore = isMore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPage</span><span class="params">(Integer totalPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStartIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartIndex</span><span class="params">(Integer startIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;T&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页功能源码(web层和service层)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">findItemByPage</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置分页信息，分别是当前页数和每页显示的总记录数【记住：必须在mapper接口中的方法执行之前设置该分页信息】</span></span><br><span class="line">    PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">    </span><br><span class="line">    List&lt;Item&gt; allItems = itemMapper.findAll();        <span class="comment">//全部商品</span></span><br><span class="line">    <span class="keyword">int</span> countNums = itemMapper.countItem();            <span class="comment">//总记录数</span></span><br><span class="line">    PageBean&lt;Item&gt; pageData = <span class="keyword">new</span> PageBean&lt;&gt;(currentPage, pageSize, countNums);</span><br><span class="line">    pageData.setItems(allItems);</span><br><span class="line">    <span class="keyword">return</span> pageData.getItems();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品分页功能(集成mybatis的分页插件pageHelper实现)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentPage    :当前页数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize        :每页显示的总记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemsPage"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">itemsPage</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> itemService.findItemByPage(currentPage, pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分页功能</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目测试模板</title>
    <url>/2020/12/15/SpringBoot%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>在Application类中写好一个模板，其他测试类继承即可</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class XXXApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>UML学习笔记</title>
    <url>/2020/12/07/UML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper笔记</title>
    <url>/2020/03/24/Zookeeper%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Zookeeper知识点总结</p>
<a id="more"></a>

<h2 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h2><p>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。Zookeeper是基于分布式计算的核心概念而设计的，主要目的是给开发人员提供一套容易理解和开发的接口，从而简化分布式系统构建的服务。<br>Zookeeper是一个分布式协调服务的开源框架，它是由Google的Chubby开源实现。Zookeeper主要用来解决分布式集群中应用系统的一致性问题和单点故障问题，例如如何避免同时操作同一数据造成脏读的一致性问题等。<br>Zookeeper具有全局数据一致性、可靠性、顺序性、原子性以及实时性，可以说Zookeeper的其他特性都是为满足Zookeeper全局数据一致性这一特性。<br><strong>1.全局数据一致</strong><br>每个服务器都保存一份相同的数据副本，客户端无论连接到集群的任意节点上，看到的目录树都是一致的（也就是数据都是一致的），这也是Zookeeper最重要的特征。<br><strong>2.可靠性</strong><br>如果消息（对目录结构的增删改查）被其中一台服务器接收，那么将被所有的服务器接收。<br><strong>3.顺序性</strong><br>Zookeeper顺序性主要分为全局有序和偏序两种，其中全局有序是指如果在一台服务器上消息A在消息B前发布，则在所有服务器上消息A都将在消息B前被发布；偏序是指如果一个消息B在消息A后被同一个发送者发布，A必将排在B前面。无论全局有序还是偏序，其目的都是为了保证Zookeeper全局数据一致。<br><strong>4.数据更新原子性</strong><br>一次数据更新要么成功（半数以上节点成功），要么失败，不存在中间状态。<br><strong>5.实时性</strong><br>Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。<br>Zookeeper集群是一个主从集群，它一般是由一个Leader（领导者）和多个Follower（跟随者）组成。此外，针对访问量比较大的Zookeeper集群，还可新增Observer（观察者）。Zookeeper集群中的三种角色各司其职，共同完成分布式协调服务。<br>1.Leader它是Zookeeper集群工作的核心，卫是事务性请求（写操作）的唯一调度和处理者，它保证集群事务处理的顺序性，同时负责进行投票的发起和决议，以及更新系统状态。</p>
<p>2.Follower它负责处理客户端的非事务（读操作）请求，如果接收到客户端发来的事务性请求，则会转发给Leader，让Leader进行处理，同时还负责在Leader选举过程中参与投票。</p>
<p>3.Observer它负责观察Zookeeper集群的最新状态的变化，并且将这些状态进行同步。对于非事务性请求可以进行独立处理；对于事务性请求，则会转发给Leader服务器进行处理。它不会参与任何形式的投票，只提供非事务性的服务，通常用于在不影响集群事务处理能力的前提下，提升集群的非事务处理能力（提高集群读的能力，也降低了集群选主的复杂程度）。</p>
<h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p><img src="/images/2020032401.png" alt="image-20201204164651818"></p>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Zookeeper是由节点组成的树，树中的每个节点被称为—Znode。每个节点都可以拥有子节点。每一个Znode默认能够存储1MB的数据，每个Znode都可以通过其路径唯一标识，如图中第三层的第一个Znode,，它的路径是/app1/p_1。Zookeeper数据模型中每个Znode都是由三部分组成，分别是stat、data、children。</p>
<h3 id="Znode的类型"><a href="#Znode的类型" class="headerlink" title="Znode的类型"></a>Znode的类型</h3><p>Znode的类型在创建时被指定，一旦创建就无法改变。<br>Znode有两种类型，分别是<strong>临时节点</strong>和<strong>永久节点</strong>。</p>
<p><strong>临时节点：</strong>该生命周期依赖于创建它们的会话，一旦会话结束，临时节点将会被自动删除，也可以手动删除。虽然每个临时的Znode都会绑定一个客户端，但它们对所有的客户端还是可见的。需要注意的是临时节点不允许拥有子节点。<br><strong>永久节点：</strong>该生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，它们才能被删除。</p>
<h3 id="Znode的属性"><a href="#Znode的属性" class="headerlink" title="Znode的属性"></a>Znode的属性</h3><table>
<thead>
<tr>
<th><strong>属性名称</strong></th>
<th><strong>相关说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>czxid</td>
<td>节点被创建的时间</td>
</tr>
<tr>
<td>ctime</td>
<td>节点最后一次的修改的Zxid值</td>
</tr>
<tr>
<td>mzxid</td>
<td>节点最后一次的修改时间</td>
</tr>
<tr>
<td>mtime</td>
<td>与该节点的子节点最后一次修改的Zxid值</td>
</tr>
<tr>
<td>pZxid</td>
<td>子节点被修改的版本号</td>
</tr>
<tr>
<td>cversion</td>
<td>节点被创建的时间</td>
</tr>
<tr>
<td>dataVersion</td>
<td>数据版本号</td>
</tr>
<tr>
<td>aclVersion</td>
<td>ACL版本号</td>
</tr>
<tr>
<td>ephemeralOwner</td>
<td>如果此节点为临时节点，那么该值代表这个节点拥有者的会话ID；否则值为0</td>
</tr>
<tr>
<td>dataLength</td>
<td>节点数据域长度</td>
</tr>
<tr>
<td>numChildren</td>
<td>节点拥有的子节点个数</td>
</tr>
</tbody></table>
<h2 id="Zookeeper的Watcher机制"><a href="#Zookeeper的Watcher机制" class="headerlink" title="Zookeeper的Watcher机制"></a>Zookeeper的Watcher机制</h2><p>在ZooKeeper中，引入了Watch机制来实现这种分布式的通知功能。ZooKeeper允许客户端向服务端注册一个Watch监听，当服务端的一些事件触发了这个Watch，那么就会向指定客户端发送一个事件通知，来实现分布式的通知功能。</p>
<ul>
<li>一次性触发</li>
<li>事件封装</li>
<li>异步发送</li>
<li>先注册再触发</li>
</ul>
<table>
<thead>
<tr>
<th><strong>连接状态</strong></th>
<th><strong>状态含义</strong></th>
<th><strong>事件类型</strong></th>
<th><strong>事件含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Disconnected</td>
<td>连接失败</td>
<td>NodeCreated</td>
<td>节点被创建</td>
</tr>
<tr>
<td>SyncConnected</td>
<td>连接成功</td>
<td>NodeDataChanged</td>
<td>节点数据变更</td>
</tr>
<tr>
<td>AuthFailed</td>
<td>认证失败</td>
<td>NodeChildrentChanged</td>
<td>子节点数据变更</td>
</tr>
<tr>
<td>Expired</td>
<td>会话过期</td>
<td>NodeDeleted</td>
<td>节点被删除</td>
</tr>
</tbody></table>
<h2 id="Zookeeper的选举机制"><a href="#Zookeeper的选举机制" class="headerlink" title="Zookeeper的选举机制"></a>Zookeeper的选举机制</h2><p>Zookeeper为了保证各节点的协同工作，在工作时需要一个Leader角色，而Zookeeper默认采用FastLeaderElection算法，且投票数大于半数则胜出的机制。</p>
<ul>
<li>服务器ID：设置集群myid参数时，参数分别为服务器1、服务器2、服务器3，编号越大<br>FastLeaderElection算法中权重越大。</li>
<li>选举ID：选举过程中，Zookeeper服务器有四种状态，分别为竞选状态、随从状态、观察状态、领  导者状态。</li>
<li>逻辑时钟：逻辑时钟被称为投票次数，同一轮投票过程中逻辑时钟值相同，逻辑时钟起始值为0，   每投一次票，数据增加。与接收到其它服务器返回的投票信息中数值比较，根据不同值做出不同判  断。</li>
<li>数据ID：是服务器中存放的最新数据版本号，该值越大则说明数据越新，在选举过程中数据越新  权重越大</li>
</ul>
<p>Zookeeper选举机制有两种类型，分别为全新集群选举和非全新集群选举。全新集群选举是新搭建起来  的，没有数据ID和逻辑时钟的数据影响集群的选举；非全新集群选举时是优中选优，保证Leader是Zookeeper集群中数据最完整、最可靠的一台服务器。</p>
<p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没 有历史数据，在存放数据量这一点上，都是一样的。</p>
<p>假设这些服务器依序启动，来看看会发生什么</p>
<p><img src="/images/2020032402.png" alt="image-20201204170121824"></p>
<p>（1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3  票），选举无法完成，服务器1状态保持为LOOKING；<br>（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现  服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，  服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING<br>（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器<br>1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服  务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；<br>（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。  交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器    3，并更改状态为FOLLOWING；<br>（5）服务器5启动，同4一样当小弟。</p>
<h2 id="Zookeeper分布式集群部署"><a href="#Zookeeper分布式集群部署" class="headerlink" title="Zookeeper分布式集群部署"></a>Zookeeper分布式集群部署</h2><p>Zookeeper分布式集群部署指的是ZooKeeper分布式模式安装。Zookeeper集群搭建通常是由2n+1台 服务器组成，这是为了保证 Leader 选举（基于Paxos算法的实现）能够通过半数以上台服务器选举支持，因此ZooKeeper集群的数量一般为奇数台。</p>
<p>官网首页：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p>
<p>ZooKeeper下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.7/</a></p>
<p>1.上传Zookeeper安装包。将下载完毕的Zookeeper安装包上传至Linux系统/export/software/目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv ~&#x2F;apache-zookeeper-3.5.7-bin.tar.gz &#x2F;export&#x2F;software&#x2F;</span><br></pre></td></tr></table></figure>

<p>2.解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C &#x2F;export&#x2F;servers&#x2F;</span><br></pre></td></tr></table></figure>

<p>3.修改Zookeeper的配置文件。先将zoo_sample.cfg配置文件重命名为zoo.cfg</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020032403.png" alt="image-20201204170637531"></p>
<p> Zookeeper中的配置文件zoo.cfg中参数含义解读如下：</p>
<p>1.<strong>tickTime =2000：通信心跳数</strong>，Zookeeper服务器与客户端心跳时间，单位毫秒</p>
<p>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是</p>
<p>2.<strong>initLimit =10：LF初始通信时限</strong></p>
<p>集群中的Follower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime 的量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。</p>
<p>3.<strong>syncLimit =5：LF同步通信时限</strong></p>
<p>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer。</p>
<p>4.<strong>dataDir：数据文件目录+数据持久化路径</strong></p>
<p>主要用于保存Zookeeper中的数据。</p>
<p>5.<strong>clientPort =2181：客户端连接端口监听客户端连接的端口。</strong></p>
<p>6.<strong>server.1=hadoop01:2888:3888</strong>：配置zK集群的服务器编号以及对应的主机名、选举端口号和通信端口号（心跳端口号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F;zkdata </span><br><span class="line">cd &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F;zkdata</span><br><span class="line">echo 1 &gt; myid </span><br><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<p><img src="/images/2020032404.png" alt="image-20201204171247218"></p>
<p><strong>分发</strong>:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;export&#x2F;servers&#x2F;apache-zookeeper-3.5.7-bin&#x2F; hadoop02:&#x2F;export&#x2F;servers&#x2F; scp -r &#x2F;export&#x2F;servers&#x2F;apache-zookeeper-3.5.7-bin&#x2F; hadoop03:&#x2F;export&#x2F;servers&#x2F; scp -r &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F; hadoop02:&#x2F;export&#x2F;data&#x2F;</span><br><span class="line">scp -r &#x2F;export&#x2F;data&#x2F;zookeeper&#x2F; hadoop03:&#x2F;export&#x2F;data&#x2F; scp &#x2F;etc&#x2F;profile hadoop02:&#x2F;etc&#x2F;profile</span><br><span class="line">scp &#x2F;etc&#x2F;profile hadoop03:&#x2F;etc&#x2F;profile source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>



<p><strong>启动和关闭</strong>:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkServer.sh start </span><br><span class="line">zkServer.sh status</span><br><span class="line">zkServer.sh stop</span><br></pre></td></tr></table></figure>

<p><strong>zkS.sh</strong>:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$#</span>==0))</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hadoop01 hadoop02 hadoop03</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span> zk <span class="keyword">in</span> <span class="variable">$i</span></span><br><span class="line">ssh <span class="variable">$i</span> <span class="string">"source /etc/profile &amp;&amp; /export/servers/apache-zookeeper-3.5.7-</span></span><br><span class="line"><span class="string">bin/bin/</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/2020032405.png" alt="image-20201204171542304"></p>
<p><img src="/images/2020032406.png" alt="image-20201204171542304"></p>
<p><img src="/images/2020032407.png" alt="image-20201204171542304"></p>
<h2 id="Zookeeper的Shell操作"><a href="#Zookeeper的Shell操作" class="headerlink" title="Zookeeper的Shell操作"></a>Zookeeper的Shell操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th><strong>命令基本语法</strong></th>
<th><strong>功能描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>help</td>
<td>显示所有操作命令</td>
</tr>
<tr>
<td>ls path [watch]</td>
<td>使用 ls 命令来查看当前znode中所包含的内容</td>
</tr>
<tr>
<td>ls2 path [watch]</td>
<td>查看当前节点数据并能看到更新次数等数据</td>
</tr>
<tr>
<td>create</td>
<td>普通创建 -s 含有序列 -e 临时（重启或者超时消失）</td>
</tr>
<tr>
<td>get path [watch]</td>
<td>获得节点的值</td>
</tr>
<tr>
<td>set</td>
<td>设置节点的具体值</td>
</tr>
<tr>
<td>stat</td>
<td>查看节点状态</td>
</tr>
<tr>
<td>delete</td>
<td>删除节点</td>
</tr>
<tr>
<td>rmr</td>
<td>递归删除节点</td>
</tr>
</tbody></table>
<p>应用场景，HA、kafaka、HBase</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动客户端</span><br><span class="line">[root@hadoop01 ~]# zkCli.sh</span><br><span class="line">#显示所有操作命令</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] help</span><br><span class="line">#查看当前节点详细数据</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls -s &#x2F;</span><br><span class="line">#分别创建2个普通节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] create &#x2F;test test</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] create &#x2F;test&#x2F;more more</span><br><span class="line">#获得节点的值</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get &#x2F;test</span><br><span class="line">#创建短暂节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] create -e &#x2F;test&#x2F;new new</span><br><span class="line">#在当前客户端是能查看到的</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls2 &#x2F;test</span><br><span class="line">#退出后重新进入查看</span><br><span class="line">#创建带序号的节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] create -s &#x2F;test&#x2F;one one</span><br><span class="line">#创建一个普通的节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create &#x2F;test&#x2F;two two</span><br><span class="line">#修改节点数据值</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] set &#x2F;test&#x2F;two three [zk: localhost:2181(CONNECTED) 4] get &#x2F;test&#x2F;two</span><br><span class="line">#在hadoop02主机上注册监听&#x2F;test节点数据变化</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] get -w &#x2F;test</span><br><span class="line">#在hadoop01主机上修改&#x2F;test节点的数据</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] set &#x2F;test tttt</span><br><span class="line">#观察hadoop02主机收到数据变化的监听[zk: localhost:2181(CONNECTED) 2] WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:&#x2F;test</span><br><span class="line">#在hadoop02主机上注册监听&#x2F;test节点的子节点变化</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] ls -w -s &#x2F;test</span><br><span class="line">#在hadoop01主机&#x2F;test节点上创建子节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] create &#x2F;test&#x2F;one one</span><br><span class="line">#观察hadoop02主机收到子节点变化的监听[zk: localhost:2181(CONNECTED) 6] WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeChildrenChanged path:&#x2F;test</span><br><span class="line">#删除节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] delete &#x2F;test&#x2F;one</span><br><span class="line">#递归删除节点</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] deleteall &#x2F;test</span><br></pre></td></tr></table></figure>



<h2 id="Zookeeper的API应用"><a href="#Zookeeper的API应用" class="headerlink" title="Zookeeper的API应用"></a>Zookeeper的API应用</h2><p>pom.xml中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com.test.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat; <span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before; <span class="keyword">import</span> org.junit.After;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	ZKC Tester.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*	<span class="doctag">@author</span> &lt;Authors name&gt;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;3月 3, 2020&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">*	<span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zookeeper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"hadoop01:2181,hadoop02:2181,hadoop03:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">        zookeeper =<span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123; </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">    		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 收到事件通知后的回调函数（用户的业务逻辑）</span></span><br><span class="line">                System.out.println(watchedEvent.getType() + <span class="string">"--"</span> + watchedEvent.getPath());</span><br><span class="line">                <span class="comment">// 再次启动监听</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                	zookeeper.getChildren(<span class="string">"/"</span>,<span class="keyword">true</span>);</span><br><span class="line">    			&#125; <span class="keyword">catch</span> (KeeperException e) &#123; e.printStackTrace();</span><br><span class="line">   				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();</span><br><span class="line">    				&#125;</span><br><span class="line">    			&#125;</span><br><span class="line">   		 &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    	<span class="comment">// 参数1：要创建的节点的路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点的类型</span></span><br><span class="line">   	 	zookeeper.create(<span class="string">"/test"</span>,<span class="string">"test"</span>.getBytes(), 				ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>	<span class="keyword">void</span> <span class="title">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123; </span><br><span class="line">        List&lt;String&gt; children = zookeeper.getChildren(<span class="string">"/hadoop-ha"</span>,<span class="keyword">true</span>); <span class="keyword">for</span>(String child:children)&#123;</span><br><span class="line">    System.out.println(child);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断znode是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	    Stat stat = zookeeper.exists(<span class="string">"/idea"</span>, <span class="keyword">false</span>);</span><br><span class="line">	    System.out.println(stat == <span class="keyword">null</span> ? <span class="string">"not exist"</span> : <span class="string">"exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Zookeeper</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
        <tag>Zookeeper集群</tag>
      </tags>
  </entry>
  <entry>
    <title>canal-adapter启动失败问题记录</title>
    <url>/2020/12/14/canal-adapter%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>canal:<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></p>
</blockquote>
<a id="more"></a>

<h1 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h1><p>canal-1.4 </p>
<p>elasticsearch-7.7.1</p>
<p>jdk1.8</p>
<p>mysql-5.7.30</p>
<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-12-13 09:39:06.006 [main] INFO  o.s.c.annotation.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@37efd131: startup date [Sun Dec 13 09:39:05 GMT+08:00 2020]; root of context hierarchy</span><br><span class="line">2020-12-13 09:39:06.521 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;configurationPropertiesRebinderAutoConfiguration&#39; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d7bfd1f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2020-12-13 09:39:06.852 [main] INFO  c.a.otter.canal.adapter.launcher.CanalAdapterApplication - No active profile set, falling back to default profiles: default</span><br><span class="line">2020-12-13 09:39:06.884 [main] INFO  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@796d3c9f: startup date [Sun Dec 13 09:39:06 GMT+08:00 2020]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@37efd131</span><br><span class="line">2020-12-13 09:39:07.640 [main] INFO  org.springframework.cloud.context.scope.GenericScope - BeanFactory id&#x3D;ba9c0aec-0105-3f1f-b89e-e85c68567039</span><br><span class="line">2020-12-13 09:39:07.724 [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean &#39;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&#39; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$d7bfd1f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">2020-12-13 09:39:09.358 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8081 (http)</span><br><span class="line">2020-12-13 09:39:09.382 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler [&quot;http-nio-8081&quot;]</span><br><span class="line">2020-12-13 09:39:09.402 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]</span><br><span class="line">2020-12-13 09:39:09.404 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat&#x2F;8.5.29</span><br><span class="line">2020-12-13 09:39:09.421 [localhost-startStop-1] INFO  org.apache.catalina.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk-11.0.9\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;&quot;.;C:\Program Files\Java\jdk-11.0.9\\bin;E:\tomcat\apache-tomcat-8.5.59\bin;&quot;;C:\Program Files\VanDyke Software\Clients\;E:\Python\python3\Scripts\;E:\Python\python3\;E:\Java\maven\apache-maven-3.6.3\bin;E:\IDEA\gradle\gradle-5.4.1\bin;E:\app\admin\product\11.2.0\dbhome_1\bin;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin;C:\;rogram Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Microsoft SQL Server\90\Tools\binn\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;人网站\Git\bin;:\;人网站\Git\cmd;it;cmd;D:\;C:\WINDOWS\System32\OpenSSH\;&quot;E:\tomcat\apache-tomcat-8.5.59\bin;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\&quot;;E:\Coding\winhadoop\bin;E:\Git\cmd;E:\node\;C:\Program Files\MySQL\MySQL Server 5.7\bin;C:\Program Files (x86)\CADSeePlus;E:\tomcat\apache-tomcat-8.5.34\bin;C:\Program Files\Java\jdk1.8.0_261\bin;C:\Program Files\Java\jdk-11.0.9\bin;E:\Python\python3\Scripts\;E:\Python\python3\;C:\Program Files (x86)\Microsoft Visual Studio\Common\Tools\WinNT;C:\Program Files (x86)\Microsoft Visual Studio\Common\MSDev98\Bin;C:\Program Files (x86)\Microsoft Visual Studio\Common\Tools;C:\Program Files (x86)\Microsoft Visual Studio\VC98\bin;C:\Qt\Qt5.6.2\5.6\msvc2013\bin;C:\Users\admin\AppData\Local\Microsoft\WindowsApps;E:\个人网站\Git\bin;C:\Program Files (x86)\MySQL\MySQL Server 5.5\bin;C:\Users\admin\AppData\Local\GitHubDesktop\bin;&quot;E:\IDEA\gradle\gradle-5.4.1\bin;&quot;;C:\Users\admin\AppData\Local\Microsoft\WindowsApps;E:\IDEA\IntelliJ IDEA 2019.3.4\bin;;C:\Users\admin\AppData\Local\Pandoc\;C:\Users\admin\AppData\Roaming\npm;E:\vscode\Microsoft VS Code\bin;C:\Program Files\MySQL\MySQL Server 5.7\bin;E:\WebStorm\WebStorm 2020.2\bin;;C:\Program Files\Bandizip\;C:\Program Files\JetBrains\PyCharm 2020.1.4\bin;;;.]</span><br><span class="line">2020-12-13 09:39:09.650 [localhost-startStop-1] INFO  o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[&#x2F;] - Initializing Spring embedded WebApplicationContext</span><br><span class="line">2020-12-13 09:39:09.650 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2766 ms</span><br><span class="line">2020-12-13 09:39:09.902 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Servlet dispatcherServlet mapped to [&#x2F;]</span><br><span class="line">2020-12-13 09:39:09.910 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;characterEncodingFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.913 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.914 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;httpPutFormContentFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:09.915 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: &#39;requestContextFilter&#39; to: [&#x2F;*]</span><br><span class="line">2020-12-13 09:39:10.094 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;applicationConfigMonitor&#39;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Config dir not found.</span><br><span class="line">2020-12-13 09:39:10.098 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]</span><br><span class="line">2020-12-13 09:39:10.321 [localhost-startStop-1] WARN  org.apache.catalina.loader.WebappClassLoaderBase - The web application [ROOT] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:</span><br><span class="line"> java.base@11.0.9&#x2F;java.lang.Object.wait(Native Method)</span><br><span class="line"> java.base@11.0.9&#x2F;java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:155)</span><br><span class="line"> app&#x2F;&#x2F;com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:43)</span><br><span class="line">2020-12-13 09:39:10.341 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLoggingListener - </span><br><span class="line"></span><br><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.</span><br><span class="line">2020-12-13 09:39:10.347 [main] ERROR org.springframework.boot.SpringApplication - Application run failed</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;applicationConfigMonitor&#39;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Config dir not found.</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:138)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:422)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1694)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:579)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)</span><br><span class="line">	at com.alibaba.otter.canal.adapter.launcher.CanalAdapterApplication.main(CanalAdapterApplication.java:19)</span><br><span class="line">Caused by: java.lang.RuntimeException: Config dir not found.</span><br><span class="line">	at com.alibaba.otter.canal.client.adapter.support.Util.getConfDirPath(Util.java:105)</span><br><span class="line">	at com.alibaba.otter.canal.client.adapter.support.Util.getConfDirPath(Util.java:85)</span><br><span class="line">	at com.alibaba.otter.canal.adapter.launcher.monitor.ApplicationConfigMonitor.init(ApplicationConfigMonitor.java:41)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at java.base&#x2F;jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.base&#x2F;java.lang.reflect.Method.invoke(Method.java:566)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:365)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:308)</span><br><span class="line">	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:135)</span><br><span class="line">	... 16 common frames omitted</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>canal</category>
      </categories>
      <tags>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>canal中间件学习笔记</title>
    <url>/2020/12/09/canal%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>es准时性索引的构建</p>
<a id="more"></a>

<h1 id="增量索引构建的要求"><a href="#增量索引构建的要求" class="headerlink" title="增量索引构建的要求"></a>增量索引构建的要求</h1><ul>
<li>准实时；</li>
<li>性能；</li>
<li>编程简化；</li>
</ul>
<h1 id="canal-简介"><a href="#canal-简介" class="headerlink" title="canal 简介"></a>canal 简介</h1><blockquote>
<p>canal:<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></p>
<p>canal同步数据：<a href="https://mp.weixin.qq.com/s/zaV98KHVyXUW32DqypU1OQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zaV98KHVyXUW32DqypU1OQ</a></p>
</blockquote>
<ul>
<li>消息管道；</li>
<li>source 为 MySQL 数据库；</li>
<li>target 为其他存储，比如 ElasticSearch；</li>
<li>Canal 借鉴了MySQL主从复制的原理，伪装成一个 MySQL 主库的备库，感知 MySQL 中 binlog 的变化，并同步出来一个结构化的数据，交给 Canal 管道的消费端；</li>
</ul>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121201.png" alt="img"></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><h2 id="MySQL主备复制原理"><a href="#MySQL主备复制原理" class="headerlink" title="MySQL主备复制原理"></a>MySQL主备复制原理</h2><p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121202.png" alt="img"></p>
<ul>
<li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件binary log events，可以通过 show binlog events 进行查看)</li>
<li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)</li>
<li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li>
</ul>
<h2 id="canal-工作原理"><a href="#canal-工作原理" class="headerlink" title="canal 工作原理"></a>canal 工作原理</h2><ul>
<li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li>
<li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>
<li>canal 解析 binary log 对象(原始为 byte 流)</li>
</ul>
<blockquote>
<p>canal快速启动：<a href="https://github.com/alibaba/canal/wiki/QuickStart" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/QuickStart</a></p>
</blockquote>
<h1 id="Linux下安装canal"><a href="#Linux下安装canal" class="headerlink" title="Linux下安装canal"></a>Linux下安装canal</h1><h2 id="开启-MySQL-的-binglog"><a href="#开启-MySQL-的-binglog" class="headerlink" title="开启 MySQL 的 binglog"></a>开启 MySQL 的 binglog</h2><h6 id="Ubuntu-用-APT-Repository-安装-MySQL-的安装位置"><a href="#Ubuntu-用-APT-Repository-安装-MySQL-的安装位置" class="headerlink" title="Ubuntu 用 APT Repository 安装 MySQL 的安装位置"></a>Ubuntu 用 APT Repository 安装 MySQL 的安装位置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;mysql - 配置文件</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql - 数据存放的位置</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysql - 启动命令</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;mysql -  插件</span><br></pre></td></tr></table></figure>



<h6 id="查看-MySQL-几个变量的值"><a href="#查看-MySQL-几个变量的值" class="headerlink" title="查看 MySQL 几个变量的值"></a>查看 MySQL 几个变量的值</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要保证 binlog 开启，并且格式是 ROW；</span><br><span class="line"></span><br><span class="line">如果不是上述配置的话，需要修改 &#96;&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf&#96;，然后还要给 MySQL 实例起个 &#96;server-id &#x3D; 1&#96;；MySQL 8 的话，两个参数默认就是这样的，然后 &#96;server-id&#96; 给个唯一值就行了；</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启 binlog</span></span><br><span class="line">show variables like <span class="string">'log_bin'</span>;</span><br><span class="line"><span class="comment"># binlog 的格式</span></span><br><span class="line">show variables like <span class="string">'binlog_format'</span>;</span><br></pre></td></tr></table></figure>



<h6 id="创建复制用户"><a href="#创建复制用户" class="headerlink" title="创建复制用户"></a>创建复制用户</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">create user <span class="string">'canal'</span>@<span class="string">'%'</span> identified <span class="keyword">by</span> <span class="string">'canal'</span>;</span><br><span class="line"></span><br><span class="line">grant replication slave <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">grant replication client <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">grant <span class="keyword">select</span> <span class="keyword">on</span> *.* to <span class="string">'canal'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>



<h2 id="canal-配置-1-1-3"><a href="#canal-配置-1-1-3" class="headerlink" title="canal 配置 | 1.1.3"></a>canal 配置 | 1.1.3</h2><h6 id="修改-canal-properties"><a href="#修改-canal-properties" class="headerlink" title="修改 canal.properties"></a>修改 canal.properties</h6><ul>
<li>文件路径：<code>/canal/1.1.3/canal.deployer-1.1.3/conf</code>；</li>
<li>这一行注释掉；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml</span></span><br></pre></td></tr></table></figure>

<h6 id="修改-instance-properties"><a href="#修改-instance-properties" class="headerlink" title="修改 instance.properties"></a>修改 instance.properties</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置：&#x2F;canal&#x2F;1.1.3&#x2F;canal.deployer-1.1.3&#x2F;conf&#x2F;example&#x2F;instance.properties；</span><br></pre></td></tr></table></figure>

<p>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canal.instance.mysql.slaveId&#x3D;8</span><br><span class="line"></span><br><span class="line">canal.instance.dbUsername&#x3D;canal</span><br><span class="line">canal.instance.dbPassword&#x3D;canal</span><br></pre></td></tr></table></figure>

<h6 id="启动-canal"><a href="#启动-canal" class="headerlink" title="启动 canal"></a>启动 canal</h6><p>JDK 换成 8 才启动起来；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;startup.sh</span><br></pre></td></tr></table></figure>

<h2 id="canal-adapter-1-1-4"><a href="#canal-adapter-1-1-4" class="headerlink" title="canal.adapter | 1.1.4"></a>canal.adapter | 1.1.4</h2><h6 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 IDEA 中打开 client-adapter module；</span><br><span class="line"></span><br><span class="line">修改 &#x2F;canal-canal-1.1.4&#x2F;client-adapter&#x2F;elasticsearch&#x2F;pom.xml&#96; 中的 ElasticSearch 的依赖版本，改成 7.3.0；</span><br></pre></td></tr></table></figure>

<p>pom.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="在总-module-的目录下重新打包-canal"><a href="#在总-module-的目录下重新打包-canal" class="headerlink" title="在总 module 的目录下重新打包 canal"></a>在总 module 的目录下重新打包 canal</h6><ul>
<li>路径为：<code>canal-canal-1.1.4</code>；</li>
<li>打包命令：<code>mvn clean package -DskipTests</code>；</li>
<li>报错：<code>[ERROR] /canal-canal-1.1.4/client-adapter/elasticsearch/src/main/java/com/alibaba/otter/canal/client/adapter/es/support/ESConnection.java:[420,47] 无法将类 org.elasticsearch.client.RestHighLevelClient中的方法 bulk应用到给定类型;</code></li>
<li>找到指定的 ESConnection.java 的 420 行，解决问题：<code>return restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</code></li>
<li>重新打包：<code>mvn clean package -DskipTests</code>；</li>
<li>报错：<code>/canal-canal-1.1.4/client-adapter/elasticsearch/src/main/java/com/alibaba/otter/canal/client/adapter/es/ESAdapter.java:[225,56] 不兼容的类型: org.apache.lucene.search.TotalHits无法转换为long</code>；</li>
<li>找到指定的 ESAdapter.java 的 225 行，解决问题：<code>long rowCount = response.getHits().getTotalHits().value;</code>；</li>
<li>重新打包：<code>mvn clean package -DskipTests</code>，终于成功了；</li>
</ul>
<h6 id="进入编译后生成的目录"><a href="#进入编译后生成的目录" class="headerlink" title="进入编译后生成的目录"></a>进入编译后生成的目录</h6><ul>
<li><code>/canal-canal-1.1.4/client-adapter/launcher/target/canal-adapter</code>，里面的内容和直接从 Github 上下载二进制的包是一样的;</li>
<li>把这个目录拷到正经的目录下，并改个名字 <code>/canal/1.1.4/canal-adapter-es7</code>；</li>
</ul>
<h6 id="修改配置文件-application-yml"><a href="#修改配置文件-application-yml" class="headerlink" title="修改配置文件 application.yml"></a>修改配置文件 application.yml</h6><ul>
<li>文件路径：<code>/canal/1.1.4/canal-adapter-es7/conf/application.yml</code>；</li>
<li>这个配置主要是指明管道两端的 MySQL 和 ElasticSearch；</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">server:</span></span><br><span class="line">  <span class="symbol">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="symbol">spring:</span></span><br><span class="line">  <span class="symbol">jackson:</span></span><br><span class="line">    date-<span class="symbol">format:</span> yyyy-MM-dd <span class="symbol">HH:</span><span class="symbol">mm:</span>ss</span><br><span class="line">    time-<span class="symbol">zone:</span> GMT+<span class="number">8</span></span><br><span class="line">    default-property-<span class="symbol">inclusion:</span> non_null</span><br><span class="line"></span><br><span class="line">canal.<span class="symbol">conf:</span></span><br><span class="line">  <span class="symbol">mode:</span> tcp </span><br><span class="line">  <span class="symbol">canalServerHost:</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">11111</span></span><br><span class="line">  <span class="symbol">batchSize:</span> <span class="number">500</span></span><br><span class="line">  <span class="symbol">syncBatchSize:</span> <span class="number">1000</span></span><br><span class="line">  <span class="symbol">retries:</span> <span class="number">0</span></span><br><span class="line">  <span class="symbol">timeout:</span></span><br><span class="line">  <span class="symbol">accessKey:</span></span><br><span class="line">  <span class="symbol">secretKey:</span></span><br><span class="line">  <span class="symbol">srcDataSources:</span></span><br><span class="line">    <span class="symbol">defaultDS:</span></span><br><span class="line">      <span class="symbol">url:</span> <span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/127.0.0.1:3306/dianping</span>?useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line">      <span class="symbol">username:</span> canal</span><br><span class="line">      <span class="symbol">password:</span> canal</span><br><span class="line">  <span class="symbol">canalAdapters:</span></span><br><span class="line">  - <span class="symbol">instance:</span> example </span><br><span class="line">    <span class="symbol">groups:</span></span><br><span class="line">    - <span class="symbol">groupId:</span> g1</span><br><span class="line">      <span class="symbol">outerAdapters:</span></span><br><span class="line">      - <span class="symbol">name:</span> logger</span><br><span class="line">      - <span class="symbol">name:</span> es</span><br><span class="line">        <span class="symbol">hosts:</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">9300</span></span><br><span class="line">        <span class="symbol">properties:</span></span><br><span class="line">          cluster.<span class="symbol">name:</span> dianping-app</span><br></pre></td></tr></table></figure>

<h6 id="创建文件-shop-yml"><a href="#创建文件-shop-yml" class="headerlink" title="创建文件 shop.yml"></a>创建文件 shop.yml</h6><ul>
<li>文件路径：<code>/canal/1.1.4/canal-adapter-es7/conf/es/shop.yml</code>；</li>
<li>其中 <code>defaultDS</code> 和   <code>example</code> 分别对应 application.yml 中的 <code>defaultDS</code> 和   <code>example</code>；</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: </span><br><span class="line">esMapping:</span><br><span class="line">  _index: shop</span><br><span class="line">  _type: _doc</span><br><span class="line">  _<span class="keyword">id</span>: <span class="keyword">id</span></span><br><span class="line">  upsert: <span class="literal">true</span></span><br><span class="line">  sql: <span class="string">"select a.id,a.name,a.tags,concat(a.latitude,',',a.longitude) as location,a.remark_score,a.price_per_man,a.category_id,b.name as category_name,a.seller_id,c.remark_score as seller_remark_score,c.disabled_flag as seller_disabled_flag from shop a inner join category b on a.category_id = b.id inner join seller c on c.id = a.seller_id"</span></span><br><span class="line">  commitBatch: <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<h6 id="启动-canal-adapter-es7"><a href="#启动-canal-adapter-es7" class="headerlink" title="启动 canal-adapter-es7"></a>启动 canal-adapter-es7</h6><ul>
<li>MySQL 8 要把 <code>/canal/1.1.4/canal-adapter-es7/lib</code> 下的驱动换一下；</li>
<li>启动命令：<code>bin/startup.sh</code>；</li>
</ul>
<h6 id="启动编译好的-canal-deployer-es7"><a href="#启动编译好的-canal-deployer-es7" class="headerlink" title="启动编译好的 canal-deployer-es7"></a>启动编译好的 canal-deployer-es7</h6><ul>
<li>canal.adapter-1.1.4 和 canal.deployer-1.1.3 是不兼容的，所以要把之前启动的 canal.deployer-1.1.3 换成 Maven 编译好的 canal.deployer-1.1.4；</li>
<li>编译好的原路径：<code>/canal-canal-1.1.4/deployer/target/canal</code>，更改到新路径：<code>/canal/1.1.4/canal-deployer-es7</code>；</li>
<li>先关停 canal.deployer-1.1.3：<code>bin/stop.sh</code>；</li>
<li>把 canal.deployer-1.1.3 的 canal.properties 和 example/ 拷贝到 canal-deployer-es7 中；</li>
<li>启动 canal-deployer-es7：<code>bin/startup.sh</code>；</li>
</ul>
<h6 id="更新-MySQL-中-dianping-库的-shop-表"><a href="#更新-MySQL-中-dianping-库的-shop-表" class="headerlink" title="更新 MySQL 中 dianping 库的 shop 表"></a>更新 MySQL 中 dianping 库的 shop 表</h6><ul>
<li>日志文件 <code>canal-adapter-es7/logs/adapter/adapter.log</code> 立马可以感知到；</li>
<li>在 ElasticSearch 中查询，也可以立马感知到；</li>
</ul>
<h1 id="Windows下安装canal"><a href="#Windows下安装canal" class="headerlink" title="Windows下安装canal"></a>Windows下安装canal</h1><h2 id="开启-MySQL-的-binglog-1"><a href="#开启-MySQL-的-binglog-1" class="headerlink" title="开启 MySQL 的 binglog"></a>开启 MySQL 的 binglog</h2><p>1.查看mysql的<code>log_bin</code>是否开启。</p>
<p>因为canal是通过<code>log_bin</code>监听更新的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;%log_bin%&#39;</span><br></pre></td></tr></table></figure>

<p>如果value为off需要修改my.ini文件</p>
<p><strong>注意</strong>：可能会出现MySQL目录下找不到 my.ini 的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在Windows窗口栏查看-》勾选隐藏的项目</span><br><span class="line">2.找到ProgramData目录</span><br><span class="line">3.在ProgramData目录中找到MySQL</span><br></pre></td></tr></table></figure>



<p>2.修改my.ini文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_id&#x3D;1 ###代表集群模式第一台机器</span><br><span class="line">binlog_format&#x3D;ROW ###行模式</span><br><span class="line">log_bin&#x3D;mysql_bin.log ###binlog的文件名称</span><br><span class="line">expire-logs-days&#x3D;14 ###失效日期为14天（可不配置）</span><br><span class="line">max-binlog-size&#x3D;500M ###最大存储500MB（可不配置）</span><br></pre></td></tr></table></figure>



<p>重启MySQL之后再次查询：</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020121203.png" alt="image-20201212190859514"></p>
<h2 id="编译canal-adapter"><a href="#编译canal-adapter" class="headerlink" title="编译canal-adapter"></a>编译canal-adapter</h2><p>因为canal的es默认版本并不匹配,所以需要重新编译</p>
<p><strong>ESAdapter类中的类型错误</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long rowCount &#x3D; response.getHits().getTotalHits().value;</span><br></pre></td></tr></table></figure>

<p><strong>ESConnection</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BulkResponse bulk() &#123;</span><br><span class="line">            if (mode &#x3D;&#x3D; ESClientMode.TRANSPORT) &#123;</span><br><span class="line">                return bulkRequestBuilder.execute().actionGet();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    return restHighLevelClient.bulk(bulkRequest,RequestOptions.DEFAULT);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    throw new RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="安装canal-adapter"><a href="#安装canal-adapter" class="headerlink" title="安装canal-adapter"></a>安装canal-adapter</h2><p>1.修改conf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srcDataSources:</span><br><span class="line">    defaultDS:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;dianpingdb?useUnicode&#x3D;true</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- name: es</span><br><span class="line">        hosts: 127.0.0.1:9300 # 127.0.0.1:9200 for rest mode</span><br><span class="line">        properties:</span><br><span class="line">          mode: transport # or rest</span><br><span class="line">          # security.auth: test:123456 #  only used for rest mode</span><br><span class="line">          cluster.name: elasticsearch</span><br></pre></td></tr></table></figure>



<p>2.修改es目录下的文件</p>
<p>创建shop.yml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: </span><br><span class="line">esMapping:</span><br><span class="line">  _index: shop</span><br><span class="line">  _type: _doc</span><br><span class="line">  _id: id</span><br><span class="line">  upsert: true</span><br><span class="line">  sql: &quot;select a.id,a.name,a.tags,concat(a.latitude,&#39;,&#39;,a.longitude) as location,a.remark_score,a.price_per_man,a.category_id,b.name as category_name,a.seller_id,c.remark_score as seller_remark_score,c.disabled_flag as seller_disabled_flag from shop a inner join category b on a.category_id &#x3D; b.id inner join seller c on c.id &#x3D; a.seller_id&quot;</span><br><span class="line">  commitBatch: 3000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>canal</category>
      </categories>
      <tags>
        <tag>ElasticSearch7</tag>
        <tag>canal</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令操作笔记</title>
    <url>/2020/12/25/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>今天看到公众号上一篇非常</p>
<blockquote>
<p>git官网教程：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
<p>codesheep：<a href="https://mp.weixin.qq.com/s/DQVVYOWdOPuRsy3m0fg6Xg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/DQVVYOWdOPuRsy3m0fg6Xg</a></p>
<p>图解Git：<a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">https://marklodato.github.io/visual-git-guide/index-zh-cn.html</a></p>
<p>Pro Git：<a href="https://bingohuang.gitbooks.io/progit2/content/" target="_blank" rel="noopener">https://bingohuang.gitbooks.io/progit2/content/</a></p>
</blockquote>
<a id="more"></a>



<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2018062701.png" alt="image"></p>
<p>创建一个目录用于存放仓库，或在有内容的目录下操作。<br>然后切换到此目录下初始化：git –bare init<br>git status 查看仓库状态<br>branches 分支目录<br>config 定义项目特有的配置选项<br>description 仅供git web使用<br>HEAD 当前分支<br>hooks 包含git钩子文件<br>info 包含一个全局排除文件<br>objects 存放所有数据内容，有info、pack两个子文件夹<br>refs 存放只想数据（分支）的提交对象的指针<br>index 保存暂存区信息，在执行git 初始化的时候这个文件还不存在,git add 后生成<br>工作目录 暂存区 本地仓库 远程仓库<br>git add git commit git push</p>
<p>git add FILE 添加file到暂存区<br>git add . 添加目录中所有改动过的文件到暂存区<br>git rm –cached FILE 将暂存区的FILE 撤回到工作区<br>git rm -f FILE 同时删除暂存区、工作区的FILE（即直接删除暂存区的文件）<br>git commit -m “add newfile a” 添加到本地仓库（相当于做了一次快照，可根据引号中内容恢复）<br>【真正意义上的通过版本控制系统管理文件：工作目录必须有代码文件，通过git add file添加到暂存区，通过git commit -m “输入的备注”添加到本地仓库】<br>修改文件名两种方式：<br>1、 mv a a.txt 即先删除a 然后生成了a.txt，所以改名不用这个 （删除本地文件）<br>git rm –cached a<br>git add a.txt 然后git status 即可看到这两条命令即是rename （删除暂存区文件）<br>git commit -m “modified a a.txt” a改名a.txt并提交<br>2、git mv old new 直接更改文件名，改完直接git commit提交即可</p>
<p>git diff 比对工作目录与缓存区有什么不同<br>git diff –cached 比对暂存区与本地仓库有什么不同</p>
<p>ls检查下当前目录下是否有仓库信息，<br>git remote add origin <a href="mailto:git@10.0.0.227">git@10.0.0.227</a>:web/control.git 创建远程仓库origin<br>git remote 查看当前远程仓库的名称<br>git remote remove origin 删除远程仓库origin</p>
<p>git log 查看历史提交信息<br>git log –online 查看历史提交信息的哈希值<br>git log –online –decorate 历史提交信息并查看当前指针位置<br>git log -p 展示具体变化内容<br>git log -1 展示一条提交信息的内容<br>git log -1 -p 展示详细具体的最后一条变更的信息内容</p>
<p>git reset –hard haxizhi 恢复到从前的haxizhi位置<br>git reflog 查看所有历史提交信息，包括回复到指定位置之前的<br>git reset –hard haxizhi 前后都能回滚 来回滚</p>
<p>git branch 查看分支<br>git branch fenzhi 创建分支fenzhi<br>git checkout fenzhi 切换分支fenzhi<br>git checkout -b testing 创建并切换到分支testing<br>删除分支要先切换到master然后删除创建的testing ,删除也会给自动创建一个快照，可恢复<br>git branch -d testing 删除分支testing<br>git merge testing 合并分支<br>冲突时，直接编辑冲突的文件，例如：vi aaa 然后去掉大于号、小于号、等于号，然后选择保留的代码，可都保留。</p>
<p>git tag -a v1.0 -m “hehe” 当前状态打标签为V1.0<br>git tag -a V1.0 haxizhi -m “hehe” 把某个哈希状态的状态打标签<br>git show v1.0 查看某个标签的信息<br>git reset –hard v2.0 回滚数据到V2.0<br>git tag -d v2.0 删除V2.0标签的数据</p>
<p>git remote add origin <a href="mailto:git@10.0.0.227">git@10.0.0.227</a>:web/hehe.git 添加远程仓库<br>git push -u origin master<br>gitlab :git服务器的公钥放到gitlab里即可不用输入密码推送代码<br>git pull origin master 把origin分支拉到本地与master分支合并</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常见命令</tag>
      </tags>
  </entry>
  <entry>
    <title>git常见错误</title>
    <url>/2019/07/15/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>记录git常见错误</p>
<a id="more"></a>

<p>一般是没有初始化git本地版本管理仓库，所以无法执行git命令 。</p>
<p>操作之前执行以下命令行: <code>git init</code><br>然后执行一下<code>git status</code>查看状态信息</p>
<p>2.git Could not read from remote repository</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:liuurick&#x2F;BlogBackup.git</span><br><span class="line">git remote -v</span><br><span class="line">git bash输出</span><br></pre></td></tr></table></figure>



<p>3.error: failed to push some refs to xxx</p>
<blockquote>
<p>! [rejected]        master -&gt; master (fetch first)<br>error: failed to push some refs to ‘git@github.com:liuurick/BlogBackup.git’<br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p>
</blockquote>
<p>查了几种解决方式都不太管用，最后发现是由于github中的README.md文件不在本地代码目录中</p>
<p>检查了一下果然如此！<br>这时候可以通过 <code>git pull --rebase origin master</code> 把README.md文件克隆到本地库。</p>
<p>git pull –rebase origin master<br>最后提交：<code>git push origin master</code></p>
<p><strong>下次遇到这样的问题，记得检查.gitignore和README.md文件</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git常见错误</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客高级操作</title>
    <url>/2018/12/25/hexo%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>hexo next高级操作<a href="https://mp.weixin.qq.com/s/U7KPp3HsQQCCQz3z8o5q-Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/U7KPp3HsQQCCQz3z8o5q-Q</a></p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安装及其配置</title>
    <url>/2020/07/31/nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>nginx安装及其配置</p>
<a id="more"></a>

<h1 id="1-nginx-介绍"><a href="#1-nginx-介绍" class="headerlink" title="1 nginx 介绍"></a>1 nginx 介绍</h1><h2 id="1-什么是nginx"><a href="#1-什么是nginx" class="headerlink" title="1 什么是nginx"></a>1 什么是nginx</h2><p>Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>
<p>由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，</p>
<p>并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
<h2 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2 应用场景"></a>2 应用场景</h2><p>1、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</p>
<p>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</p>
<p>3、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，</p>
<p>需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，</p>
<p>不会因为某台服务器负载高宕机而某台服务器闲置的情况。</p>
<h1 id="2-nginx安装"><a href="#2-nginx安装" class="headerlink" title="2 nginx安装"></a>2 nginx安装</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h2><p>官方网址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p>
<p>官网提供三种版本：</p>
<p>Nginx官网提供了三个类型的版本<br>Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版<br>Stable version：最新稳定版，生产环境上建议使用的版本<br>Legacy versions：遗留的老版本的稳定版</p>
<p><img src="/images/2020073101.png" alt="img"></p>
<p>我们这里下载的是Stable version下面的</p>
<p><img src="/images/2020073102.png" alt="img"></p>
<p>使用的版本是1.14.0.tar.gz.</p>
<h2 id="2-安装要求的环境"><a href="#2-安装要求的环境" class="headerlink" title="2 安装要求的环境"></a>2 安装要求的环境</h2><p>下面的环境需要视自己的系统情况而定，没有的环境安装以下就好。</p>
<p><strong>1.需要安装gcc环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p><strong>2.第三方的开发包</strong></p>
<p><strong>1 PERE</strong></p>
<p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。</p>
<p>nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p>
<p><strong>注：pcre-devel是使用pcre开发的一个二次开发库。nginx**</strong>也需要此库**。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<p><strong>2 zlib</strong></p>
<p>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<p><strong>3 openssl</strong></p>
<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，</p>
<p>并提供丰富的应用程序供测试或其它目的使用。</p>
<p>nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install pcre  pcre-devel zlib  zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h2 id="3-nginx安装过程"><a href="#3-nginx安装过程" class="headerlink" title="3 nginx安装过程"></a>3 nginx安装过程</h2><p><strong>1 把nginx源码包上传到linux系统上</strong></p>
<p><img src="/images/2020073103.png" alt="img"></p>
<p><strong>2 解压到/usr/local下面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf nginx-1.14.0.tar.gz -C &#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure>

<p><strong>3 使用cofigure命令创建一个makeFile文件</strong></p>
<p><strong>执行下面的命令的时候，一定要进入到nginx-1.14.0目录里面去。</strong></p>
<p><img src="/images/2020073104.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock \</span><br><span class="line">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client \</span><br><span class="line">--http-proxy-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;proxy \</span><br><span class="line">--http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;fastcgi \</span><br><span class="line">--http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;uwsgi \</span><br><span class="line">--http-scgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;scgi \--with-http_stub_status_module \--with-http_ssl_module \--with-file-aio \--with-http_realip_module</span><br></pre></td></tr></table></figure>

<p>如果没有makeFile文件，编译的时候会报错</p>
<p><img src="/images/2020073105.png" alt="img"></p>
<p>\ 表示命令还没有输入完，换行的意思。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx  表示软件安装到&#x2F;usr&#x2F;local&#x2F;nginx下面。</span><br><span class="line">这个make install 的时候就不用在指定安装路径。</span><br><span class="line">执行完成后查看目录里面已经多了一个Makefile文件</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073106.png" alt="img"></p>
<p><strong>注意：启动nginx之前，上边将临时文件目录指定为/var/temp/nginx，</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需要在&#x2F;var下创建temp及nginx目</span><br></pre></td></tr></table></figure>

<p><strong>4 创建目录/var/temp/nginx/</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;var&#x2F;temp&#x2F;nginx -p</span><br></pre></td></tr></table></figure>

<p>-p 表示级联创建的意思</p>
<p><strong>5 进入nginx-1.14.0里面执行make命令进行编译</strong></p>
<p> <img src="/images/2020073107.png" alt="img"></p>
<p><strong>6 进入nginx-1.14.0里面执行make install 命令进行安装</strong></p>
<p> 这里不需要再次执行安装路径，创建makefile文件的时候已经指定了。</p>
<p><img src="/images/2020073108.png" alt="img"></p>
<p><strong>7 进入安装位置/usr/local/nginx查看目录结构</strong></p>
<p><img src="/images/2020073109.png" alt="img"></p>
<p>其中html是里面首页html文件。conf里面是配置文件。sbin里面只执行文件。</p>
<h1 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3 启动nginx"></a>3 启动nginx</h1><p>进入sbin目录，执行命令./nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;nginx</span><br></pre></td></tr></table></figure>

<h1 id="4-查看nginx是否启动"><a href="#4-查看nginx是否启动" class="headerlink" title="4 查看nginx是否启动"></a>4 查看nginx是否启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# ps -aux | grep nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073110.png" alt="img"></p>
<p><strong>ps命令</strong>用于报告当前系统的进程状态。</p>
<p>-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。</p>
<p>a：显示现行终端机下的所有程序，包括其他用户的程序。</p>
<p>u：以用户为主的格式来显示程序状况。</p>
<p>x：显示所有程序，不以终端机来区分。</p>
<h1 id="5-关闭nginx"><a href="#5-关闭nginx" class="headerlink" title="5 关闭nginx"></a>5 关闭nginx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]#  .&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;nginx -s quit</span><br></pre></td></tr></table></figure>



<h1 id="6-重启nginx"><a href="#6-重启nginx" class="headerlink" title="6 重启nginx"></a>6 重启nginx</h1><p>先关闭，然后启动</p>
<h1 id="7-刷新配置文件"><a href="#7-刷新配置文件" class="headerlink" title="7 刷新配置文件"></a>7 刷新配置文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>



<h1 id="8-关闭防火墙，开启远程访问"><a href="#8-关闭防火墙，开启远程访问" class="headerlink" title="8 关闭防火墙，开启远程访问"></a>8 关闭防火墙，开启远程访问</h1><p>首先需要关闭防火墙：默认端口是80</p>
<p><strong>方法一：永久开放80端口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save</span><br></pre></td></tr></table></figure>

<p><strong>方法二：临时关闭系统防火墙</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service iptables stop</span><br></pre></td></tr></table></figure>

<p><strong>方法三：永久关闭修改配置开机不启动防火墙</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig iptables off</span><br></pre></td></tr></table></figure>

<p><strong>特殊：针对阿里云</strong></p>
<p>需要添加安全组规则</p>
<p><img src="/images/2020073111.png" alt="img"></p>
<h1 id="9-访问nginx"><a href="#9-访问nginx" class="headerlink" title="9 访问nginx"></a>9 访问nginx</h1><p><img src="/images/2020073112.png" alt="img"></p>
<h1 id="10-配置虚拟主机"><a href="#10-配置虚拟主机" class="headerlink" title="10 配置虚拟主机"></a>10 配置虚拟主机</h1><p>就是在一台服务器启动多个网站。</p>
<p>如何区分不同的网站：主要有以下两种方式</p>
<p>方式一：端口不同</p>
<p>方式二：域名不同</p>
<h1 id="11-通过端口区分不同的主机"><a href="#11-通过端口区分不同的主机" class="headerlink" title="11 通过端口区分不同的主机"></a>11 通过端口区分不同的主机</h1><p>nginx配置文件的位置：/usr/local/nginx/conf/nginx.conf</p>
<p>原始配置文件的内容如下：</p>
<p><img src="/images/2020073113.png" alt="img"></p>
<p>我们可以通过配置多个server,从而配置多个虚拟机</p>
<p><img src="/images/2020073114.png" alt="img"></p>
<p>下面测试以下：复制原来的html目录，改名为html-81</p>
<p><img src="/images/2020073115.png" alt="img"></p>
<p>修改以下里面的index.html文件，方便区分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin nginx]# vim html-81&#x2F;index.html</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073116.png" alt="img"></p>
<p>修改完成之后刷新以下配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>然后分别访问192.168.204.131:80 和192.168.204.131:81</p>
<p><img src="/images/2020073117.png" alt="img"></p>
<p><img src="/images/2020073118.png" alt="img"></p>
<h1 id="12-多个域名区分虚拟主机"><a href="#12-多个域名区分虚拟主机" class="headerlink" title="12 多个域名区分虚拟主机"></a>12 多个域名区分虚拟主机</h1><h2 id="1-什么是域名"><a href="#1-什么是域名" class="headerlink" title="1 什么是域名"></a>1 什么是域名</h2><p>域名就是网站：<a href="http://www.baidu.com就是域名" target="_blank" rel="noopener">www.baidu.com就是域名</a></p>
<p>DNS域名解析服务器，把域名解析为ip地址。保存的就是域名和ip地址的映射关系。</p>
<p>一级域名：baidu.com</p>
<p>二级域名：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p>三级域名：image.baidu.com</p>
<p>一个域名对应与一个ip地址，一个ip地址可以被多个域名绑定。</p>
<p>只需要买一个一级域名，后面的二级，三级域名你自己可以随便定义。</p>
<p>本地测试我们可以通过修改hosts配置文件来完成：</p>
<p>hosts文件的位置：C:\Windows\System32\drivers\etc</p>
<p>可以自己手动配置域名和ip的映射关系，如果hosts文件中配置了域名和ip的对应关系，不需要走DNS域名解析服务器。</p>
<p>因为拿到一个域名，首先是到hosts文件里面查找，没有才有去DNS域名解析器查找。</p>
<h2 id="2-nginx配置"><a href="#2-nginx配置" class="headerlink" title="2 nginx配置"></a>2 nginx配置</h2><p><img src="/images/2020073119.png" alt="img"></p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h2><p>1 修改本地hosts配置文件</p>
<p><img src="/images/2020073120.png" alt="img"></p>
<p>2 复制html目录，分别改名为html-taobao和html-baidu</p>
<p><img src="/images/2020073121.png" alt="img"></p>
<p>3 分别修改html-baidu和html-taobao里面的index.html文件，方便区分</p>
<p><img src="/images/2020073123.png" alt="img"></p>
<p><img src="/images/2020073122.png" alt="img"></p>
<p>4 刷新配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin sbin]# .&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>5 然后使用浏览器分别访问：<a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a> 和 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<h1 id="13-正向代理"><a href="#13-正向代理" class="headerlink" title="13 正向代理"></a>13 正向代理</h1><p><img src="/images/2020073124.png" alt="img"></p>
<h1 id="14-反向代理"><a href="#14-反向代理" class="headerlink" title="14 反向代理"></a>14 反向代理</h1><p><img src="/images/2020073125.png" alt="img"></p>
<p>反向代理服务器决定那台服务器提供服务</p>
<h1 id="15-nginx实现反向代理"><a href="#15-nginx实现反向代理" class="headerlink" title="15 nginx实现反向代理"></a>15 nginx实现反向代理</h1><p>两个域名指向同一台nginx服务器，用户访问不同的域名显示不同的网页内容。</p>
<p>两个域名是<a href="http://www.baidu.com和www.taobao.com" target="_blank" rel="noopener">www.baidu.com和www.taobao.com</a></p>
<p>nginx代理服务器使用虚拟机192.168.204.131</p>
<p><img src="/images/2020073126.png" alt="img"></p>
<p>第一步：安装两个tomcat，分别运行在8080和8081端口。</p>
<p>第二步：启动两个tomcat。</p>
<p>第三步：反向代理服务器的配置</p>
<p> <img src="/images/020073127.png" alt="img"></p>
<p>第四步：nginx重新加载配置文件</p>
<p>第五步：配置域名</p>
<p>在hosts文件中添加域名和ip的映射关系</p>
<p>192.168.204.131 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p>192.168.204.131 <a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a></p>
<h1 id="16-负载均衡"><a href="#16-负载均衡" class="headerlink" title="16 负载均衡"></a>16 负载均衡</h1><p>如果一个服务由多个服务器提供，需要把负载分配到不同的服务器处理，需要负载均衡。</p>
<p><img src="/images/2020073128.png" alt="img"></p>
<p>可以根据服务器的实际情况调整服务器权重。权重越高分配的请求越多，权重越低，请求越少。默认是都是1</p>
<p><img src="/images/2020073129.png" alt="img"></p>
<h1 id="17-设置nginx开机自启动（centos6-5）"><a href="#17-设置nginx开机自启动（centos6-5）" class="headerlink" title="17 设置nginx开机自启动（centos6.5）"></a>17 设置nginx开机自启动（centos6.5）</h1><p>每次启动nginx服务都需要到安装目录下的/sbin下面，感觉挺麻烦的。</p>
<p>下面介绍一下如何在Linux(CentOS)系统上，设置nginx开机自启动。</p>
<h2 id="1-用脚本管理nginx服务"><a href="#1-用脚本管理nginx服务" class="headerlink" title="1 用脚本管理nginx服务"></a>1 用脚本管理nginx服务</h2><p><strong>第一步：在/etc/init.d/目录下创建nginx文件，命令如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># touch &#x2F;etc&#x2F;init.d&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p><strong>第二步：在创建的nginx文件中加入下面的内容</strong></p>
<p>首先执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;init.d&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p>然后加下面的内容复制到nginx配置文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">#</span><br><span class="line"># nginx - this script starts and stops the nginx daemon</span><br><span class="line">#</span><br><span class="line"># chkconfig:   - 85 15</span><br><span class="line"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="line">#               proxy and IMAP&#x2F;POP3 proxy server</span><br><span class="line"># processname: nginx</span><br><span class="line"># config:      &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"># config:      &#x2F;etc&#x2F;sysconfig&#x2F;nginx</span><br><span class="line"># pidfile:     &#x2F;var&#x2F;run&#x2F;nginx.pid</span><br><span class="line"># Source function library.</span><br><span class="line">. &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions</span><br><span class="line"># Source networking configuration.</span><br><span class="line">. &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line"># Check that networking is up.</span><br><span class="line">[ &quot;$NETWORKING&quot; &#x3D; &quot;no&quot; ] &amp;&amp; exit 0</span><br><span class="line">nginx&#x3D;&quot;&#x2F;usr&#x2F;sbin&#x2F;nginx&quot;</span><br><span class="line">prog&#x3D;$(basename $nginx)</span><br><span class="line">NGINX_CONF_FILE&#x3D;&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot;</span><br><span class="line">[ -f &#x2F;etc&#x2F;sysconfig&#x2F;nginx ] &amp;&amp; . &#x2F;etc&#x2F;sysconfig&#x2F;nginx</span><br><span class="line">lockfile&#x3D;&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;nginx</span><br><span class="line">make_dirs() &#123;</span><br><span class="line">   # make required directories</span><br><span class="line">   user&#x3D;&#96;$nginx -V 2&gt;&amp;1 | grep &quot;configure arguments:&quot; | sed &#39;s&#x2F;[^*]*--user&#x3D;\([^ ]*\).*&#x2F;\1&#x2F;g&#39; -&#96;</span><br><span class="line">   if [ -z &quot;&#96;grep $user &#x2F;etc&#x2F;passwd&#96;&quot; ]; then</span><br><span class="line">       useradd -M -s &#x2F;bin&#x2F;nologin $user</span><br><span class="line">   fi</span><br><span class="line">   options&#x3D;&#96;$nginx -V 2&gt;&amp;1 | grep &#39;configure arguments:&#39;&#96;</span><br><span class="line">   for opt in $options; do</span><br><span class="line">       if [ &#96;echo $opt | grep &#39;.*-temp-path&#39;&#96; ]; then</span><br><span class="line">           value&#x3D;&#96;echo $opt | cut -d &quot;&#x3D;&quot; -f 2&#96;</span><br><span class="line">           if [ ! -d &quot;$value&quot; ]; then</span><br><span class="line">               # echo &quot;creating&quot; $value</span><br><span class="line">               mkdir -p $value &amp;&amp; chown -R $user $value</span><br><span class="line">           fi</span><br><span class="line">       fi</span><br><span class="line">   done</span><br><span class="line">&#125;</span><br><span class="line">start() &#123;</span><br><span class="line">    [ -x $nginx ] || exit 5</span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</span><br><span class="line">    make_dirs</span><br><span class="line">    echo -n $&quot;Starting $prog: &quot;</span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    echo -n $&quot;Reloading $prog: &quot;</span><br><span class="line">    killproc $nginx -HUP</span><br><span class="line">    RETVAL&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line">configtest() &#123;</span><br><span class="line">  $nginx -t -c $NGINX_CONF_FILE</span><br><span class="line">&#125;</span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<p>上面的脚本文件并不是自己写的，是nginx官方提供的。</p>
<p>地址：<a href="http://wiki.nginx.org/RedHatNginxInitScript" target="_blank" rel="noopener">http://wiki.nginx.org/RedHatNginxInitScript</a></p>
<p>注意：如果是自定义安装的nginx,修改根据实际情况修改安装路和配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx&#x3D;&quot;&#x2F;usr&#x2F;sbin&#x2F;nginx&quot; 修改成你的nginx执行程序的路径。比如我的是nginx&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&quot;</span><br><span class="line">NGINX_CONF_FILE&#x3D;&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot; 修改成你的配置文件的路径</span><br><span class="line">例如：NGINX_CONF_FILE&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改完成后保存脚本文件，wq 保存并退出</p>
<p><strong>第三步：设置nginx文件的权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod a+x &#x2F;etc&#x2F;init.d&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p>解释：a+x==&gt;all user can execute 所有用户可执行）的意思</p>
<p><strong>第四步：管理脚本</strong></p>
<p>到这里，我们就可以使用nginx脚本对服务进行管理了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;nginx start      启动服务</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;nginx stop       停止服务  # &#x2F;etc&#x2F;init.d&#x2F;nginx restart    重启服务</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;nginx status     查看服务的状态# &#x2F;etc&#x2F;init.d&#x2F;nginx reload     刷新配置文件</span><br></pre></td></tr></table></figure>

<h2 id="2-使用chkconfig管理"><a href="#2-使用chkconfig管理" class="headerlink" title="2 使用chkconfig管理"></a>2 使用chkconfig管理</h2><p>上面的方法完成了用脚本管理nginx服务的功能，但是还是不太方便，比如要设置nginx开机启动等。</p>
<p>这个时候我们可以使用chkconfig来进行管理。</p>
<p><strong>第一步：将nginx服务加入chkconfig管理列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig --add &#x2F;etc&#x2F;init.d&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p><strong>第二步：使用service管理服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># service nginx start    启动服务</span><br><span class="line"># service nginx stop     停止服务# service nginx restart  重启服务# service nginx status   查询服务的状态# service nginx relaod   刷新配置文</span><br></pre></td></tr></table></figure>

<p><strong>第三步：设置终端模式开机启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig nginx on</span><br></pre></td></tr></table></figure>



<h1 id="17-设置nginx开机自启动（centos7-4）"><a href="#17-设置nginx开机自启动（centos7-4）" class="headerlink" title="17 设置nginx开机自启动（centos7.4）"></a>17 设置nginx开机自启动（centos7.4）</h1><p> <strong>第一步：进入到/lib/systemd/system/目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iz2z init.d]# cd &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>第二步：创建nginx.service文件，并编辑</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim nginx.service</span><br></pre></td></tr></table></figure>

<p>内如如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx service</span><br><span class="line">After&#x3D;network.target </span><br><span class="line">   </span><br><span class="line">[Service] </span><br><span class="line">Type&#x3D;forking </span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s quit</span><br><span class="line">PrivateTmp&#x3D;true </span><br><span class="line">   </span><br><span class="line">[Install] </span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<p>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br><strong>注意</strong>：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p>
<p>保存退出。</p>
<p><strong>第三步：加入开机自启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>如果不想开机自启动了，可以使用下面的命令取消开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl disable nginx</span><br></pre></td></tr></table></figure>

<p><strong>第四步：服务的启动/停止/刷新配置文件/查看状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># systemctl start nginx.service　         启动nginx服务</span><br><span class="line"># systemctl stop nginx.service　          停止服务</span><br><span class="line"># systemctl restart nginx.service　       重新启动服务</span><br><span class="line"># systemctl list-units --type&#x3D;service     查看所有已启动的服务</span><br><span class="line"># systemctl status nginx.service          查看服务当前状态</span><br><span class="line"># systemctl enable nginx.service          设置开机自启动</span><br><span class="line"># systemctl disable nginx.service         停止开机自启动</span><br></pre></td></tr></table></figure>

<h2 id="一个常见的错误"><a href="#一个常见的错误" class="headerlink" title="一个常见的错误"></a><strong>一个常见的错误</strong></h2><h3 id="Warning-nginx-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units"><a href="#Warning-nginx-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units" class="headerlink" title="Warning: nginx.service changed on disk. Run ‘systemctl daemon-reload’ to reload units."></a>Warning: nginx.service changed on disk. Run ‘systemctl daemon-reload’ to reload units.</h3><p> 直接按照提示执行命令systemctl daemon-reload 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>



<h1 id="18-重启系统，再次启动nginx报错"><a href="#18-重启系统，再次启动nginx报错" class="headerlink" title="18 重启系统，再次启动nginx报错"></a>18 重启系统，再次启动nginx报错</h1><h2 id="1-故障现场"><a href="#1-故障现场" class="headerlink" title="1 故障现场"></a>1 故障现场</h2><p>之前在虚拟机centos6.5上面设置自启动之后，重新启动系统可以正常启动，也不会出错。</p>
<p>centos6.5的自启动设置见16部分知识点。</p>
<p>但是在centos7.4(阿里云上面），参照第17部分配置好了自启动。重启系统发现nginx并没有自启动</p>
<p>使用命名systemctl status nginx查看了一下状态，内容如下：</p>
<p><img src="/images/2020073130.png" alt="img"></p>
<p>然后我直接进入/usr/local/nginx/sbin目录下面，执行./nginx，出现了下面的错误提示：</p>
<p><img src="/images/2020073131.png" alt="img"></p>
<p>从这两个提示信息，可以大概看出告诉我们的就是找不到/var/run/nginx/目录下面的nginx.pid文件。</p>
<h2 id="2-故障解决"><a href="#2-故障解决" class="headerlink" title="2 故障解决"></a>2 故障解决</h2><p><strong>第一步：进入 cd /usr/local/nginx/conf/ 目录，编辑配置文件nginx.conf ；</strong></p>
<p>在配置文件中找到：#pid    logs/nginx.pid;</p>
<p><img src="/images/2020073132.png" alt="img"></p>
<p>将其修改为：去掉注释，修改成自己的路径</p>
<p><img src="/images/2020073133.png" alt="img"></p>
<p>修改完成保存退出</p>
<p><strong>第二步：创建目录/var/run/nginx/</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;var&#x2F;run&#x2F;nginx -p</span><br></pre></td></tr></table></figure>

<p><strong>第三步：启动nginx服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p>可以查看一下是否成功启动了</p>
<p><img src="/images/2020073134.png" alt="img"></p>
<h2 id="3-故障重现"><a href="#3-故障重现" class="headerlink" title="3 故障重现"></a>3 故障重现</h2><blockquote>
<p>[emerg] open() “/var/run/nginx/nginx.pid” failed (2: No such file or directory)处理</p>
</blockquote>
<p>测试发现，只要执行reboot命令重启，var/run/nginx，nginx这个文件夹都会被删除，</p>
<p>搞得每一次都要去建立nginx这个文件夹，简直麻烦到了极点，实在受不了。下面</p>
<p>继续来解决这个问题。</p>
<p><strong>第一步：进入 cd /usr/local/nginx/conf/ 目录，编辑配置文件nginx.conf ；</strong></p>
<p><img src="/images/2020073135.png" alt="img"></p>
<p><strong>第二步：在/usr/local/nginx目录下建立logs文件夹</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</span><br></pre></td></tr></table></figure>

<p><strong><img src="/images/2020073136.png" alt="img"></strong></p>
<p><strong>第三步：把/var/run/nginx/目录下的nginx.pid这个文件拷贝到第二步创建的logs文件夹里面。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp nginx.pid &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;</span><br></pre></td></tr></table></figure>

<p> <img src="/images/2020073137.png" alt="img"></p>
<p><strong>第四步：把logs这个文件夹在conf下也拷贝一份</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp -r logs conf</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073138.png" alt="img"></p>
<p><strong>第五步：修改权限/usr/local/nginx/logs/目录下面的nginx.pid文件的权限。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@iz2logs]# chmod 755 nginx.pid</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073139.png" alt="img"></p>
<p><strong>第六步：重启reboot</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure>

<p><strong>第六步：启动nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p><img src="/images/2020073140.png" alt="img"></p>
<p>这次是终于成功解决了，一边安装一边解决问题，到这里nginx总是算是可以自启动了，并且也不会重启后找不到nginx.pid文件。真的太不容易了。</p>
<p><strong>解决的原理：就是让它去另外一个地方找nginx.pid文件，</strong></p>
<p><strong>因为/var/run/nginx/nginx.pid这个文件总是重启就删除了</strong>。</p>
<h2 id="简单解决方案"><a href="#简单解决方案" class="headerlink" title="简单解决方案"></a>简单解决方案</h2><p>上面的过程有点繁琐了，实际可以直接按照下面的这个简单方法解决</p>
<p>修改nginx.conf文件如下：</p>
<p><img src="/images/2020073141.png" alt="img"></p>
<p>在/usr/local/nginx/目录下创建一个logs目录。</p>
<p>然后启动就可以了，并且重启也不会被删除。</p>
<p>这样下面的日志文件的配置也可以简化为去掉# error_log logs/error.log info; 前面的“#”就可以了</p>
<p>error_log logs/error.log info;</p>
<h1 id="19-配置日志文件的位置"><a href="#19-配置日志文件的位置" class="headerlink" title="19 配置日志文件的位置"></a>19 配置日志文件的位置</h1><p><strong>第一步：进入 cd /usr/local/nginx/conf/ 目录，编辑配置文件nginx.conf ；</strong></p>
<p><img src="/images/2020073142.png" alt="img"></p>
<p><strong>第二步：保证肯定有这个路径，可以直接创建一下这个配置的目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p &#x2F;var&#x2F;log&#x2F;nginx&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：刷新配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装VMware Tools</title>
    <url>/2020/08/03/ubuntu%E5%AE%89%E8%A3%85VMware%20Tools/</url>
    <content><![CDATA[<p>VMware Tools罕见问题的记录</p>
<a id="more"></a>

<p>VMware的安装非常简单，就不详细阐述了，这里主要是记录一个罕见的问题。</p>
<blockquote>
<p>报错：在解压wmware tools时ubuntu报出没有足够的空间提取的错误</p>
</blockquote>
<p>这里需要通过归档管理器打开文件<br><img src="/images/2020080301.png" alt="解压"><br>然后在解压安装即可<br><img src="/images/2020080302.png" alt="解压"></p>
<p>解压完成之后即可运行安装文件安装wmware tools</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录</title>
    <url>/2020/12/09/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>人民日报给90后的理财计划</title>
    <url>/2020/10/25/%E4%BA%BA%E6%B0%91%E6%97%A5%E6%8A%A5%E7%BB%9990%E5%90%8E%E7%9A%84%E7%90%86%E8%B4%A2%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>人民日报给90后的理财计划</p>
<a id="more"></a>

<h3 id="1-学会记账"><a href="#1-学会记账" class="headerlink" title="1.学会记账"></a>1.学会记账</h3><p><img src="/images/2020102501.png" alt="image"></p>
<h3 id="2-控制消费"><a href="#2-控制消费" class="headerlink" title="2.控制消费"></a>2.控制消费</h3><p><img src="/images/2020102502.png" alt="image"></p>
<h3 id="3-选择投资项目"><a href="#3-选择投资项目" class="headerlink" title="3.选择投资项目"></a>3.选择投资项目</h3><p><img src="/images/2020102503.png" alt="image"></p>
<h3 id="4-“梦想”消费单"><a href="#4-“梦想”消费单" class="headerlink" title="4.“梦想”消费单"></a>4.“梦想”消费单</h3><p><img src="/images/2020102504.png" alt="image"></p>
<h3 id="5-投资自己"><a href="#5-投资自己" class="headerlink" title="5.投资自己"></a>5.投资自己</h3><p><img src="/images/2020102505.png" alt="image"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><img src="/images/2020102506.png" alt="image-20201227160018479"></p>
]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>反射的理解</title>
    <url>/2020/10/23/%E5%8F%8D%E5%B0%84%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>实体类的4种类型</title>
    <url>/2020/10/31/%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%844%E7%A7%8D%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>实体类的4种类型总结</p>
<a id="more"></a>

<p>领域模型中的实体类可细分为4种类型：<code>VO、DTO、DO、PO</code></p>
<p>PO（Persistment Object）：持久化对象，表示持久层的数据结构；</p>
<p>DO（Domain Object）：领域对象，即业务实体对象；</p>
<p>DTO（Data Transfer Object）：数据传输对象，原来的目的是为EJB的分布式应用提供粗粒度的数据实体，以降低分布式调用的次数，提高分布式调用的性能，后来一般泛指用于展示层与服务层之间的数据传输对象，因此可以将DTO看成一个组合版的DO；</p>
<p>VO（View Object）：视图对象，用于展示层视图状态对应的对象。</p>
<p>从分层角度来说，PO、DO/DTO、VO分别属于持久层、服务层和展示层。对于简单模块来说，有时PO、DO和VO并没有什么区别，这时就没有必要定义DO和VO了，直接服用PO即可。</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>Domain Object</tag>
      </tags>
  </entry>
  <entry>
    <title>快速构建Java Web项目的开发环境</title>
    <url>/2020/11/20/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAJava-Web%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>Idea通过maven快速构建项目</p>
<a id="more"></a>

<h1 id="1-搭建CRM项目的开发环境"><a href="#1-搭建CRM项目的开发环境" class="headerlink" title="1.搭建CRM项目的开发环境"></a>1.搭建CRM项目的开发环境</h1><ul>
<li>设置字体</li>
<li>设置工作区的字符集为utf-8</li>
<li>设置basePath变量及base标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" +   <span class="attr">request.getServerPort</span>() + <span class="attr">request.getContextPath</span>() + "/";</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="2-创建Maven项目前的准备工作"><a href="#2-创建Maven项目前的准备工作" class="headerlink" title="2.创建Maven项目前的准备工作"></a>2.创建Maven项目前的准备工作</h1><p>使用settings引入本地仓库<img src="/images/2020112001.png" alt="image-20201120175318348"></p>
<p>打开settings.xml设置本地仓库位置</p>
<p><img src="/images/2020112002.png" alt=""></p>
<p>创建Maven web项目</p>
<p><img src="/images/2020112003.png" alt="image-20201120175508091"></p>
<p><img src="/images/2020112004.png" alt="image-20201120175542687"></p>
<p>新创建的Maven项目，目录结构如下：</p>
<p><img src="/images/2020112005.png" alt="image-20201120175616811"></p>
<p>将pom.xml中没有用的信息去除掉</p>
<p><strong>在main文件夹下建立java文件夹和resources文件夹</strong></p>
<p><strong>与main文件夹平级创建一个test文件夹</strong></p>
<p><strong>test文件夹下创建java文件夹和resources文件夹</strong></p>
<p><img src="/images/2020112006.png" alt="image-20201120175810912"></p>
<p><strong>注意：为文件夹赋予功能（颜色）后，文件夹才会生效</strong></p>
<p>将我们自己的web.xml模板导入</p>
<p>通过pom.xml导入我们需要的jar包</p>
<p>在pom.xml中加入构建资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>点击左侧Maven Projects，点击刷新</p>
<p><img src="/images/2020112007.png" alt="image-20201120180057366"></p>
<p>在resource路径下引入开发用的配置文件和属性文件</p>
<p>jdbc.properties（修改数据库名）</p>
<p>log4j.properties</p>
<p>mybatis-config.xml</p>
<p>SqlMapper.xml（建立后台包结构后加入该文件）</p>
<p>项目文件结构如下：</p>
<p><img src="/images/2020112008.png" alt="image-20201120180226721"></p>
<h1 id="3-创建一个数据库"><a href="#3-创建一个数据库" class="headerlink" title="3.创建一个数据库"></a>3.创建一个数据库</h1><p><img src="/images/2020112009.png" alt="image-20201120180410393"></p>
<ul>
<li><p>将项目原型拷贝到webapp目录下</p>
</li>
<li><p>启动Tomcat服务器，测试</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>快速构建SSM开发环境</title>
    <url>/2020/12/01/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BASSM%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>记录一下SSM的搭建过程。</p>
<a id="more"></a>

<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>先准备好搭建项目的基本环境</p>
<p>Intellij IDEA：2020.1.1</p>
<p>JDK：1.8</p>
<p>Maven：3.6.3</p>
<p>Tomcat：8.0及以上</p>
<p>下载安装好软件后，在idea软件设置里做好JDK、Maven和Tomcat的相关环境配置，这方面网上的资料很多，本文就不介绍了。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>打开idea，点击New - Project</p>
<p>找到Maven一栏，选择要搭建的Maven项目</p>
<p><img src="/images/2020120101.png" alt="image-20201201205918326"></p>
<p>填写下图信息GroupId和ArtifactId后，一步步next，最后finish完成</p>
<p><img src="/images/2020120102.png" alt="image-20201201205949186"></p>
<p>跳转到该界面，检查信息无误后选择finish</p>
<p><img src="/images/2020120103.png" alt="image-20201201210101088"></p>
<p>创建成功后，可以看到项目是这样的目录结构</p>
<p><img src="/images/2020120104.png" alt="image-20201201210240195"></p>
<h2 id="项目初始配置"><a href="#项目初始配置" class="headerlink" title="项目初始配置"></a>项目初始配置</h2><p>除了配置相关依赖的pom.xml，目录中还有一个文件夹src，src的main目录提供了一个webapp文件夹，webapp文件夹下有一个WEB-INF文件夹，放置的是前端页面的文件，以及web.xml文件。</p>
<p>除了模版提供的目录结构，为了后面项目能成功运行，我们还需要添加一些文件夹，让项目的目录结构变成这样：</p>
<p><img src="/images/2020120105.png" alt="image-20201201210526932"></p>
<h2 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h2><p>简单创建一个user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号码'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf<span class="number">-8</span>;</span><br></pre></td></tr></table></figure>



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.liuurick<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssmdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssmdemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 用来设置版本号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">srping.version</span>&gt;</span>4.0.2.RELEASE<span class="tag">&lt;/<span class="name">srping.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 用到的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring框架包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;srping.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring框架包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis框架包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis框架包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jstl标签类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- java编译插件,如果maven的设置里配置好jdk版本就不用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>注：以下四个配置文件都是放置在resources文件夹下</strong></p>
<h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#日志输出级别</span><br><span class="line">log4j.rootLogger=debug,stdout,D,E</span><br><span class="line"></span><br><span class="line">#设置stdout的日志输出控制台</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">#输出日志到控制台的方式，默认为System.out</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">#设置使用灵活布局</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#灵活定义输出格式</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; -[%p]  method:[%c (%rms)] - %m%n</span><br></pre></td></tr></table></figure>

<h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver    </span><br><span class="line">url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=false    </span><br><span class="line">#数据库的用户名</span><br><span class="line">username=xxx     </span><br><span class="line">#数据库的密码，别像我一样不设置</span><br><span class="line">password=xxx          </span><br><span class="line">#定义初始连接数</span><br><span class="line">initialSize=0    </span><br><span class="line">#定义最大连接数</span><br><span class="line">maxActive=20    </span><br><span class="line">#定义最大空闲</span><br><span class="line">maxIdle=20    </span><br><span class="line">#定义最小空闲</span><br><span class="line">minIdle=1    </span><br><span class="line">#定义最长等待时间</span><br><span class="line">maxWait=60000</span><br></pre></td></tr></table></figure>



<h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><p>这是Spring的核心配置文件，包括Spring结合Mybatis和数据源的配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描model包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.model"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mapper动态代理开发，扫描dao接口包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.liuurick.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描注解，这样com.liuurick包下的文件都能被扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.liuurick"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源默认servlet配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置返回视图的路径，以及识别后缀是jsp文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>该文件不是放在resources，而是webapp的WEB-INF文件夹下，文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>mvcDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目的欢迎页，项目运行起来后访问的页面--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 注册ServletContext监听器，创建容器对象，并且将ApplicationContext对象放到Application域中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定spring核心配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 解决乱码的过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定配置文件位置和名称 如果不设置,默认找/WEB-INF/&lt;servlet-name&gt;-servlet.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>上面的配置文件编写好之后，其实我们就可以尝试着启动项目了，<strong>启动项目前先把applicationContext.xml的内容都注释了</strong>，然后就可以创建运行环境了。</p>
<p>点击idea右上角的 Edit Configurations…</p>
<p><img src="/images/2020120106.png" alt="img"></p>
<p>选择Tomcat Server - Local，</p>
<p><img src="/images/2020120107.png" alt="img"></p>
<p>编辑好项目的启动信息，包括项目名，jdk版本，tomcat以及端口</p>
<p><img src="/images/2020120108.png" alt="img"></p>
<p>选择Deployment，添加Atifact，选择第二项，否则Tomcat运行会报错</p>
<p><img src="/images/2020120109.png" alt="img"></p>
<p>保存后，启动项目，成功后在浏览器输入<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080</a>，返回结果如下：<br><img src="/images/2020120110.png" alt="img"></p>
<p>这是index.jsp文件中的内容，因为index.jsp是启动页，所以项目启动后返回的结果是启动页的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐系统算法整理</title>
    <url>/2020/12/08/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>推荐系统算法整理</p>
<a id="more"></a>

<h1 id="个性化推荐"><a href="#个性化推荐" class="headerlink" title="个性化推荐"></a>个性化推荐</h1><p>场景决定推荐规则</p>
<h1 id="推荐分类"><a href="#推荐分类" class="headerlink" title="推荐分类"></a>推荐分类</h1><h2 id="1-基于规则的推荐"><a href="#1-基于规则的推荐" class="headerlink" title="1.基于规则的推荐"></a>1.基于规则的推荐</h2><p>规则模型：规则定义，简单的算术公式</p>
<h2 id="2-基于传统机器学习的推荐"><a href="#2-基于传统机器学习的推荐" class="headerlink" title="2.基于传统机器学习的推荐"></a>2.基于传统机器学习的推荐</h2><p>个性化召回als算法原理：</p>
<blockquote>
<p><a href="https://github.com/huangyueranbbc/Spark_ALS" target="_blank" rel="noopener">https://github.com/huangyueranbbc/Spark_ALS</a></p>
</blockquote>
<p>个性化排序lr算法原理</p>
<blockquote>
<p><a href="https://github.com/wuxinping1992/cf_gbdt_lr" target="_blank" rel="noopener">https://github.com/wuxinping1992/cf_gbdt_lr</a></p>
</blockquote>
<p>点击率预估模型算法</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/63973457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63973457</a></p>
</blockquote>
<p>推荐算法的好坏取决于用户历史数据</p>
<h2 id="3-基于深度学习的推荐"><a href="#3-基于深度学习的推荐" class="headerlink" title="3.基于深度学习的推荐"></a>3.基于深度学习的推荐</h2><p>深度学习是机器学习的升级版，也是基于神经网络的进化，可以更深层次的发现用户的需求，但是对数据的真实性要求更高</p>
<h1 id="推荐模型"><a href="#推荐模型" class="headerlink" title="推荐模型"></a>推荐模型</h1><p><strong>规则模型：</strong>规则定义，简单的算术公式</p>
<p><strong>机器学习模型训练：</strong>数据训练后的算术公式</p>
<blockquote>
<p>通过历史行为的数据，去训练出算术公式，训练出来的算术公式可以用来做机器学习模型预测</p>
</blockquote>
<p><strong>机器学习模型预测：</strong>待预测数据经过训练模型算术公式后的结果</p>
<h1 id="模型评价指标"><a href="#模型评价指标" class="headerlink" title="模型评价指标"></a>模型评价指标</h1><p><strong>离线指标：</strong>查全率，差准率，auc等</p>
<blockquote>
<p>80%的数据用做模型训练得出算术公式，然后用剩下20%的数据用做模型预测，得到的结果和真正的结果作比较，这样可以衡量算法公式的优劣</p>
</blockquote>
<p><strong>在线指标：</strong>点击率，交易转化率等</p>
<blockquote>
<p>在线指标远比离线指标重要</p>
</blockquote>
<p><strong>A/B测试：</strong>简单来说，就是为同一个目标制定两个方案（比如两个页面），让一部分用户使用 A 方案，另一部分用户使用 B 方案，记录下用户的使用情况，看哪个方案更符合设计目标。</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/20045543" target="_blank" rel="noopener">https://www.zhihu.com/question/20045543</a></p>
</blockquote>
<h1 id="推荐系统架构"><a href="#推荐系统架构" class="headerlink" title="推荐系统架构"></a>推荐系统架构</h1><p><img src="/images/2020120801.png" alt="image-20201222155116005"></p>
<h1 id="个性化召回算法ALS"><a href="#个性化召回算法ALS" class="headerlink" title="个性化召回算法ALS"></a>个性化召回算法ALS</h1><blockquote>
<p>ALS（Alternating Least Squares,）:最小二乘法，利用矩阵分解的结果无限逼近现有数据，得到隐含特征，最后利用隐含特征预测其余结果</p>
<p><a href="https://blog.csdn.net/qq_37142346/article/details/80472088" target="_blank" rel="noopener">https://blog.csdn.net/qq_37142346/article/details/80472088</a></p>
</blockquote>
<p><strong>演算步骤：</strong></p>
<p><img src="/images/2020120802.png" alt="image-20201222164538730"></p>
<p>User 4行  Product  3列</p>
<blockquote>
<p>游览行为—1分</p>
<p>游览+购买行为—3分</p>
</blockquote>
<p><strong>预测空白区域：</strong></p>
<p><img src="/images/2020120803.png" alt="image-20201222163717605"></p>
<p>User 4行 5列隐式特征</p>
<p><img src="/images/2020120804.png" alt="image-20201222163132072"></p>
<p>Product 3行   5列隐式特征</p>
<p>User矩阵*Product的转置矩阵，也就是User的f乘Product，获取无限逼近于真实数据的分数，同时预测其余节点的分数，排序后输出</p>
<p><img src="/images/2020120805.png" alt="image-20201222163145278"></p>
<h1 id="个性化排序算法LR"><a href="#个性化排序算法LR" class="headerlink" title="个性化排序算法LR"></a>个性化排序算法LR</h1><blockquote>
<p>逻辑回归(Logistic Regression, <em>LR</em>)又称为逻辑回归分析,是分类和预测算法中的一种</p>
<p>Y=ax1+bx2+cx3+dx4+…..   x为特征，a,b,c,d为权重  </p>
<p>排序的问题在某些意义上也可以看成是点击率预估，公式中x1x2x3这些可以看成是用户的特征，例如x1是年龄，x2是性别等等，在公式中，每个特征都有一个权重a，b，c，d，e等，结果会得到一个Y，越趋近1代表点击概率越大。这是个预测的过程。</p>
</blockquote>
<p><img src="/images/2020120806.png" alt="img"></p>
<p>LR算法也就是要算出a，b，c，d，e，在大数据平台会采集Y的样本，可能是1也可能是0，</p>
<p>在上面中，<strong>蓝色</strong>为正样本，<strong>紫色</strong>为负样本，也LR需要推算出红线，等学习出红线以后，就可以做预测了，新进来一个x点，可以根据红线来推算这个点是正样本的概率大还是负样本的概率大。这就是比较简单的逻辑回归的排序算法原理。</p>
<h1 id="决策树算法"><a href="#决策树算法" class="headerlink" title="决策树算法"></a>决策树算法</h1><blockquote>
<p>决策树算法，事实上是一个多重分类选择器组合承德结果，也就是输入一个参数，根据这个参数返回1/0，举个例子的话，可以想象成以前杂志上的那种心理测试题。通过多个选择，获得一个结果。</p>
</blockquote>
<p>那么如何定义决策树的每个节点的特征呢？原则上越能分出绝大部分特征的越往上。</p>
<p>如何衡量？数学上有一个名词叫做信息熵，来衡量信息量的大小，也就是对随机变量不确定的一个衡量，熵越大，不确定性越大。</p>
<p>例如：天气有晴天、多云、雨天，温度有冷、热、适中，湿度有高、中等，风有有风、无风，最后有个结果，是否出去玩。</p>
<p>那么我们如何构建这个抉择树？我们选取熵大的节点放在上面，依次往下。离散特征直接按照分类选择器，连续特征可以用二分、三分等分类方式进，例如小20岁，20-40等等。</p>
<p><strong>决策树的缺点</strong>：样本特征过多时，树的高度太高。样本特征本身有问题时，如果过拟合，会对预测产生偏差。</p>
<p>为了避免决策树的缺点，我们对决策树衍生出了两种算法：<strong>随机森林法</strong>和<strong>GBDT</strong></p>
<p><strong>随机森林：</strong>通过随机的选择样本（放回抽样），也就是随机选择几个样本，几个特征，生成一个决策树，放回去再随机选择样本生成决策树，这样就可以生成随机森林。最后在测试阶段，把所有决策树的结果汇总到一起取平均数。当然，随机的缺点也就是不确定性，既是优势、又是劣势。</p>
<p>基于这个，衍生出了另一种算法：GBDT</p>
<p>顺序为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.从初始训练集中得到一个基准学习器。</span><br><span class="line">2.用基准学习器预测训练样本并调整做错样本属性的权重。</span><br><span class="line">3.反复迭代生成T个学习器</span><br><span class="line">4.T个学习期串行预测加权结合</span><br></pre></td></tr></table></figure>

<p>对于GBDT，它是以第一棵树作为基准，逐步调整，所以这样出来的树也就更准确了。</p>
<h1 id="机器学习模型实战"><a href="#机器学习模型实战" class="headerlink" title="机器学习模型实战"></a>机器学习模型实战</h1><h2 id="Spark原理"><a href="#Spark原理" class="headerlink" title="Spark原理"></a>Spark原理</h2><blockquote>
<p>Spark是为大规模数据处理而设计的快速通用的计算引擎。</p>
<p>他有很多的库，例如Spark core、Spark Sql、Spark on Hive、Spark Streaming等。还有机器学习库例如</p>
<p>Spark mllib：机器学习库。</p>
<p><a href="https://www.cnblogs.com/xuliangxing/p/7279662.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliangxing/p/7279662.html</a></p>
</blockquote>
<p><strong>Map Reduce概念：</strong></p>
<p>现在有一个场景，有一个list，里面存的是商品实体，现在需要将这些实体中的id提取到另一个list中，现有阶段就是遍历然后把id提取出来，不管是for还是lambda还是别的方式。但是如果这个list里面的数量非常巨大，那么在jvm内存中做这些事情是不现实的，因此，有了Spark core的Map Reduce，可以将复杂的操作封装成RDD的操作，使我们可以很轻易的进行数据转换。</p>
<p>那么它的原理也很简单，假如有十万条数据，那么spark会拆分成若干条，然后分发给对应的机器，map以后再把所有的数据合并，进行计算如max、min、avg等，然后把结果发给目标机器。</p>
<p>那么对于数据库来说，假如分了三个库，每个库里面都有100w条数据，spark有一个spark sql的库，可以根据很简单的语句 例如：select sum(price) from shop来去获取三个库的数据并返回结果。</p>
<p>Spark Streaming是指假如有个数据采集的系统，数据是以流式byte[]的形式发送给spark，定义4个为一个数字，那么spark就可以通过流式处理的方案处理数据运算。</p>
]]></content>
  </entry>
  <entry>
    <title>浅析Java平台无关性的实现</title>
    <url>/2020/10/22/%E6%B5%85%E6%9E%90Java%E5%B9%B3%E5%8F%B0%E6%97%A0%E5%85%B3%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>    

<p>​    平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p>
<p>​    简而言之，Java是通过<code>javac</code>将java代码编译成字节码文件，这也是java跨平台的基础，接着虚拟机将class文件翻译成机器可识别的机器码。这也就实现了java的跨平台性。</p>
<h3 id="通过代码来理解"><a href="#通过代码来理解" class="headerlink" title="通过代码来理解"></a>通过代码来理解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bytecode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">        ++j;</span><br><span class="line">        System.out.println(<span class="string">"i="</span>+i+<span class="string">"-----j="</span>+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反编译之后：</p>
<p>可以看到JVM帮我们做了很多事情</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bytecode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">bytecode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> var1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> var2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var3 = var1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var4 = var2 + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + var3 + <span class="string">"-----j="</span> + var4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>添加系统调用</title>
    <url>/2019/08/18/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>操作系统课设</p>
<a id="more"></a>

<h4 id="1-下载一个内核"><a href="#1-下载一个内核" class="headerlink" title="1.下载一个内核"></a>1.下载一个内核</h4><p>将内核文件下载到/usr/src路径下</p>
<p>官方下载地址：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/</a></p>
<p>为了能够下载快一点，这里我选择的是在上海交大的开源网站</p>
<p><strong>下载命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/linux-4.18.16.tar.xz</span><br></pre></td></tr></table></figure>



<p><strong>注:</strong>如果没有wget,请用这个命令下载：yum -y install wget</p>
<h4 id="2-解压内核源码"><a href="#2-解压内核源码" class="headerlink" title="2.解压内核源码"></a>2.解压内核源码</h4><p><code>tar -xvf linux-4.18.16.tar.xz</code></p>
<p><strong>注:</strong>不要在windows上解压上传到centos中，因为windows对文件名大小写不敏感，文件会相互覆盖。而Linux则不会。</p>
<h4 id="3-安装依赖软件包"><a href="#3-安装依赖软件包" class="headerlink" title="3.安装依赖软件包"></a>3.安装依赖软件包</h4><p>安装CentOS7的依赖软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc ncurses-devel bison flex bc elfutils-libelf-devel openssl-devel</span><br></pre></td></tr></table></figure>



<h4 id="4-添加系统调用号"><a href="#4-添加系统调用号" class="headerlink" title="4.添加系统调用号"></a>4.添加系统调用号</h4><p><code>vim linux-4.18.16/arch/x86/entry/syscalls/syscall_64.tbl</code></p>
<p>增加此行：</p>
<p><code>335   common   mycall     __x64_sys_mycall</code></p>
<p><img src="/images/2018081801.png" alt="img"></p>
<h4 id="5-添加系统调用程序的声明"><a href="#5-添加系统调用程序的声明" class="headerlink" title="5.添加系统调用程序的声明"></a>5.添加系统调用程序的声明</h4><p><code>vim linux-4.18.16/include/linux/syscalls.h</code></p>
<p>增加此行：</p>
<p><code>asmlinkage long sys_mycall(int number);</code></p>
<p><img src="/images/2018081802.png" alt="img"> </p>
<h4 id="6-编写系统调用函数"><a href="#6-编写系统调用函数" class="headerlink" title="6.编写系统调用函数"></a>6.编写系统调用函数</h4><p><code>vim linux-4.18.16/kernel/sys.c</code></p>
<p>增加以下函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE1(mycall,int,number)&#123;</span><br><span class="line">	int result=number*number*number;</span><br><span class="line">	printk(<span class="string">"The result is %d\n"</span>,result);</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<p><img src="/images/2018081803.png" alt="img"> </p>
<h4 id="7-开始编译内核"><a href="#7-开始编译内核" class="headerlink" title="7.开始编译内核"></a>7.开始编译内核</h4><p>编译内核分为以下几个步骤：</p>
<p>1)    进入内核文件夹</p>
<p><code>cd linux-4.18.16/</code></p>
<p>2)    修改文件可执行权限</p>
<p><code>chmod +x ./scripts/gcc-version.sh</code></p>
<p>3)    删除以前编译产生的垃圾文件</p>
<p><code>make mrproper</code></p>
<p><code>make clean</code></p>
<p><strong>注：</strong>可能有些同学会遇到如下问题：</p>
<p><img src="/images/2018081804.png" alt="img"><strong>解决方法：</strong></p>
<p>安装：</p>
<p><code>yum -y install gcc automake autoconf libtool make</code></p>
<p>安装g++:</p>
<p><code>yum install gcc gcc-c++</code></p>
<p>4)    拷贝文件(.config)</p>
<p><code>cp /boot/config-* .config</code> </p>
<p>5)    选择Load和Save保存再Exit退出。</p>
<p><code>make menuconfig</code>      </p>
<p><img src="/images/2018081805.png" alt=""> </p>
<p>6)    开始编译内核（4个线程跑会快一些）：</p>
<p><code>make -j 4</code>  </p>
<p>这里大概需要一个小时</p>
<p>7)    安装模块</p>
<p><code>make modules_install</code>     </p>
<p>8)    安装内核</p>
<p><code>make install</code>         </p>
<h4 id="8-重启选择相应的系统"><a href="#8-重启选择相应的系统" class="headerlink" title="8.重启选择相应的系统"></a>8.重启选择相应的系统</h4><p><img src="/images/2018081806.png" alt="img"> </p>
<h4 id="9-测试"><a href="#9-测试" class="headerlink" title="9. 测试:"></a>9. 测试:</h4><p>dmesg用来显示内核环缓冲区（kernel-ring buffer）内容，内核将各种消息存放在这里。在系统引导时，内核将与硬件和模块初始化相关的信息填到这个缓冲区中。内核环缓冲区中的消息对于诊断系统问题 通常非常有用。在运行dmesg时，它显示大量信息。通常通过less或grep使用管道查看dmesg的输出，这样可以更容易找到待查信息。例如，如果发现硬盘性能低下，可以使用dmesg来检查它们是否运行在DMA模式：</p>
<p>首先创建test文件：</p>
<p>touch test.c</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> syscall(335,4);</span><br><span class="line"> printf(&quot;hello&quot;);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后编译源文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc test.c -o test</span><br><span class="line">.&#x2F;test</span><br><span class="line">最后再输入dmesg</span><br></pre></td></tr></table></figure>



<p>dmesg相关指令：</p>
<p><img src="/images/2018081807.png" alt="img">dmesg相关指令：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>短信登录注册功能的实现</title>
    <url>/2020/11/29/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201129223819676.png" alt="image-20201129223819676"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>短信服务</tag>
      </tags>
  </entry>
  <entry>
    <title>自学感悟</title>
    <url>/2020/12/27/%E8%87%AA%E5%AD%A6%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>自学Java这么久，总感觉哪里不得劲，明明什么都学了，却感觉啥都不会，哎。。。。希望如达克效应认知曲线所说的一样，自己处于第三阶段？</p>
<a id="more"></a>

<p><img src="/images/2020122702.png" alt="img"></p>
<p><strong>附上Java后端学习路线：</strong></p>
<p><img src="/images/2020122701.png" alt="image-20201227155519341"></p>
]]></content>
  </entry>
  <entry>
    <title>记一个小小的强迫症</title>
    <url>/2020/09/27/%E8%AE%B0%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B0%8F%E7%9A%84%E5%BC%BA%E8%BF%AB%E7%97%87/</url>
    <content><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><a id="more"></a>

<p>在idea中经常会碰到这样的问题</p>
<blockquote>
<p>Could not autowire. No beans of ‘xxxx’ type found.. </p>
</blockquote>
<p>项目工程并没有报错提示，仅仅是在实际java文件中飙红，说实话看着真的很难受，心理不得劲</p>
<p>解决方法还是蛮简单的，打开setting即可<br>Editor-&gt;Inspections-&gt;Spring Core-&gt;Code-&gt;Autowiring for bean class<br>将Severvty改成warning就可以了</p>
]]></content>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>读《深入浅出MyBatis技术原理与实战》</title>
    <url>/2020/12/20/%E8%AF%BB%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAMyBatis%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8B/</url>
    <content><![CDATA[<p>1.MyBatis简介</p>
<p>2 MyBatis入门</p>
<p>3 配置</p>
<p>4 映射器</p>
<p>5 动态SQL</p>
<p>6 MyBatis的解析和运行原理</p>
<p>7 插件</p>
<p>8 MyBatis-Spring</p>
<p>9 实用的场景</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>读《解读基金：我的投资观与实践》</title>
    <url>/2020/12/07/%E8%AF%BB%E3%80%8A%E8%A7%A3%E8%AF%BB%E5%9F%BA%E9%87%91%EF%BC%9A%E6%88%91%E7%9A%84%E6%8A%95%E8%B5%84%E8%A7%82%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B/</url>
    <content><![CDATA[<p>读《解读基金：我的投资观与实践》总结</p>
<a id="more"></a>

<h1 id="第一章：投资的准备"><a href="#第一章：投资的准备" class="headerlink" title="第一章：投资的准备"></a>第一章：投资的准备</h1><p>1.咱们该投资吗</p>
<p>2.什么是开放式基金</p>
<p>3.态度决定一切</p>
<h1 id="第二章-三部曲之一：投资目标的确定"><a href="#第二章-三部曲之一：投资目标的确定" class="headerlink" title="第二章 三部曲之一：投资目标的确定"></a>第二章 三部曲之一：投资目标的确定</h1><p>1.基金的风险是什么</p>
<p>2.拿多少钱来投资</p>
<p>3.让时间成为朋友</p>
<blockquote>
<p>一个25岁才开始工作的年轻人，如果他试图在60岁退休的时候有100万元的资产，他只需用一个非常简单的办法：如果按照<strong>平均年收益12%</strong>来计算，他只要<strong>每月投资175元</strong>，那在60岁的时候，他的投资账户上就有101万元，而实际投入资本只是7.35万元。但对一个40岁的人来讲，要每月投资1000元，在同样的收益情况下，才能在60岁的时候有97万元，而他的实际投资成本却是24万元。为了达到同样的目标，多拿出来了14万元，多付出了两倍的成本，而这一切，仅仅是因为投资晚了15年。<br>如果进行一次性投资，差距会更大。25岁的时候，一次性投资2万元，按12%的复利增长，60岁的时候，会有105万元；而如果在40岁的时候才开始投2万元，60岁的时候，只有19万元。差距达到4倍多。</p>
<p>在汇丰晋信基金公司推出的小册子——《十大投资金律》中有一个故事：陈先生20岁起<strong>每个月投资500元</strong>买基金。假设平均<strong>年报酬率是10%</strong>，他投资7年就不再扣款，然后让本金和获利一路成长，到60岁退休的时候，本利已达162万元。王先生则26岁时才开始投资，同样每个月投入500元，是10%的年报酬率。他整整花了33年持续扣款，到60岁时本利累计才154万元！相比之下，王先生投资才晚了7年，却要追赶一辈子。</p>
<p>上面几个案例都说明了一个问题，<strong>投资开始得越早，最后的收益就越多</strong>。或者说投资开始得越早，咱们为了达到同样的收益，付出的成本就越小。而且，两种情况的差距是如此之大，简直是不算不知道，一算吓一跳。<br><strong>在基金的风险里面，我们已经知道，随着时间的推移，投资的风险越来越小，但短期波动永远都是存在的。</strong></p>
</blockquote>
<p>4.复利计算的“72法则”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“72法则”是计算翻番的时间</span><br><span class="line">“115法则”是计算3倍所耗费的时间</span><br></pre></td></tr></table></figure>

<p>简而言之就是<strong>72/年收益率</strong></p>
<blockquote>
<p>很多人都觉得复利的计算很麻烦，的确也是这样。如果年收益是x%，那n年以后的收益是（1+x%）n。这样，没有计算器，恐怕就很难计算了。<br>前面说过的“72法则”经常用来做复利的近似计算，用来计算在给定年收益的情况下，大约需要多少年，你的投资才会翻倍。<br>举例说明：<br>如年收益是5%，那72/5=14.4，也就是约14.4年可以将投资翻番（如果用标准公式计算，结果为14.2年）；<br>如果年收益为7%，72/7=10.3，也就是约10.3年投资可以翻一番（用公式计算为10.24年）；<br>如果年收益为10%，72/10=7.2，也就是约7.2年投资可以翻一番（用公式计算为7.27年）；<br>……<br>如果年收益为x%，那翻番需要的年数就是72/x。这就是所谓的“72法则”。<br>这样很容易算出如果年收益为12%，翻番需用的年数就是6年；而如果收益是15%，翻番的时间就是5年。这样也很容易算出，如果收益是12%，那18年就可以翻三番，也就是8倍；如果收益是15%，那20年可以翻四番，也就是16倍。<br>还有一个“115法则”。“72法则”是计算翻番的时间，而“115法则”是计算1000元变成3000元所耗费的时间，也就是变成3倍所耗费的时间。计算方法还是一样，115/x就是本金变成3倍所耗费的年数。如收益是10%，那1000元变成3000元所耗费的时间就是115/10=11.5年。<br>表2-1对照了在一个特定利率的情况下，精确计算投资翻番的实际年限和“72法则”计算的结果。从中可以看出，对于年增长率很大或很小的复利，误差就比较大了，但作为估算的参照目标是没有问题的</p>
</blockquote>
<p><img src="/images/2020120701.png" alt="img"></p>
<h1 id="第三章-“三部曲”之二：基金品种的选择"><a href="#第三章-“三部曲”之二：基金品种的选择" class="headerlink" title="第三章 “三部曲”之二：基金品种的选择"></a>第三章 “三部曲”之二：基金品种的选择</h1><p>最好的基金评价网站—–<strong>晨星网</strong></p>
<p>买基金要先选择基金公司—–》然后是基金经理—–》最后才是基金</p>
<h1 id="第四章-“三部曲”之三：操作方法的实施"><a href="#第四章-“三部曲”之三：操作方法的实施" class="headerlink" title="第四章 “三部曲”之三：操作方法的实施"></a>第四章 “三部曲”之三：操作方法的实施</h1><p>1.红利再投资</p>
<p>2.不要预测市场和波段操作</p>
<p>3.长期持有才是王道</p>
<p>4.什么时候赎回基金没有特定的要求，最好自己定一个目标，达到了目标再赎回。比如定投基金是为了自己退休，那么长期持有30年也没有什么坏处。</p>
<h1 id="第五章-我的投资实践"><a href="#第五章-我的投资实践" class="headerlink" title="第五章 我的投资实践"></a>第五章 我的投资实践</h1>]]></content>
      <categories>
        <category>理财</category>
      </categories>
      <tags>
        <tag>解读基金</tag>
      </tags>
  </entry>
  <entry>
    <title>通用型支付系统</title>
    <url>/2020/11/19/%E9%80%9A%E7%94%A8%E5%9E%8B%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>通用型支付系统的实现</p>
<a id="more"></a>

<h1 id="一、系统概述"><a href="#一、系统概述" class="headerlink" title="一、系统概述"></a>一、系统概述</h1><p>下单–》支付</p>
<p><img src="/images/2020111901.png" alt="image-20201119114332792"></p>
<p>支付结果：</p>
<p><img src="/images/2020111902.png" alt="image-20201119114412609"></p>
<h1 id="二、数据库设计"><a href="#二、数据库设计" class="headerlink" title="二、数据库设计"></a>二、数据库设计</h1><ul>
<li><p>表关系</p>
<p><img src="C:%5CUsers%5Cadmin%5CDesktop%5Cblog%5Csource%5Cimages%5C2020111903.png" alt="2020111903"></p>
</li>
<li><p>唯一索引</p>
</li>
<li><p>单索引及组合索引</p>
<p>加快查询速度</p>
<p>订单号，user_id来查</p>
</li>
<li><p>时间戳</p>
</li>
</ul>
<h1 id="三、支付系统"><a href="#三、支付系统" class="headerlink" title="三、支付系统"></a>三、支付系统</h1><p>消息队列MQ应用：业务解耦，实现支付高性能</p>
<h2 id="1-支付知识普及"><a href="#1-支付知识普及" class="headerlink" title="1.支付知识普及"></a>1.支付知识普及</h2><h3 id="1-1-支付场景"><a href="#1-1-支付场景" class="headerlink" title="1.1 支付场景"></a>1.1 支付场景</h3><h4 id="微信支付场景"><a href="#微信支付场景" class="headerlink" title="微信支付场景"></a>微信支付场景</h4><p><img src="/images/2020111905.png" alt="image-20201124185915599"></p>
<p><strong>付款码支付：</strong>主要用于商户收银员用扫码设备扫描用户的条码/二维码支付。超市中很常见</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=5_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=5_1</a></p>
<p><strong>JSAPI支付：</strong>商户已有H5商城网站，用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1</a></p>
<p><strong>Native支付：</strong>用户扫描商户展示在各种场景的二维码进行支付。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p>
<p><strong>APP支付：</strong>适用于商户在移动端APP中集成微信支付功能。</p>
<p>商户APP调用微信提供的SDK调用微信支付模块，商户APP会跳转到微信中完成支付，支付完后跳回到商户APP内，最后展示支付结果。目前微信支付支持手机系统有：IOS（苹果）、Android（安卓）和WP（Windows Phone）。</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1</a></p>
<p><strong>H5支付：</strong>是指商户在微信客户端外的移动端网页展示商品或服务，用户在前述页面确认使用微信支付时，商户发起本服务呼起微信客户端进行支付。</p>
<p>主要用于触屏版的手机浏览器请求微信支付的场景。可以方便的从外部浏览器唤起微信支付。</p>
<p><strong>提醒：</strong>H5支付不建议在APP端使用，如需要在APP中使用微信支付，请接APP支付</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1</a></p>
<p><strong>小程序支付：</strong>如果开发者已做过JSAPI或JSSDK调起微信支付，接入小程序支付非常相似，以下是三种接入方式的对比：</p>
<p>详细介绍网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1</a></p>
<p><strong>刷脸支付：</strong><a href="https://pay.weixin.qq.com/wiki/doc/wxfacepay/" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/wxfacepay/</a></p>
<h4 id="支付宝支付场景"><a href="#支付宝支付场景" class="headerlink" title="支付宝支付场景"></a>支付宝支付场景</h4><p>支付宝支付和微信支付大致相似，平时用的最多的也就是<strong>当面付</strong></p>
<p><img src="/images/2020111906.png" alt="image-20201129112417755"></p>
<p>官方文档：<a href="https://opendocs.alipay.com/open/194/105072" target="_blank" rel="noopener">https://opendocs.alipay.com/open/194/105072</a></p>
<h3 id="1-2-名词解释"><a href="#1-2-名词解释" class="headerlink" title="1.2 名词解释"></a>1.2 名词解释</h3><h4 id="微信："><a href="#微信：" class="headerlink" title="微信："></a>微信：</h4><p><a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=2_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=2_2</a></p>
<h4 id="支付宝："><a href="#支付宝：" class="headerlink" title="支付宝："></a>支付宝：</h4><table>
<thead>
<tr>
<th>配置参数</th>
<th>示例值解释</th>
<th>获取方式/示例值</th>
</tr>
</thead>
<tbody><tr>
<td>URL</td>
<td>支付宝网关（固定）</td>
<td><a href="https://openapi.alipay.com/gateway.do" target="_blank" rel="noopener">https://openapi.alipay.com/gateway.do</a></td>
</tr>
<tr>
<td>APPID</td>
<td>APPID 即创建应用后生成</td>
<td>获取见上方 创建应用</td>
</tr>
<tr>
<td>APP_PRIVATE_KEY</td>
<td>开发者私钥，由开发者自己生成</td>
<td>获取见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>FORMAT</td>
<td>参数返回格式，只支持 json</td>
<td>json（固定）</td>
</tr>
<tr>
<td>CHARSET</td>
<td>编码集，支持 GBK/UTF-8</td>
<td>开发者根据实际工程编码配置</td>
</tr>
<tr>
<td>ALIPAY_PUBLIC_KEY</td>
<td>支付宝公钥，由支付宝生成</td>
<td>获取详见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>SIGN_TYPE</td>
<td>商户生成签名字符串所使用的签名算法类型，目前支持 RSA2 和 RSA，推荐使用 RSA2</td>
<td>RSA2</td>
</tr>
</tbody></table>
<p>时序图：</p>
<p><img src="/images/2020111907.png" alt="电脑网站支付.png"></p>
<h3 id="1-3-同步-异步支付"><a href="#1-3-同步-异步支付" class="headerlink" title="1.3 同步/异步支付"></a>1.3 同步/异步支付</h3><blockquote>
<p><a href="https://blog.csdn.net/shiyong1949/article/details/80854656" target="_blank" rel="noopener">https://blog.csdn.net/shiyong1949/article/details/80854656</a></p>
</blockquote>
<p>异步与同步的区别简而言之就是一个需要等待，一个不需要等待。同步固然是好，但是涉及到支付金钱等方面还是要以安全为主。所以支付以异步为准。</p>
<h2 id="2-通用型支付系统开发"><a href="#2-通用型支付系统开发" class="headerlink" title="2.通用型支付系统开发"></a>2.通用型支付系统开发</h2><p><img src="/images/2020111908.png" alt="image-20201124194214540"></p>
<p>参考支付demo</p>
<p><a href="https://github.com/Pay-Group/best-pay-sdk" target="_blank" rel="noopener">https://github.com/Pay-Group/best-pay-sdk</a></p>
<p><a href="https://github.com/Pay-Group/best-pay-demo" target="_blank" rel="noopener">https://github.com/Pay-Group/best-pay-demo</a></p>
<h3 id="2-1-SpringBoot项目初始化"><a href="#2-1-SpringBoot项目初始化" class="headerlink" title="2.1 SpringBoot项目初始化"></a>2.1 SpringBoot项目初始化</h3><p>maven：3.6.3</p>
<p>jdk:1.8</p>
<p>springboot2.1.7</p>
<h3 id="2-2-对接微信Native支付"><a href="#2-2-对接微信Native支付" class="headerlink" title="2.2 对接微信Native支付"></a>2.2 对接微信Native支付</h3><p>微信支付我实现的是Native支付，Native支付有两种模式。模式二与模式一相比，流程更为简单，不依赖设置的回调支付URL。</p>
<p>商户后台系统先调用微信支付的统一下单接口，微信后台系统返回链接参数code_url，商户后台系统将code_url值生成<strong>二维码</strong>图片，用户使用微信客户端扫码后发起支付。</p>
<p><strong>微信Native支付</strong>：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p>
<p><strong>模式二</strong>：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5</a></p>
<p><strong>注意：code_url有效期为2小时</strong>，过期后扫码不能再发起支付。</p>
<p>生成二维码所需参数列表</p>
<p><img src="/images/2020111909.png" alt="image-20201125160437833"></p>
<p>商户提供的支付回调URL（<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_3" target="_blank" rel="noopener">回调地址设置</a>）需要实现以下功能：接收用户扫码后微信支付系统发送的数据，根据接收的数据生成支付订单，调用【<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">统一下单API</a>】提交支付交易。</p>
<p>输入参数：</p>
<p><img src="/images/2020111910.png" alt="image-20201125160553821"></p>
<p>输出参数：</p>
<p><img src="/images/2020111911.png" alt="image-20201125160658048"></p>
<h3 id="2-3-对接支付宝支付"><a href="#2-3-对接支付宝支付" class="headerlink" title="2.3 对接支付宝支付"></a>2.3 对接支付宝支付</h3><p>该项目支付宝实现的是电脑网站支付</p>
<p><strong>支付宝电脑网站支付</strong>：<a href="https://opendocs.alipay.com/open/270/105898" target="_blank" rel="noopener">https://opendocs.alipay.com/open/270/105898</a></p>
<p><strong>支付宝沙箱环境</strong>：<a href="https://opendocs.alipay.com/open/200/105311" target="_blank" rel="noopener">https://opendocs.alipay.com/open/200/105311</a></p>
<p>接入之前需要设置这些参数，</p>
<table>
<thead>
<tr>
<th>配置参数</th>
<th>示例值解释</th>
<th>获取方式/示例值</th>
</tr>
</thead>
<tbody><tr>
<td>URL</td>
<td>支付宝网关（固定）</td>
<td><a href="https://openapi.alipay.com/gateway.do" target="_blank" rel="noopener">https://openapi.alipay.com/gateway.do</a></td>
</tr>
<tr>
<td>APPID</td>
<td>APPID 即创建应用后生成</td>
<td>获取见上方 创建应用</td>
</tr>
<tr>
<td>APP_PRIVATE_KEY</td>
<td>开发者私钥，由开发者自己生成</td>
<td>获取见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>FORMAT</td>
<td>参数返回格式，只支持 json</td>
<td>json（固定）</td>
</tr>
<tr>
<td>CHARSET</td>
<td>编码集，支持 GBK/UTF-8</td>
<td>开发者根据实际工程编码配置</td>
</tr>
<tr>
<td>ALIPAY_PUBLIC_KEY</td>
<td>支付宝公钥，由支付宝生成</td>
<td>获取详见 <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">配置密钥</a></td>
</tr>
<tr>
<td>SIGN_TYPE</td>
<td>商户生成签名字符串所使用的签名算法类型，目前支持 RSA2 和 RSA，推荐使用 RSA2</td>
<td>RSA2</td>
</tr>
</tbody></table>
<p><strong>Java代码配置如下图所示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span><br><span class="line">appId: xxxxxxxx</span><br><span class="line"># 商户私钥，您的PKCS8格式RSA2私钥</span><br><span class="line">privateKey: xxxxxxx</span><br><span class="line"># 支付宝公钥,查看地址：https:&#x2F;&#x2F;openhome.com&#x2F;platform&#x2F;keyManage.htm 对应APPID下的支付宝公钥。</span><br><span class="line">publicKey: xxxxxxx</span><br><span class="line"># 服务器异步通知页面路径需http:&#x2F;&#x2F;格式的完整路径，不能加?id&#x3D;123这类自定义参数</span><br><span class="line">notifyUrl:  http:&#x2F;&#x2F;xutakf.natappfree.cc&#x2F;notify</span><br><span class="line"># 页面跳转同步通知页面路径 需http:&#x2F;&#x2F;格式的完整路径，不能加?id&#x3D;123这类自定义参数</span><br><span class="line">returnUrl: http:&#x2F;&#x2F;xutakf.natappfree.cc&#x2F;pay&#x2F;success</span><br><span class="line"># 签名方式</span><br><span class="line">signType: RSA2</span><br><span class="line"># 字符编码格式</span><br><span class="line">charset: utf-8</span><br><span class="line"># 支付宝网关</span><br><span class="line">gatewayUrl: https:&#x2F;&#x2F;openapi.alipaydev.com&#x2F;gateway.do</span><br></pre></td></tr></table></figure>



<p>时序图：</p>
<p><img src="/images/2020111912.png" alt="电脑网站支付.png"></p>
<p>从图中可以大概知道思路，</p>
<p>首先发起支付：商户（商户应用私钥签名）–》支付宝（商户应用公钥验签）</p>
<p>异步通知：支付宝（支付宝私钥签名）–》商户（支付宝公钥验签）</p>
<h3 id="2-4-支付功能创建"><a href="#2-4-支付功能创建" class="headerlink" title="2.4 支付功能创建"></a>2.4 支付功能创建</h3><p>控制层：</p>
<p><strong>创建订单：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PayService payService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">create</span><span class="params">(@RequestParam(<span class="string">"orderId"</span>)</span>String orderId,</span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(<span class="string">"amount"</span>)</span>BigDecimal amount,@<span class="title">RequestParam</span><span class="params">(<span class="string">"payType"</span>)</span> BestPayTypeEnum bestPayTypeEnum)</span>&#123;</span><br><span class="line"></span><br><span class="line">        PayResponse response = payService.create(orderId,amount,bestPayTypeEnum);</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bestPayTypeEnum == BestPayTypeEnum.WXPAY_NATIVE)&#123;</span><br><span class="line">            map.put(<span class="string">"codeUrl"</span>,response.getCodeUrl());</span><br><span class="line">            map.put(<span class="string">"orderId"</span>,orderId);</span><br><span class="line">            map.put(<span class="string">"returnUrl"</span>, wxPayConfig.getReturnUrl());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"createForWxNative"</span>,map);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (bestPayTypeEnum == BestPayTypeEnum.ALIPAY_PC)&#123;</span><br><span class="line">            map.put(<span class="string">"body"</span>,response.getBody());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"createForAliPayPc"</span>,map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不支持的支付类型"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>业务层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PayResponse <span class="title">create</span><span class="params">(String orderId, BigDecimal amount, BestPayTypeEnum bestPayTypeEnum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据库</span></span><br><span class="line">    PayInfo payInfo = <span class="keyword">new</span> PayInfo(Long.parseLong(orderId),</span><br><span class="line">            PayPlatformEnum.getByBestPayTypeEnum(bestPayTypeEnum).getCode(),</span><br><span class="line">            OrderStatusEnum.NOTPAY.name(),</span><br><span class="line">            amount);</span><br><span class="line">    payInfoMapper.insertSelective(payInfo);</span><br><span class="line"></span><br><span class="line">    PayRequest payRequest = <span class="keyword">new</span> PayRequest();</span><br><span class="line">    payRequest.setOrderId(orderId);</span><br><span class="line">    payRequest.setOrderAmount(amount.doubleValue());</span><br><span class="line">    payRequest.setOrderName(<span class="string">"测试支付功能"</span>);</span><br><span class="line">    payRequest.setPayTypeEnum(bestPayTypeEnum);</span><br><span class="line"></span><br><span class="line">    PayResponse payResponse = bestPayService.pay(payRequest);</span><br><span class="line">    log.info(<span class="string">"response=&#123;&#125;"</span>,payResponse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="2-5-支付结果异步通知"><a href="#2-5-支付结果异步通知" class="headerlink" title="2.5  支付结果异步通知"></a>2.5  支付结果异步通知</h3><p>异步结果校验主要有四步：</p>
<p>1.签名校验</p>
<p>2.金额校验</p>
<p>3.修改订单支付状态</p>
<p>4.告诉微信/支付宝不要再通知了</p>
<p><strong>控制层</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;notify&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String asyncNotify(@RequestBody String notifyData)&#123;</span><br><span class="line">    log.info(&quot;notifyData&#123;&#125;&quot;,notifyData);</span><br><span class="line">    return payService.asyncNotify(notifyData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>业务层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">asyncNotify</span><span class="params">(String notifyDate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.签名校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PayResponse payResponse = bestPayService.asyncNotify(notifyDate);</span><br><span class="line">    log.info(<span class="string">"payResponse=&#123;&#125;"</span>,payResponse);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.金额校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PayInfo payInfo = payInfoMapper.selectByOrderNo(Long.parseLong(payResponse.getOrderId()));</span><br><span class="line">    <span class="keyword">if</span> (payInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//告警</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"通过orderNo查询到的结果是null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.修改订单支付状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//如果订单支付状态不是"已支付"</span></span><br><span class="line">    <span class="keyword">if</span> (!payInfo.getPlatformStatus().equals(OrderStatusEnum.SUCCESS.name())) &#123;</span><br><span class="line">        <span class="comment">//Double类型比较大小，精度。1.00  1.0</span></span><br><span class="line">        <span class="keyword">if</span> (payInfo.getPayAmount().compareTo(BigDecimal.valueOf(payResponse.getOrderAmount())) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//告警</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异步通知中的金额和数据库里的不一致，orderNo="</span> + payResponse.getOrderId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 修改订单支付状态</span></span><br><span class="line">        payInfo.setPlatformStatus(OrderStatusEnum.SUCCESS.name());</span><br><span class="line">        payInfo.setPlatformNumber(payResponse.getOutTradeNo());</span><br><span class="line"></span><br><span class="line">        payInfoMapper.updateByPrimaryKeySelective(payInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO pay发送MQ消息，mall接受MQ消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.告诉微信/支付宝不要再通知了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (payResponse.getPayPlatformEnum() == BestPayPlatformEnum.WX) &#123;</span><br><span class="line">        <span class="comment">//4. 告诉微信不要再通知了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;xml&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (payResponse.getPayPlatformEnum() == BestPayPlatformEnum.ALIPAY) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异步通知中错误的支付平台"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-6-支付与数据库"><a href="#2-6-支付与数据库" class="headerlink" title="2.6 支付与数据库"></a>2.6 支付与数据库</h3><p>支付数据肯定是要存储到数据库中的</p>
<p><img src="/images/2020111913.png" alt="image-20201203101112529"></p>
<p>数据：</p>
<p><img src="/images/2020111914.png" alt="image-20201203101112529"></p>
<h3 id="2-7-规范配置"><a href="#2-7-规范配置" class="headerlink" title="2.7 规范配置"></a>2.7 规范配置</h3><p>通过yml文件写配置信息，然后在写一个config类将配置整合，这样可以解耦合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"alipay"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wxpay"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxAccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mchKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BestPayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> WxAccountConfig wxAccountConfig;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AlipayAccountConfig alipayAccountConfig;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BestPayService <span class="title">bestPayServiceByWX</span><span class="params">(WxPayConfig wxPayConfig)</span> </span>&#123;</span><br><span class="line">      AliPayConfig aliPayConfig = <span class="keyword">new</span> AliPayConfig();</span><br><span class="line">      aliPayConfig.setAppId(alipayAccountConfig.getAppId());</span><br><span class="line">      aliPayConfig.setPrivateKey(alipayAccountConfig.getPrivateKey());</span><br><span class="line">      aliPayConfig.setAliPayPublicKey(alipayAccountConfig.getPublicKey());</span><br><span class="line">      aliPayConfig.setNotifyUrl(alipayAccountConfig.getNotifyUrl());</span><br><span class="line">      aliPayConfig.setReturnUrl(alipayAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      BestPayServiceImpl bestPayService = <span class="keyword">new</span> BestPayServiceImpl();</span><br><span class="line">      bestPayService.setWxPayConfig(wxPayConfig);</span><br><span class="line">      bestPayService.setAliPayConfig(aliPayConfig);</span><br><span class="line">      <span class="keyword">return</span> bestPayService;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> AliPayConfig <span class="title">aliPayConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">      AliPayConfig aliPayConfig = <span class="keyword">new</span> AliPayConfig();</span><br><span class="line"></span><br><span class="line">      aliPayConfig.setAppId(alipayAccountConfig.getAppId());</span><br><span class="line">      aliPayConfig.setPrivateKey(alipayAccountConfig.getPrivateKey());</span><br><span class="line">      aliPayConfig.setAliPayPublicKey(alipayAccountConfig.getPublicKey());</span><br><span class="line">      aliPayConfig.setNotifyUrl(alipayAccountConfig.getNotifyUrl());</span><br><span class="line">      aliPayConfig.setReturnUrl(alipayAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> aliPayConfig;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WxPayConfig <span class="title">wxPayConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      WxPayConfig wxPayConfig = <span class="keyword">new</span> WxPayConfig();</span><br><span class="line"></span><br><span class="line">      wxPayConfig.setAppId(wxAccountConfig.getAppId());</span><br><span class="line">      wxPayConfig.setMchId(wxAccountConfig.getMchId());</span><br><span class="line">      wxPayConfig.setMchKey(wxAccountConfig.getMchKey());</span><br><span class="line"></span><br><span class="line">      wxPayConfig.setNotifyUrl(wxAccountConfig.getNotifyUrl());</span><br><span class="line">      wxPayConfig.setReturnUrl(wxAccountConfig.getReturnUrl());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> wxPayConfig;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-内网穿透"><a href="#3-内网穿透" class="headerlink" title="3.内网穿透"></a>3.内网穿透</h2><p>可以通过内网穿透的方式调试支付功能</p>
<p><a href="https://natapp.cn/article/natapp_newbie" target="_blank" rel="noopener">https://natapp.cn/article/natapp_newbie</a></p>
]]></content>
      <categories>
        <category>支付系统</category>
      </categories>
      <tags>
        <tag>Native支付</tag>
        <tag>支付宝PC支付</tag>
      </tags>
  </entry>
  <entry>
    <title>通用型支付系统接入电商平台</title>
    <url>/2020/12/11/%E9%80%9A%E7%94%A8%E5%9E%8B%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%85%A5%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>一个典型的电商平台，简要记录一下，，，主要是为了测试支付系统</p>
<p>主要分为以下5个模块</p>
<ol>
<li>用户模块</li>
<li>分类模块</li>
<li>购物车模块</li>
<li>收货地址模块</li>
<li>订单模块</li>
</ol>
<a id="more"></a>

<blockquote>
<p>项目地址：<a href="https://github.com/liuurick/mall-pay/tree/master/mall" target="_blank" rel="noopener">https://github.com/liuurick/mall-pay/tree/master/mall</a></p>
</blockquote>
<h1 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h1><p>用户模块开发中的几点总结：</p>
<h2 id="1-MD5加密的方法"><a href="#1-MD5加密的方法" class="headerlink" title="1.MD5加密的方法"></a>1.MD5加密的方法</h2><p>MD5摘要算法(Spring自带)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user.setPassword(DigestUtils.md5DigestAsHex(</span><br><span class="line">        user.getPassword().getBytes(StandardCharsets.UTF_8)</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<h2 id="2-单元测试：service层"><a href="#2-单元测试：service层" class="headerlink" title="2.单元测试：service层"></a>2.单元测试：service层</h2><p>单元测试的时候一般只需要测试service层，可以在idea中直接右键goto Test—&gt;create new Test</p>
<p>对于系统项目的开发，开发步骤一般为dao–&gt;service–&gt;controller，所以没有必要测试其他两层。</p>
<h2 id="3-Mybatis打印SQL语句"><a href="#3-Mybatis打印SQL语句" class="headerlink" title="3.Mybatis打印SQL语句"></a>3.Mybatis打印SQL语句</h2><p>控制台配置 Mybatis打印SQL语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>



<h2 id="4-错误状态码使用枚举"><a href="#4-错误状态码使用枚举" class="headerlink" title="4.错误状态码使用枚举"></a>4.错误状态码使用枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum &#123;</span><br><span class="line"></span><br><span class="line">	ERROR(-<span class="number">1</span>, <span class="string">"服务端错误"</span>),</span><br><span class="line"></span><br><span class="line">	SUCCESS(<span class="number">0</span>, <span class="string">"成功"</span>),</span><br><span class="line"></span><br><span class="line">	PASSWORD_ERROR(<span class="number">1</span>,<span class="string">"密码错误"</span>),</span><br><span class="line"></span><br><span class="line">	USERNAME_EXIST(<span class="number">2</span>, <span class="string">"用户名已存在"</span>),</span><br><span class="line"></span><br><span class="line">	PARAM_ERROR(<span class="number">3</span>, <span class="string">"参数错误"</span>),</span><br><span class="line"></span><br><span class="line">	EMAIL_EXIST(<span class="number">4</span>, <span class="string">"邮箱已存在"</span>),</span><br><span class="line"></span><br><span class="line">	NEED_LOGIN(<span class="number">10</span>, <span class="string">"用户未登录, 请先登录"</span>),</span><br><span class="line"></span><br><span class="line">	USERNAME_OR_PASSWORD_ERROR(<span class="number">11</span>, <span class="string">"用户名或密码错误"</span>),</span><br><span class="line"></span><br><span class="line">	PRODUCT_OFF_SALE_OR_DELETE(<span class="number">12</span>, <span class="string">"商品下架或删除"</span>),</span><br><span class="line"></span><br><span class="line">	PRODUCT_NOT_EXIST(<span class="number">13</span>, <span class="string">"商品不存在"</span>),</span><br><span class="line"></span><br><span class="line">	PROODUCT_STOCK_ERROR(<span class="number">14</span>, <span class="string">"库存不正确"</span>),</span><br><span class="line"></span><br><span class="line">	CART_PRODUCT_NOT_EXIST(<span class="number">15</span>, <span class="string">"购物车里无此商品"</span>),</span><br><span class="line"></span><br><span class="line">	DELETE_SHIPPING_FAIL(<span class="number">16</span>, <span class="string">"删除收货地址失败"</span>),</span><br><span class="line"></span><br><span class="line">	SHIPPING_NOT_EXIST(<span class="number">17</span>, <span class="string">"收货地址不存在"</span>),</span><br><span class="line"></span><br><span class="line">	CART_SELECTED_IS_EMPTY(<span class="number">18</span>, <span class="string">"请选择商品后下单"</span>),</span><br><span class="line"></span><br><span class="line">	ORDER_NOT_EXIST(<span class="number">19</span>, <span class="string">"订单不存在"</span>),</span><br><span class="line"></span><br><span class="line">	ORDER_STATUS_ERROR(<span class="number">20</span>, <span class="string">"订单状态有误"</span>),</span><br><span class="line"></span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">	Integer code;</span><br><span class="line"></span><br><span class="line">	String desc;</span><br><span class="line"></span><br><span class="line">	ResponseEnum(Integer code, String desc) &#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-session和cookie"><a href="#5-session和cookie" class="headerlink" title="5.session和cookie"></a>5.session和cookie</h2><blockquote>
<p><a href="https://segmentfault.com/a/1190000017831088" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017831088</a></p>
</blockquote>
<p>对于cookie与session，第一印象就是session是服务器端技术，cookie是客户端技术。一般情况下，由于cookie具备安全性问题和很多游览器禁用cookie，我们平时使用session更广泛一些。但是其实session与cookie不分家，sessionId存储在cookie中。</p>
<p>另外还有一个重点，就是cookie跨域问题，localhost与127.0.0.1就是跨域</p>
<h2 id="6-统一判断登录状态-拦截器"><a href="#6-统一判断登录状态-拦截器" class="headerlink" title="6.统一判断登录状态-拦截器"></a>6.统一判断登录状态-拦截器</h2><blockquote>
<p>过滤器+监听器+拦截器+AOP 比较:<a href="https://segmentfault.com/a/1190000021823564" target="_blank" rel="noopener">https://segmentfault.com/a/1190000021823564</a></p>
</blockquote>
<p>对于拦截器，主要有两种技术：</p>
<blockquote>
<p>Interceptor 基于http的url 比较简单</p>
<p>AOP 基于包名 ，功能比较强大</p>
</blockquote>
<p>这里使用Interceptor实现:</p>
<p><strong>InterceptorConfig:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> UserLoginInterceptor())</span><br><span class="line">				.addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">				.excludePathPatterns(<span class="string">"/error"</span>, <span class="string">"/user/login"</span>, <span class="string">"/user/register"</span>, <span class="string">"/categories"</span>, <span class="string">"/products"</span>, <span class="string">"/products/*"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserLoginInterceptor:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * true表示继续流程，false表示中断</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      log.info(<span class="string">"preHandle..."</span>);</span><br><span class="line">      User user = (User) request.getSession().getAttribute(MallConst.CURRENT_USER);</span><br><span class="line">      <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">         log.info(<span class="string">"user=null"</span>);</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> UserLoginException();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="分类模块"><a href="#分类模块" class="headerlink" title="分类模块"></a>分类模块</h1><blockquote>
<p>对于商品分类的遍历有两种方法：</p>
<p>1.先查出1级目录–》查其子目录，一直查到的是null</p>
<p>2.查出目录–》查父目录，一直查到parent_id=0</p>
</blockquote>
<p>这里使用的是第1种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseVo&lt;List&lt;CategoryVo&gt;&gt; selectAll() &#123;</span><br><span class="line">    List&lt;Category&gt; categories = categoryMapper.selectAll();</span><br><span class="line"></span><br><span class="line">    List&lt;CategoryVo&gt; categoryVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//查出parent_id=0</span></span><br><span class="line">    <span class="keyword">for</span> (Category category: categories) &#123;</span><br><span class="line">        <span class="keyword">if</span> (categories.equals(ROOT_PARENT_ID))&#123;</span><br><span class="line">            CategoryVo categoryVo = <span class="keyword">new</span> CategoryVo();</span><br><span class="line">            BeanUtils.copyProperties(category,categoryVo);</span><br><span class="line">            categoryVoList.add(categoryVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> ResponseVo.success(categoryVoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>遍历子分类，用到了递归思想</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findSubCategory</span><span class="params">(List&lt;CategoryVo&gt; categoryVoList, List&lt;Category&gt; categories)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (CategoryVo categoryVo : categoryVoList) &#123;</span><br><span class="line">        List&lt;CategoryVo&gt; subCategoryVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Category category : categories) &#123;</span><br><span class="line">            <span class="comment">//如果查到内容，设置subCategory, 继续往下查</span></span><br><span class="line">            <span class="keyword">if</span> (categoryVo.getId().equals(category.getParentId())) &#123;</span><br><span class="line">                CategoryVo subCategoryVo = category2CategoryVo(category);</span><br><span class="line">                subCategoryVoList.add(subCategoryVo);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//排序</span></span><br><span class="line">            subCategoryVoList.sort(Comparator.comparing(CategoryVo::getSortOrder).reversed());</span><br><span class="line">            categoryVo.setSubCategories(subCategoryVoList);</span><br><span class="line"></span><br><span class="line">            findSubCategory(subCategoryVoList, categories);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用lambda + stream对代码进行优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVo&lt;List&lt;CategoryVo&gt;&gt; selectAll() &#123;</span><br><span class="line">        List&lt;Category&gt; categories = categoryMapper.selectAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda + stream</span></span><br><span class="line">        List&lt;CategoryVo&gt; categoryVoList = categories.stream()</span><br><span class="line">                .filter(e -&gt; e.getParentId().equals(ROOT_PARENT_ID))</span><br><span class="line">                .map(<span class="keyword">this</span>::category2CategoryVo)</span><br><span class="line">                .sorted(Comparator.comparing(CategoryVo::getSortOrder).reversed())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询子目录</span></span><br><span class="line">        findSubCategory(categoryVoList, categories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseVo.success(categoryVoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h1 id="商品模块"><a href="#商品模块" class="headerlink" title="商品模块"></a>商品模块</h1><p>分页功能：</p>
<p>基于SpringBoot集成的mybatis-pagehelper进行分页实践。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;PageInfo&gt; <span class="title">list</span><span class="params">(Integer categoryId, Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; categoryIdSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (categoryId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        categoryService.findSubCategoryId(categoryId, categoryIdSet);</span><br><span class="line">        categoryIdSet.add(categoryId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页功能</span></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    List&lt;Product&gt; productList = productMapper.selectByCategoryIdSet(categoryIdSet);</span><br><span class="line">    List&lt;ProductVo&gt; productVoList = productList.stream()</span><br><span class="line">        .map(e -&gt; &#123;</span><br><span class="line">            ProductVo productVo = <span class="keyword">new</span> ProductVo();</span><br><span class="line">            BeanUtils.copyProperties(e, productVo);</span><br><span class="line">            <span class="keyword">return</span> productVo;</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    PageInfo pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(productList);</span><br><span class="line">    pageInfo.setList(productVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseVo.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>POJO、BO、VO的关系与解决思路</p>
<h1 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h1><p>基于Redis完成购物车开发，首先基于传统的String结构完成购物车开发，然后，进行优化重构，基于Hashset数据结构替换，最终实现高性能购物车</p>
<h2 id="商品添加"><a href="#商品添加" class="headerlink" title="商品添加"></a>商品添加</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;CartVo&gt; <span class="title">add</span><span class="params">(Integer uid, CartAddForm form)</span> </span>&#123;</span><br><span class="line">    Integer quantity = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(form.getProductId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (product == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品是否正常在售</span></span><br><span class="line">    <span class="keyword">if</span> (!product.getStatus().equals(ProductStatusEnum.ON_SALE.getCode())) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PRODUCT_OFF_SALE_OR_DELETE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (product.getStock() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseVo.error(ResponseEnum.PROODUCT_STOCK_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入到redis</span></span><br><span class="line">    <span class="comment">//key: cart_1</span></span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  = String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    Cart cart;</span><br><span class="line">    String value = opsForHash.get(redisKey, String.valueOf(product.getId()));</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        <span class="comment">//没有该商品, 新增</span></span><br><span class="line">        cart = <span class="keyword">new</span> Cart(product.getId(), quantity, form.getSelected());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//已经有了，数量+1</span></span><br><span class="line">        cart = gson.fromJson(value, Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        cart.setQuantity(cart.getQuantity() + quantity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.put(redisKey,</span><br><span class="line">            String.valueOf(product.getId()),</span><br><span class="line">            gson.toJson(cart));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品遍历"><a href="#商品遍历" class="headerlink" title="商品遍历"></a>商品遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseVo&lt;CartVo&gt; <span class="title">list</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  = String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line">    Map&lt;String, String&gt; entries = opsForHash.entries(redisKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> selectAll = <span class="keyword">true</span>;</span><br><span class="line">    Integer cartTotalQuantity = <span class="number">0</span>;</span><br><span class="line">    BigDecimal cartTotalPrice = BigDecimal.ZERO;</span><br><span class="line">    CartVo cartVo = <span class="keyword">new</span> CartVo();</span><br><span class="line">    List&lt;CartProductVo&gt; cartProductVoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries.entrySet()) &#123;</span><br><span class="line">        Integer productId = Integer.valueOf(entry.getKey());</span><br><span class="line">        Cart cart = gson.fromJson(entry.getValue(), Cart<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 需要优化，使用mysql里的in</span></span><br><span class="line">        Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">        <span class="keyword">if</span> (product != <span class="keyword">null</span>) &#123;</span><br><span class="line">            CartProductVo cartProductVo = <span class="keyword">new</span> CartProductVo(productId,</span><br><span class="line">                    cart.getQuantity(),</span><br><span class="line">                    product.getName(),</span><br><span class="line">                    product.getSubtitle(),</span><br><span class="line">                    product.getMainImage(),</span><br><span class="line">                    product.getPrice(),</span><br><span class="line">                    product.getStatus(),</span><br><span class="line">                    product.getPrice().multiply(BigDecimal.valueOf(cart.getQuantity())),</span><br><span class="line">                    product.getStock(),</span><br><span class="line">                    cart.getProductSelected()</span><br><span class="line">            );</span><br><span class="line">            cartProductVoList.add(cartProductVo);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!cart.getProductSelected()) &#123;</span><br><span class="line">                selectAll = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算总价(只计算选中的)</span></span><br><span class="line">            <span class="keyword">if</span> (cart.getProductSelected()) &#123;</span><br><span class="line">                cartTotalPrice = cartTotalPrice.add(cartProductVo.getProductTotalPrice());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cartTotalQuantity += cart.getQuantity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个没有选中，就不叫全选</span></span><br><span class="line">    cartVo.setSelectedAll(selectAll);</span><br><span class="line">    cartVo.setCartTotalQuantity(cartTotalQuantity);</span><br><span class="line">    cartVo.setCartTotalPrice(cartTotalPrice);</span><br><span class="line">    cartVo.setCartProductVoList(cartProductVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseVo.success(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品更新"><a href="#商品更新" class="headerlink" title="商品更新"></a>商品更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; update(Integer uid, Integer productId, CartUpdateForm form) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    String value &#x3D; opsForHash.get(redisKey, String.valueOf(productId));</span><br><span class="line">    if (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        &#x2F;&#x2F;没有该商品, 报错</span><br><span class="line">        return ResponseVo.error(ResponseEnum.CART_PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;已经有了，修改内容</span><br><span class="line">    Cart cart &#x3D; gson.fromJson(value, Cart.class);</span><br><span class="line">    if (form.getQuantity() !&#x3D; null</span><br><span class="line">            &amp;&amp; form.getQuantity() &gt;&#x3D; 0) &#123;</span><br><span class="line">        cart.setQuantity(form.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">    if (form.getSelected() !&#x3D; null) &#123;</span><br><span class="line">        cart.setProductSelected(form.getSelected());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.put(redisKey, String.valueOf(productId), gson.toJson(cart));</span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品删除"><a href="#商品删除" class="headerlink" title="商品删除"></a>商品删除</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; delete(Integer uid, Integer productId) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    String value &#x3D; opsForHash.get(redisKey, String.valueOf(productId));</span><br><span class="line">    if (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">        &#x2F;&#x2F;没有该商品, 报错</span><br><span class="line">        return ResponseVo.error(ResponseEnum.CART_PRODUCT_NOT_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opsForHash.delete(redisKey, String.valueOf(productId));</span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品的选择"><a href="#商品的选择" class="headerlink" title="商品的选择"></a>商品的选择</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; selectAll(Integer uid) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    for (Cart cart : listForCart(uid)) &#123;</span><br><span class="line">        cart.setProductSelected(true);</span><br><span class="line">        opsForHash.put(redisKey,</span><br><span class="line">                String.valueOf(cart.getProductId()),</span><br><span class="line">                gson.toJson(cart));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ResponseVo&lt;CartVo&gt; unSelectAll(Integer uid) &#123;</span><br><span class="line">    HashOperations&lt;String, String, String&gt; opsForHash &#x3D; redisTemplate.opsForHash();</span><br><span class="line">    String redisKey  &#x3D; String.format(CART_REDIS_KEY_TEMPLATE, uid);</span><br><span class="line"></span><br><span class="line">    for (Cart cart : listForCart(uid)) &#123;</span><br><span class="line">        cart.setProductSelected(false);</span><br><span class="line">        opsForHash.put(redisKey,</span><br><span class="line">                String.valueOf(cart.getProductId()),</span><br><span class="line">                gson.toJson(cart));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return list(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="收货地址模块"><a href="#收货地址模块" class="headerlink" title="收货地址模块"></a>收货地址模块</h1><p>Spring数据绑定中的对象绑定。</p>
<h1 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h1><p>订单模块接收支付发送的MQ消息，MQ在业务解耦</p>
<p><strong>如何为支付预留扩展性</strong></p>
<blockquote>
<p>docker安装rabbitmq：<a href="https://liuurick.github.io/2020/07/27/Docker安装RabbitMQ/" target="_blank" rel="noopener">https://liuurick.github.io/2020/07/27/Docker%E5%AE%89%E8%A3%85RabbitMQ/</a></p>
</blockquote>
<p>1.引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.编写配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    rabbitmq:</span><br><span class="line">        addresses: 192.168.60.129</span><br><span class="line">        port: 5672</span><br><span class="line">        username: guest</span><br><span class="line">        password: guest</span><br></pre></td></tr></table></figure>



<p>在支付系统中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_PAY_NOTIFY = <span class="string">"payNotify"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO pay发送MQ消息，mall接受MQ消息</span></span><br><span class="line">amqpTemplate.convertAndSend(QUEUE_PAY_NOTIFY, <span class="keyword">new</span> Gson().toJson(payInfo));</span><br></pre></td></tr></table></figure>

<p>在商城系统中添加listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"payNotify"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayMsgListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"【接收到消息】=&gt; &#123;&#125;"</span>, msg);</span><br><span class="line"></span><br><span class="line">        PayInfo payInfo = <span class="keyword">new</span> Gson().fromJson(msg, PayInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (payInfo.getPlatformStatus().equals(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">            <span class="comment">//修改订单里的状态</span></span><br><span class="line">            orderService.paid(payInfo.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>电商平台</category>
      </categories>
      <tags>
        <tag>电商平台</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙管理</title>
    <url>/2019/01/11/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>防火墙常用命令</p>
<a id="more"></a>

<h3 id="防火墙常用命令："><a href="#防火墙常用命令：" class="headerlink" title="防火墙常用命令："></a>防火墙常用命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看状态：firewall-cmd --state </span><br><span class="line">启动：service firewall start</span><br><span class="line">关闭：service firewall stop</span><br><span class="line">重启防火墙：service firewall restart</span><br></pre></td></tr></table></figure>

<h3 id="端口管理："><a href="#端口管理：" class="headerlink" title="端口管理："></a>端口管理：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看端口：firewall-cmd --permanent --list-ports</span><br><span class="line">查看哪些程序正在使用互联网：firewall-cmd --permanent --list-services</span><br><span class="line">添加端口：firewall-cmd --permanent --add-port&#x3D;8080-8085&#x2F;tcp</span><br><span class="line">加载设置：firewall-cmd --reload</span><br><span class="line">删除端口：firewall-cmd --permanent --remove-port&#x3D;8080-8085&#x2F;tcp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象五大基本原则</title>
    <url>/2020/12/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>五个基本原则：</p>
<p><strong>s(</strong> Single-Resposibility Principle <strong>):</strong> 单一职责原则</p>
<p><strong>o(</strong> Open-Closed principle <strong>):</strong> 开放封闭原则</p>
<p><strong>l(</strong> Liskov-Substituion Principle <strong>):</strong> 里氏原则</p>
<p><strong>i(</strong> Interface-Segregation Principle <strong>):</strong> 接口隔离原则</p>
<p><strong>d(</strong> Dependecy-Inversion Principle <strong>):</strong> 依赖倒置原则</p>
<p><strong>一个单词：立方体(solid),很好记!!!</strong></p>
<a id="more"></a>

<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>单一职责原则（Single-Resposibility Principle）：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。</p>
<h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><p>开放封闭原则（Open-Closed principle）：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。</p>
<h1 id="里式原则"><a href="#里式原则" class="headerlink" title="里式原则"></a>里式原则</h1><p>子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。</p>
<h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><p>接口隔离原则（Interface-Segregation Principle）：使用多个小的专门的接口，而不要使用一个大的总接口</p>
<h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><p>依赖倒置原则（Dependecy-Inversion Principle）：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
]]></content>
      <categories>
        <category>软件工程</category>
        <category>面向对象</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）重定向与转发</title>
    <url>/2018/04/21/%EF%BC%88%E8%BD%AC%EF%BC%89%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><a id="more"></a>

<p>重定向（redirect）与转发（forward）</p>
<h3 id="解释一"><a href="#解释一" class="headerlink" title="解释一　　"></a>解释一　　</h3><p>一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：</p>
<p><strong>转发过程：</strong>客户浏览器发送http请求—》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—》将目标资源发送给客户；在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。</p>
<p><strong>重定向过程：</strong>客户浏览器发送http请求—》web服务器接受后发送302状态码响应及对应新的location给客户浏览器—》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。</p>
<h3 id="解释二"><a href="#解释二" class="headerlink" title="解释二"></a>解释二</h3><p>重定向，其实是两次request,<br>第一次，客户端request  A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p>
<p><strong>例子：</strong></p>
<p><img src="/images/2020102301.png" alt="img"><br>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个<br>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。</p>
<p> <strong>例子：</strong></p>
<p><img src="/images/2020102302.png" alt="img"></p>
<h3 id="解释三"><a href="#解释三" class="headerlink" title="解释三"></a>解释三</h3><p>假设你去办理某个执照， </p>
<p><strong>重定向：</strong>你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后，你就从A退了出来，自己乘车去了B局。 </p>
<p><strong>转发：</strong>你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有把你退回来，而是让你坐一会儿，自己到后面办公室联系了B的人，让他们办好后，送了过来。</p>
]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
</search>
